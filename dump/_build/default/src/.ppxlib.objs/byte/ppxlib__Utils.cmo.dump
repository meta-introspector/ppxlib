[
  structure_item (src/utils.ml[1,0+0]..[1,0+11])
    Pstr_open Fresh
    module_expr (src/utils.ml[1,0+5]..[1,0+11])
      Pmod_ident "Import" (src/utils.ml[1,0+5]..[1,0+11])
  structure_item (src/utils.ml[3,13+0]..[6,93+50])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/utils.ml[3,13+4]..[3,13+15])
          Ppat_var "with_output" (src/utils.ml[3,13+4]..[3,13+15])
        expression (src/utils.ml[3,13+16]..[6,93+50]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/utils.ml[3,13+16]..[3,13+18])
            Ppat_var "fn" (src/utils.ml[3,13+16]..[3,13+18])
          expression (src/utils.ml[3,13+19]..[6,93+50]) ghost
            Pexp_fun
            Labelled "binary"
            None
            pattern (src/utils.ml[3,13+20]..[3,13+26])
              Ppat_var "binary" (src/utils.ml[3,13+20]..[3,13+26])
            expression (src/utils.ml[3,13+27]..[6,93+50]) ghost
              Pexp_fun
              Labelled "f"
              None
              pattern (src/utils.ml[3,13+28]..[3,13+29])
                Ppat_var "f" (src/utils.ml[3,13+28]..[3,13+29])
              expression (src/utils.ml[4,45+2]..[6,93+50])
                Pexp_match
                expression (src/utils.ml[4,45+8]..[4,45+10])
                  Pexp_ident "fn" (src/utils.ml[4,45+8]..[4,45+10])
                [
                  <case>
                    pattern (src/utils.ml[5,61+4]..[5,61+19])
                      Ppat_or
                      pattern (src/utils.ml[5,61+4]..[5,61+8])
                        Ppat_construct "None" (src/utils.ml[5,61+4]..[5,61+8])
                        None
                      pattern (src/utils.ml[5,61+11]..[5,61+19])
                        Ppat_construct "Some" (src/utils.ml[5,61+11]..[5,61+15])
                        Some
                          pattern (src/utils.ml[5,61+16]..[5,61+19])
                            Ppat_constant PConst_string("-",(src/utils.ml[5,61+17]..[5,61+18]),None)
                    expression (src/utils.ml[5,61+23]..[5,61+31])
                      Pexp_apply
                      expression (src/utils.ml[5,61+23]..[5,61+24])
                        Pexp_ident "f" (src/utils.ml[5,61+23]..[5,61+24])
                      [
                        <arg>
                        Nolabel
                          expression (src/utils.ml[5,61+25]..[5,61+31])
                            Pexp_ident "stdout" (src/utils.ml[5,61+25]..[5,61+31])
                      ]
                  <case>
                    pattern (src/utils.ml[6,93+4]..[6,93+11])
                      Ppat_construct "Some" (src/utils.ml[6,93+4]..[6,93+8])
                      Some
                        pattern (src/utils.ml[6,93+9]..[6,93+11])
                          Ppat_var "fn" (src/utils.ml[6,93+9]..[6,93+11])
                    expression (src/utils.ml[6,93+15]..[6,93+50])
                      Pexp_apply
                      expression (src/utils.ml[6,93+15]..[6,93+36])
                        Pexp_ident "Out_channel.with_file" (src/utils.ml[6,93+15]..[6,93+36])
                      [
                        <arg>
                        Nolabel
                          expression (src/utils.ml[6,93+37]..[6,93+39])
                            Pexp_ident "fn" (src/utils.ml[6,93+37]..[6,93+39])
                        <arg>
                        Labelled "binary"
                          expression (src/utils.ml[6,93+41]..[6,93+47])
                            Pexp_ident "binary" (src/utils.ml[6,93+41]..[6,93+47])
                        <arg>
                        Labelled "f"
                          expression (src/utils.ml[6,93+49]..[6,93+50])
                            Pexp_ident "f" (src/utils.ml[6,93+49]..[6,93+50])
                      ]
                ]
    ]
  structure_item (src/utils.ml[8,145+0]..[18,480+3])
    Pstr_module
    "Kind" (src/utils.ml[8,145+7]..[8,145+11])
      module_expr (src/utils.ml[8,145+14]..[18,480+3])
        Pmod_structure
        [
          structure_item (src/utils.ml[9,166+2]..[9,166+22])
            Pstr_type Rec
            [
              type_declaration "t" (src/utils.ml[9,166+7]..[9,166+8]) (src/utils.ml[9,166+2]..[9,166+22])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/utils.ml[9,166+11]..[9,166+15])
                        "Intf" (src/utils.ml[9,166+11]..[9,166+15])
                        []
                        None
                      (src/utils.ml[9,166+16]..[9,166+22])
                        "Impl" (src/utils.ml[9,166+18]..[9,166+22])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[11,190+2]..[14,350+13])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[11,190+6]..[11,190+17])
                  Ppat_var "of_filename" (src/utils.ml[11,190+6]..[11,190+17])
                expression (src/utils.ml[11,190+18]..[14,350+13]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[11,190+18]..[11,190+20])
                    Ppat_var "fn" (src/utils.ml[11,190+18]..[11,190+20])
                  expression (src/utils.ml[11,190+21]..[14,350+13]) ghost
                    Pexp_constraint
                    expression (src/utils.ml[12,224+4]..[14,350+13])
                      Pexp_ifthenelse
                      expression (src/utils.ml[12,224+7]..[12,224+44])
                        Pexp_apply
                        expression (src/utils.ml[12,224+7]..[12,224+35])
                          Pexp_ident "Stdlib.Filename.check_suffix" (src/utils.ml[12,224+7]..[12,224+35])
                        [
                          <arg>
                          Nolabel
                            expression (src/utils.ml[12,224+36]..[12,224+38])
                              Pexp_ident "fn" (src/utils.ml[12,224+36]..[12,224+38])
                          <arg>
                          Nolabel
                            expression (src/utils.ml[12,224+39]..[12,224+44])
                              Pexp_constant PConst_string(".ml",(src/utils.ml[12,224+40]..[12,224+43]),None)
                        ]
                      expression (src/utils.ml[12,224+50]..[12,224+59])
                        Pexp_construct "Some" (src/utils.ml[12,224+50]..[12,224+54])
                        Some
                          expression (src/utils.ml[12,224+55]..[12,224+59])
                            Pexp_construct "Impl" (src/utils.ml[12,224+55]..[12,224+59])
                            None
                      Some
                        expression (src/utils.ml[13,284+9]..[14,350+13])
                          Pexp_ifthenelse
                          expression (src/utils.ml[13,284+12]..[13,284+50])
                            Pexp_apply
                            expression (src/utils.ml[13,284+12]..[13,284+40])
                              Pexp_ident "Stdlib.Filename.check_suffix" (src/utils.ml[13,284+12]..[13,284+40])
                            [
                              <arg>
                              Nolabel
                                expression (src/utils.ml[13,284+41]..[13,284+43])
                                  Pexp_ident "fn" (src/utils.ml[13,284+41]..[13,284+43])
                              <arg>
                              Nolabel
                                expression (src/utils.ml[13,284+44]..[13,284+50])
                                  Pexp_constant PConst_string(".mli",(src/utils.ml[13,284+45]..[13,284+49]),None)
                            ]
                          expression (src/utils.ml[13,284+56]..[13,284+65])
                            Pexp_construct "Some" (src/utils.ml[13,284+56]..[13,284+60])
                            Some
                              expression (src/utils.ml[13,284+61]..[13,284+65])
                                Pexp_construct "Intf" (src/utils.ml[13,284+61]..[13,284+65])
                                None
                          Some
                            expression (src/utils.ml[14,350+9]..[14,350+13])
                              Pexp_construct "None" (src/utils.ml[14,350+9]..[14,350+13])
                              None
                    core_type (src/utils.ml[11,190+23]..[11,190+31])
                      Ptyp_constr "option" (src/utils.ml[11,190+25]..[11,190+31])
                      [
                        core_type (src/utils.ml[11,190+23]..[11,190+24])
                          Ptyp_constr "t" (src/utils.ml[11,190+23]..[11,190+24])
                          []
                      ]
            ]
          structure_item (src/utils.ml[16,365+2]..[16,365+72])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[16,365+6]..[16,365+14])
                  Ppat_var "describe" (src/utils.ml[16,365+6]..[16,365+14])
                expression (src/utils.ml[16,365+17]..[16,365+72])
                  Pexp_function
                  [
                    <case>
                      pattern (src/utils.ml[16,365+26]..[16,365+30])
                        Ppat_construct "Impl" (src/utils.ml[16,365+26]..[16,365+30])
                        None
                      expression (src/utils.ml[16,365+34]..[16,365+50])
                        Pexp_constant PConst_string("implementation",(src/utils.ml[16,365+35]..[16,365+49]),None)
                    <case>
                      pattern (src/utils.ml[16,365+53]..[16,365+57])
                        Ppat_construct "Intf" (src/utils.ml[16,365+53]..[16,365+57])
                        None
                      expression (src/utils.ml[16,365+61]..[16,365+72])
                        Pexp_constant PConst_string("interface",(src/utils.ml[16,365+62]..[16,365+71]),None)
                  ]
            ]
          structure_item (src/utils.ml[17,438+2]..[17,438+41])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[17,438+6]..[17,438+28]) ghost
                  Ppat_constraint
                  pattern (src/utils.ml[17,438+6]..[17,438+11])
                    Ppat_var "equal" (src/utils.ml[17,438+6]..[17,438+11])
                  core_type (src/utils.ml[17,438+14]..[17,438+28]) ghost
                    Ptyp_poly
                    core_type (src/utils.ml[17,438+14]..[17,438+28])
                      Ptyp_arrow
                      Nolabel
                      core_type (src/utils.ml[17,438+14]..[17,438+15])
                        Ptyp_constr "t" (src/utils.ml[17,438+14]..[17,438+15])
                        []
                      core_type (src/utils.ml[17,438+19]..[17,438+28])
                        Ptyp_arrow
                        Nolabel
                        core_type (src/utils.ml[17,438+19]..[17,438+20])
                          Ptyp_constr "t" (src/utils.ml[17,438+19]..[17,438+20])
                          []
                        core_type (src/utils.ml[17,438+24]..[17,438+28])
                          Ptyp_constr "bool" (src/utils.ml[17,438+24]..[17,438+28])
                          []
                expression (src/utils.ml[17,438+6]..[17,438+41]) ghost
                  Pexp_constraint
                  expression (src/utils.ml[17,438+31]..[17,438+41])
                    Pexp_ident "Poly.equal" (src/utils.ml[17,438+31]..[17,438+41])
                  core_type (src/utils.ml[17,438+14]..[17,438+28])
                    Ptyp_arrow
                    Nolabel
                    core_type (src/utils.ml[17,438+14]..[17,438+15])
                      Ptyp_constr "t" (src/utils.ml[17,438+14]..[17,438+15])
                      []
                    core_type (src/utils.ml[17,438+19]..[17,438+28])
                      Ptyp_arrow
                      Nolabel
                      core_type (src/utils.ml[17,438+19]..[17,438+20])
                        Ptyp_constr "t" (src/utils.ml[17,438+19]..[17,438+20])
                        []
                      core_type (src/utils.ml[17,438+24]..[17,438+28])
                        Ptyp_constr "bool" (src/utils.ml[17,438+24]..[17,438+28])
                        []
            ]
        ]
  structure_item (src/utils.ml[20,485+0]..[34,942+3])
    Pstr_module
    "Intf_or_impl" (src/utils.ml[20,485+7]..[20,485+19])
      module_expr (src/utils.ml[20,485+22]..[34,942+3])
        Pmod_structure
        [
          structure_item (src/utils.ml[21,514+2]..[21,514+48])
            Pstr_type Rec
            [
              type_declaration "t" (src/utils.ml[21,514+7]..[21,514+8]) (src/utils.ml[21,514+2]..[21,514+48])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/utils.ml[21,514+11]..[21,514+28])
                        "Intf" (src/utils.ml[21,514+11]..[21,514+15])
                        [
                          core_type (src/utils.ml[21,514+19]..[21,514+28])
                            Ptyp_constr "signature" (src/utils.ml[21,514+19]..[21,514+28])
                            []
                        ]
                        None
                      (src/utils.ml[21,514+29]..[21,514+48])
                        "Impl" (src/utils.ml[21,514+31]..[21,514+35])
                        [
                          core_type (src/utils.ml[21,514+39]..[21,514+48])
                            Ptyp_constr "structure" (src/utils.ml[21,514+39]..[21,514+48])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[23,564+2]..[26,659+38])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[23,564+6]..[23,564+9])
                  Ppat_var "map" (src/utils.ml[23,564+6]..[23,564+9])
                expression (src/utils.ml[23,564+10]..[26,659+38]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[23,564+10]..[23,564+11])
                    Ppat_var "t" (src/utils.ml[23,564+10]..[23,564+11])
                  expression (src/utils.ml[23,564+12]..[26,659+38]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/utils.ml[23,564+12]..[23,564+36])
                      Ppat_constraint
                      pattern (src/utils.ml[23,564+13]..[23,564+16])
                        Ppat_var "map" (src/utils.ml[23,564+13]..[23,564+16])
                      core_type (src/utils.ml[23,564+19]..[23,564+35])
                        Ptyp_constr "Ast_traverse.map" (src/utils.ml[23,564+19]..[23,564+35])
                        []
                    expression (src/utils.ml[24,603+4]..[26,659+38])
                      Pexp_match
                      expression (src/utils.ml[24,603+10]..[24,603+11])
                        Pexp_ident "t" (src/utils.ml[24,603+10]..[24,603+11])
                      [
                        <case>
                          pattern (src/utils.ml[25,620+6]..[25,620+12])
                            Ppat_construct "Impl" (src/utils.ml[25,620+6]..[25,620+10])
                            Some
                              pattern (src/utils.ml[25,620+11]..[25,620+12])
                                Ppat_var "x" (src/utils.ml[25,620+11]..[25,620+12])
                          expression (src/utils.ml[25,620+16]..[25,620+38])
                            Pexp_construct "Impl" (src/utils.ml[25,620+16]..[25,620+20])
                            Some
                              expression (src/utils.ml[25,620+21]..[25,620+38])
                                Pexp_apply
                                expression (src/utils.ml[25,620+22]..[25,620+35])
                                  Pexp_send "structure"
                                  expression (src/utils.ml[25,620+22]..[25,620+25])
                                    Pexp_ident "map" (src/utils.ml[25,620+22]..[25,620+25])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/utils.ml[25,620+36]..[25,620+37])
                                      Pexp_ident "x" (src/utils.ml[25,620+36]..[25,620+37])
                                ]
                        <case>
                          pattern (src/utils.ml[26,659+6]..[26,659+12])
                            Ppat_construct "Intf" (src/utils.ml[26,659+6]..[26,659+10])
                            Some
                              pattern (src/utils.ml[26,659+11]..[26,659+12])
                                Ppat_var "x" (src/utils.ml[26,659+11]..[26,659+12])
                          expression (src/utils.ml[26,659+16]..[26,659+38])
                            Pexp_construct "Intf" (src/utils.ml[26,659+16]..[26,659+20])
                            Some
                              expression (src/utils.ml[26,659+21]..[26,659+38])
                                Pexp_apply
                                expression (src/utils.ml[26,659+22]..[26,659+35])
                                  Pexp_send "signature"
                                  expression (src/utils.ml[26,659+22]..[26,659+25])
                                    Pexp_ident "map" (src/utils.ml[26,659+22]..[26,659+25])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/utils.ml[26,659+36]..[26,659+37])
                                      Pexp_ident "x" (src/utils.ml[26,659+36]..[26,659+37])
                                ]
                      ]
            ]
          structure_item (src/utils.ml[28,699+2]..[31,830+42])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[28,699+6]..[28,699+22])
                  Ppat_var "map_with_context" (src/utils.ml[28,699+6]..[28,699+22])
                expression (src/utils.ml[28,699+23]..[31,830+42]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[28,699+23]..[28,699+24])
                    Ppat_var "t" (src/utils.ml[28,699+23]..[28,699+24])
                  expression (src/utils.ml[28,699+25]..[31,830+42]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/utils.ml[28,699+25]..[28,699+64])
                      Ppat_constraint
                      pattern (src/utils.ml[28,699+26]..[28,699+29])
                        Ppat_var "map" (src/utils.ml[28,699+26]..[28,699+29])
                      core_type (src/utils.ml[28,699+32]..[28,699+63])
                        Ptyp_constr "Ast_traverse.map_with_context" (src/utils.ml[28,699+34]..[28,699+63])
                        [
                          core_type (src/utils.ml[28,699+32]..[28,699+33])
                            Ptyp_any
                        ]
                    expression (src/utils.ml[28,699+65]..[31,830+42]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/utils.ml[28,699+65]..[28,699+68])
                        Ppat_var "ctx" (src/utils.ml[28,699+65]..[28,699+68])
                      expression (src/utils.ml[29,770+4]..[31,830+42])
                        Pexp_match
                        expression (src/utils.ml[29,770+10]..[29,770+11])
                          Pexp_ident "t" (src/utils.ml[29,770+10]..[29,770+11])
                        [
                          <case>
                            pattern (src/utils.ml[30,787+6]..[30,787+12])
                              Ppat_construct "Impl" (src/utils.ml[30,787+6]..[30,787+10])
                              Some
                                pattern (src/utils.ml[30,787+11]..[30,787+12])
                                  Ppat_var "x" (src/utils.ml[30,787+11]..[30,787+12])
                            expression (src/utils.ml[30,787+16]..[30,787+42])
                              Pexp_construct "Impl" (src/utils.ml[30,787+16]..[30,787+20])
                              Some
                                expression (src/utils.ml[30,787+21]..[30,787+42])
                                  Pexp_apply
                                  expression (src/utils.ml[30,787+22]..[30,787+35])
                                    Pexp_send "structure"
                                    expression (src/utils.ml[30,787+22]..[30,787+25])
                                      Pexp_ident "map" (src/utils.ml[30,787+22]..[30,787+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/utils.ml[30,787+36]..[30,787+39])
                                        Pexp_ident "ctx" (src/utils.ml[30,787+36]..[30,787+39])
                                    <arg>
                                    Nolabel
                                      expression (src/utils.ml[30,787+40]..[30,787+41])
                                        Pexp_ident "x" (src/utils.ml[30,787+40]..[30,787+41])
                                  ]
                          <case>
                            pattern (src/utils.ml[31,830+6]..[31,830+12])
                              Ppat_construct "Intf" (src/utils.ml[31,830+6]..[31,830+10])
                              Some
                                pattern (src/utils.ml[31,830+11]..[31,830+12])
                                  Ppat_var "x" (src/utils.ml[31,830+11]..[31,830+12])
                            expression (src/utils.ml[31,830+16]..[31,830+42])
                              Pexp_construct "Intf" (src/utils.ml[31,830+16]..[31,830+20])
                              Some
                                expression (src/utils.ml[31,830+21]..[31,830+42])
                                  Pexp_apply
                                  expression (src/utils.ml[31,830+22]..[31,830+35])
                                    Pexp_send "signature"
                                    expression (src/utils.ml[31,830+22]..[31,830+25])
                                      Pexp_ident "map" (src/utils.ml[31,830+22]..[31,830+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/utils.ml[31,830+36]..[31,830+39])
                                        Pexp_ident "ctx" (src/utils.ml[31,830+36]..[31,830+39])
                                    <arg>
                                    Nolabel
                                      expression (src/utils.ml[31,830+40]..[31,830+41])
                                        Pexp_ident "x" (src/utils.ml[31,830+40]..[31,830+41])
                                  ]
                        ]
            ]
          structure_item (src/utils.ml[33,874+2]..[33,874+67])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[33,874+6]..[33,874+24]) ghost
                  Ppat_constraint
                  pattern (src/utils.ml[33,874+6]..[33,874+10])
                    Ppat_var "kind" (src/utils.ml[33,874+6]..[33,874+10])
                  core_type (src/utils.ml[33,874+13]..[33,874+24]) ghost
                    Ptyp_poly
                    core_type (src/utils.ml[33,874+13]..[33,874+24])
                      Ptyp_arrow
                      Nolabel
                      core_type (src/utils.ml[33,874+13]..[33,874+14])
                        Ptyp_any
                      core_type (src/utils.ml[33,874+18]..[33,874+24])
                        Ptyp_constr "Kind.t" (src/utils.ml[33,874+18]..[33,874+24])
                        []
                expression (src/utils.ml[33,874+6]..[33,874+67]) ghost
                  Pexp_constraint
                  expression (src/utils.ml[33,874+27]..[33,874+67])
                    Pexp_function
                    [
                      <case>
                        pattern (src/utils.ml[33,874+36]..[33,874+42])
                          Ppat_construct "Intf" (src/utils.ml[33,874+36]..[33,874+40])
                          Some
                            pattern (src/utils.ml[33,874+41]..[33,874+42])
                              Ppat_any
                        expression (src/utils.ml[33,874+46]..[33,874+50])
                          Pexp_construct "Intf" (src/utils.ml[33,874+46]..[33,874+50])
                          None
                      <case>
                        pattern (src/utils.ml[33,874+53]..[33,874+59])
                          Ppat_construct "Impl" (src/utils.ml[33,874+53]..[33,874+57])
                          Some
                            pattern (src/utils.ml[33,874+58]..[33,874+59])
                              Ppat_any
                        expression (src/utils.ml[33,874+63]..[33,874+67])
                          Pexp_construct "Impl" (src/utils.ml[33,874+63]..[33,874+67])
                          None
                    ]
                  core_type (src/utils.ml[33,874+13]..[33,874+24])
                    Ptyp_arrow
                    Nolabel
                    core_type (src/utils.ml[33,874+13]..[33,874+14])
                      Ptyp_any
                    core_type (src/utils.ml[33,874+18]..[33,874+24])
                      Ptyp_constr "Kind.t" (src/utils.ml[33,874+18]..[33,874+24])
                      []
            ]
        ]
  structure_item (src/utils.ml[36,947+0]..[210,7748+3])
    Pstr_module
    "Ast_io" (src/utils.ml[36,947+7]..[36,947+13])
      module_expr (src/utils.ml[36,947+16]..[210,7748+3])
        Pmod_structure
        [
          structure_item (src/utils.ml[37,970+2]..[37,970+45])
            Pstr_type Rec
            [
              type_declaration "input_version" (src/utils.ml[37,970+7]..[37,970+20]) (src/utils.ml[37,970+2]..[37,970+45])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (src/utils.ml[37,970+23]..[37,970+45])
                      Ptyp_package "OCaml_version" (src/utils.ml[37,970+31]..[37,970+44])
                      []
            ]
          structure_item (src/utils.ml[39,1017+2]..[39,1017+73])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[39,1017+6]..[39,1017+29])
                  Ppat_var "fall_back_input_version" (src/utils.ml[39,1017+6]..[39,1017+29])
                expression (src/utils.ml[39,1017+32]..[39,1017+73])
                  Pexp_constraint
                  expression (src/utils.ml[39,1017+32]..[39,1017+73]) ghost
                    Pexp_pack
                    module_expr (src/utils.ml[39,1017+40]..[39,1017+56])
                      Pmod_ident "Compiler_version" (src/utils.ml[39,1017+40]..[39,1017+56])
                  core_type (src/utils.ml[39,1017+59]..[39,1017+72])
                    Ptyp_package "OCaml_version" (src/utils.ml[39,1017+59]..[39,1017+72])
                    []
            ]
          structure_item (src/utils.ml[43,1213+2]..[47,1312+3])
            Pstr_type Rec
            [
              type_declaration "t" (src/utils.ml[43,1213+7]..[43,1213+8]) (src/utils.ml[43,1213+2]..[47,1312+3])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_record
                    [
                      (src/utils.ml[44,1226+4]..[44,1226+24])
                        Immutable
                        "input_name" (src/utils.ml[44,1226+4]..[44,1226+14])                        core_type (src/utils.ml[44,1226+17]..[44,1226+23])
                          Ptyp_constr "string" (src/utils.ml[44,1226+17]..[44,1226+23])
                          []
                      (src/utils.ml[45,1251+4]..[45,1251+34])
                        Immutable
                        "input_version" (src/utils.ml[45,1251+4]..[45,1251+17])                        core_type (src/utils.ml[45,1251+20]..[45,1251+33])
                          Ptyp_constr "input_version" (src/utils.ml[45,1251+20]..[45,1251+33])
                          []
                      (src/utils.ml[46,1286+4]..[46,1286+25])
                        Immutable
                        "ast" (src/utils.ml[46,1286+4]..[46,1286+7])                        core_type (src/utils.ml[46,1286+10]..[46,1286+24])
                          Ptyp_constr "Intf_or_impl.t" (src/utils.ml[46,1286+10]..[46,1286+24])
                          []
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[49,1317+2]..[53,1469+54])
            Pstr_type Rec
            [
              type_declaration "read_error" (src/utils.ml[49,1317+7]..[49,1317+17]) (src/utils.ml[49,1317+2]..[53,1469+54])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/utils.ml[50,1337+4]..[50,1337+22])
                        "Not_a_binary_ast" (src/utils.ml[50,1337+6]..[50,1337+22])
                        []
                        None
                      (src/utils.ml[51,1360+4]..[51,1360+47])
                        "Unknown_version" (src/utils.ml[51,1360+6]..[51,1360+21])
                        [
                          core_type (src/utils.ml[51,1360+25]..[51,1360+31])
                            Ptyp_constr "string" (src/utils.ml[51,1360+25]..[51,1360+31])
                            []
                          core_type (src/utils.ml[51,1360+34]..[51,1360+47])
                            Ptyp_constr "input_version" (src/utils.ml[51,1360+34]..[51,1360+47])
                            []
                        ]
                        None
                      (src/utils.ml[52,1408+4]..[52,1408+60])
                        "Source_parse_error" (src/utils.ml[52,1408+6]..[52,1408+24])
                        [
                          core_type (src/utils.ml[52,1408+28]..[52,1408+44])
                            Ptyp_constr "Location.Error.t" (src/utils.ml[52,1408+28]..[52,1408+44])
                            []
                          core_type (src/utils.ml[52,1408+47]..[52,1408+60])
                            Ptyp_constr "input_version" (src/utils.ml[52,1408+47]..[52,1408+60])
                            []
                        ]
                        None
                      (src/utils.ml[53,1469+4]..[53,1469+54])
                        "System_error" (src/utils.ml[53,1469+6]..[53,1469+18])
                        [
                          core_type (src/utils.ml[53,1469+22]..[53,1469+38])
                            Ptyp_constr "Location.Error.t" (src/utils.ml[53,1469+22]..[53,1469+38])
                            []
                          core_type (src/utils.ml[53,1469+41]..[53,1469+54])
                            Ptyp_constr "input_version" (src/utils.ml[53,1469+41]..[53,1469+54])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[55,1525+2]..[55,1525+44])
            Pstr_type Rec
            [
              type_declaration "input_source" (src/utils.ml[55,1525+7]..[55,1525+19]) (src/utils.ml[55,1525+2]..[55,1525+44])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/utils.ml[55,1525+22]..[55,1525+27])
                        "Stdin" (src/utils.ml[55,1525+22]..[55,1525+27])
                        []
                        None
                      (src/utils.ml[55,1525+28]..[55,1525+44])
                        "File" (src/utils.ml[55,1525+30]..[55,1525+34])
                        [
                          core_type (src/utils.ml[55,1525+38]..[55,1525+44])
                            Ptyp_constr "string" (src/utils.ml[55,1525+38]..[55,1525+44])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[56,1570+2]..[56,1570+75])
            Pstr_type Rec
            [
              type_declaration "input_kind" (src/utils.ml[56,1570+7]..[56,1570+17]) (src/utils.ml[56,1570+2]..[56,1570+75])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/utils.ml[56,1570+20]..[56,1570+54])
                        "Possibly_source" (src/utils.ml[56,1570+20]..[56,1570+35])
                        [
                          core_type (src/utils.ml[56,1570+39]..[56,1570+45])
                            Ptyp_constr "Kind.t" (src/utils.ml[56,1570+39]..[56,1570+45])
                            []
                          core_type (src/utils.ml[56,1570+48]..[56,1570+54])
                            Ptyp_constr "string" (src/utils.ml[56,1570+48]..[56,1570+54])
                            []
                        ]
                        None
                      (src/utils.ml[56,1570+55]..[56,1570+75])
                        "Necessarily_binary" (src/utils.ml[56,1570+57]..[56,1570+75])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[58,1647+2]..[64,1928+76])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[58,1647+6]..[58,1647+26])
                  Ppat_var "read_error_to_string" (src/utils.ml[58,1647+6]..[58,1647+26])
                expression (src/utils.ml[58,1647+27]..[64,1928+76]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[58,1647+27]..[58,1647+47])
                    Ppat_constraint
                    pattern (src/utils.ml[58,1647+28]..[58,1647+33])
                      Ppat_var "error" (src/utils.ml[58,1647+28]..[58,1647+33])
                    core_type (src/utils.ml[58,1647+36]..[58,1647+46])
                      Ptyp_constr "read_error" (src/utils.ml[58,1647+36]..[58,1647+46])
                      []
                  expression (src/utils.ml[59,1697+4]..[64,1928+76])
                    Pexp_match
                    expression (src/utils.ml[59,1697+10]..[59,1697+15])
                      Pexp_ident "error" (src/utils.ml[59,1697+10]..[59,1697+15])
                    [
                      <case>
                        pattern (src/utils.ml[60,1718+6]..[60,1718+22])
                          Ppat_construct "Not_a_binary_ast" (src/utils.ml[60,1718+6]..[60,1718+22])
                          None
                        expression (src/utils.ml[60,1718+26]..[60,1718+51])
                          Pexp_constant PConst_string("Error: Not a binary ast",(src/utils.ml[60,1718+27]..[60,1718+50]),None)
                      <case>
                        pattern (src/utils.ml[61,1770+6]..[61,1770+28])
                          Ppat_construct "Unknown_version" (src/utils.ml[61,1770+6]..[61,1770+21])
                          Some
                            pattern (src/utils.ml[61,1770+22]..[61,1770+28])
                              Ppat_tuple
                              [
                                pattern (src/utils.ml[61,1770+23]..[61,1770+24])
                                  Ppat_var "s" (src/utils.ml[61,1770+23]..[61,1770+24])
                                pattern (src/utils.ml[61,1770+26]..[61,1770+27])
                                  Ppat_any
                              ]
                        expression (src/utils.ml[61,1770+32]..[61,1770+61])
                          Pexp_apply
                          expression (src/utils.ml[61,1770+58]..[61,1770+59])
                            Pexp_ident "^" (src/utils.ml[61,1770+58]..[61,1770+59])
                          [
                            <arg>
                            Nolabel
                              expression (src/utils.ml[61,1770+32]..[61,1770+57])
                                Pexp_constant PConst_string("Error: Unknown version ",(src/utils.ml[61,1770+33]..[61,1770+56]),None)
                            <arg>
                            Nolabel
                              expression (src/utils.ml[61,1770+60]..[61,1770+61])
                                Pexp_ident "s" (src/utils.ml[61,1770+60]..[61,1770+61])
                          ]
                      <case>
                        pattern (src/utils.ml[62,1832+6]..[62,1832+33])
                          Ppat_construct "Source_parse_error" (src/utils.ml[62,1832+6]..[62,1832+24])
                          Some
                            pattern (src/utils.ml[62,1832+25]..[62,1832+33])
                              Ppat_tuple
                              [
                                pattern (src/utils.ml[62,1832+26]..[62,1832+29])
                                  Ppat_var "loc" (src/utils.ml[62,1832+26]..[62,1832+29])
                                pattern (src/utils.ml[62,1832+31]..[62,1832+32])
                                  Ppat_any
                              ]
                        expression (src/utils.ml[63,1869+8]..[63,1869+58])
                          Pexp_apply
                          expression (src/utils.ml[63,1869+30]..[63,1869+31])
                            Pexp_ident "^" (src/utils.ml[63,1869+30]..[63,1869+31])
                          [
                            <arg>
                            Nolabel
                              expression (src/utils.ml[63,1869+8]..[63,1869+29])
                                Pexp_constant PConst_string("Source parse error:",(src/utils.ml[63,1869+9]..[63,1869+28]),None)
                            <arg>
                            Nolabel
                              expression (src/utils.ml[63,1869+32]..[63,1869+58])
                                Pexp_apply
                                expression (src/utils.ml[63,1869+32]..[63,1869+54])
                                  Pexp_ident "Location.Error.message" (src/utils.ml[63,1869+32]..[63,1869+54])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/utils.ml[63,1869+55]..[63,1869+58])
                                      Pexp_ident "loc" (src/utils.ml[63,1869+55]..[63,1869+58])
                                ]
                          ]
                      <case>
                        pattern (src/utils.ml[64,1928+6]..[64,1928+27])
                          Ppat_construct "System_error" (src/utils.ml[64,1928+6]..[64,1928+18])
                          Some
                            pattern (src/utils.ml[64,1928+19]..[64,1928+27])
                              Ppat_tuple
                              [
                                pattern (src/utils.ml[64,1928+20]..[64,1928+23])
                                  Ppat_var "loc" (src/utils.ml[64,1928+20]..[64,1928+23])
                                pattern (src/utils.ml[64,1928+25]..[64,1928+26])
                                  Ppat_any
                              ]
                        expression (src/utils.ml[64,1928+31]..[64,1928+76])
                          Pexp_apply
                          expression (src/utils.ml[64,1928+48]..[64,1928+49])
                            Pexp_ident "^" (src/utils.ml[64,1928+48]..[64,1928+49])
                          [
                            <arg>
                            Nolabel
                              expression (src/utils.ml[64,1928+31]..[64,1928+47])
                                Pexp_constant PConst_string("System error: ",(src/utils.ml[64,1928+32]..[64,1928+46]),None)
                            <arg>
                            Nolabel
                              expression (src/utils.ml[64,1928+50]..[64,1928+76])
                                Pexp_apply
                                expression (src/utils.ml[64,1928+50]..[64,1928+72])
                                  Pexp_ident "Location.Error.message" (src/utils.ml[64,1928+50]..[64,1928+72])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/utils.ml[64,1928+73]..[64,1928+76])
                                      Pexp_ident "loc" (src/utils.ml[64,1928+73]..[64,1928+76])
                                ]
                          ]
                    ]
            ]
          structure_item (src/utils.ml[66,2006+2]..[98,3457+72])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[66,2006+6]..[66,2006+23])
                  Ppat_var "parse_source_code" (src/utils.ml[66,2006+6]..[66,2006+23])
                expression (src/utils.ml[66,2006+24]..[98,3457+72]) ghost
                  Pexp_fun
                  Labelled "kind"
                  None
                  pattern (src/utils.ml[66,2006+26]..[66,2006+39])
                    Ppat_constraint
                    pattern (src/utils.ml[66,2006+26]..[66,2006+30])
                      Ppat_var "kind" (src/utils.ml[66,2006+26]..[66,2006+30])
                    core_type (src/utils.ml[66,2006+33]..[66,2006+39])
                      Ptyp_constr "Kind.t" (src/utils.ml[66,2006+33]..[66,2006+39])
                      []
                  expression (src/utils.ml[66,2006+41]..[98,3457+72]) ghost
                    Pexp_fun
                    Labelled "input_name"
                    None
                    pattern (src/utils.ml[66,2006+42]..[66,2006+52])
                      Ppat_var "input_name" (src/utils.ml[66,2006+42]..[66,2006+52])
                    expression (src/utils.ml[66,2006+53]..[98,3457+72]) ghost
                      Pexp_fun
                      Labelled "prefix_read_from_source"
                      None
                      pattern (src/utils.ml[66,2006+54]..[66,2006+77])
                        Ppat_var "prefix_read_from_source" (src/utils.ml[66,2006+54]..[66,2006+77])
                      expression (src/utils.ml[66,2006+78]..[98,3457+72]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/utils.ml[66,2006+78]..[66,2006+80])
                          Ppat_var "ic" (src/utils.ml[66,2006+78]..[66,2006+80])
                        expression (src/utils.ml[70,2224+4]..[98,3457+72])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/utils.ml[70,2224+8]..[70,2224+21])
                                Ppat_var "input_version" (src/utils.ml[70,2224+8]..[70,2224+21])
                              expression (src/utils.ml[70,2224+24]..[70,2224+65])
                                Pexp_constraint
                                expression (src/utils.ml[70,2224+24]..[70,2224+65]) ghost
                                  Pexp_pack
                                  module_expr (src/utils.ml[70,2224+32]..[70,2224+48])
                                    Pmod_ident "Compiler_version" (src/utils.ml[70,2224+32]..[70,2224+48])
                                core_type (src/utils.ml[70,2224+51]..[70,2224+64])
                                  Ptyp_package "OCaml_version" (src/utils.ml[70,2224+51]..[70,2224+64])
                                  []
                          ]
                          expression (src/utils.ml[71,2293+4]..[98,3457+72])
                            Pexp_try
                            expression (src/utils.ml[81,2761+6]..[94,3326+43])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/utils.ml[81,2761+10]..[81,2761+16])
                                    Ppat_var "lexbuf" (src/utils.ml[81,2761+10]..[81,2761+16])
                                  expression (src/utils.ml[81,2761+19]..[81,2761+41])
                                    Pexp_apply
                                    expression (src/utils.ml[81,2761+19]..[81,2761+38])
                                      Pexp_ident "Lexing.from_channel" (src/utils.ml[81,2761+19]..[81,2761+38])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/utils.ml[81,2761+39]..[81,2761+41])
                                          Pexp_ident "ic" (src/utils.ml[81,2761+39]..[81,2761+41])
                                    ]
                              ]
                              expression (src/utils.ml[82,2806+6]..[94,3326+43])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/utils.ml[82,2806+10]..[82,2806+13])
                                      Ppat_var "len" (src/utils.ml[82,2806+10]..[82,2806+13])
                                    expression (src/utils.ml[82,2806+16]..[82,2806+53])
                                      Pexp_apply
                                      expression (src/utils.ml[82,2806+16]..[82,2806+29])
                                        Pexp_ident "String.length" (src/utils.ml[82,2806+16]..[82,2806+29])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[82,2806+30]..[82,2806+53])
                                            Pexp_ident "prefix_read_from_source" (src/utils.ml[82,2806+30]..[82,2806+53])
                                      ]
                                ]
                                expression (src/utils.ml[83,2863+6]..[94,3326+43])
                                  Pexp_sequence
                                  expression (src/utils.ml[83,2863+6]..[84,2927+46])
                                    Pexp_apply
                                    expression (src/utils.ml[83,2863+6]..[83,2863+23])
                                      Pexp_ident "Bytes.blit_string" (src/utils.ml[83,2863+6]..[83,2863+23])
                                    [
                                      <arg>
                                      Labelled "src"
                                        expression (src/utils.ml[83,2863+29]..[83,2863+52])
                                          Pexp_ident "prefix_read_from_source" (src/utils.ml[83,2863+29]..[83,2863+52])
                                      <arg>
                                      Labelled "src_pos"
                                        expression (src/utils.ml[83,2863+62]..[83,2863+63])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Labelled "dst"
                                        expression (src/utils.ml[84,2927+13]..[84,2927+30])
                                          Pexp_field
                                          expression (src/utils.ml[84,2927+13]..[84,2927+19])
                                            Pexp_ident "lexbuf" (src/utils.ml[84,2927+13]..[84,2927+19])
                                          "lex_buffer" (src/utils.ml[84,2927+20]..[84,2927+30])
                                      <arg>
                                      Labelled "dst_pos"
                                        expression (src/utils.ml[84,2927+40]..[84,2927+41])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Labelled "len"
                                        expression (src/utils.ml[84,2927+43]..[84,2927+46])
                                          Pexp_ident "len" (src/utils.ml[84,2927+43]..[84,2927+46])
                                    ]
                                  expression (src/utils.ml[85,2975+6]..[94,3326+43])
                                    Pexp_sequence
                                    expression (src/utils.ml[85,2975+6]..[85,2975+34])
                                      Pexp_setfield
                                      expression (src/utils.ml[85,2975+6]..[85,2975+12])
                                        Pexp_ident "lexbuf" (src/utils.ml[85,2975+6]..[85,2975+12])
                                      "lex_buffer_len" (src/utils.ml[85,2975+13]..[85,2975+27])
                                      expression (src/utils.ml[85,2975+31]..[85,2975+34])
                                        Pexp_ident "len" (src/utils.ml[85,2975+31]..[85,2975+34])
                                    expression (src/utils.ml[86,3011+6]..[94,3326+43])
                                      Pexp_sequence
                                      expression (src/utils.ml[86,3011+6]..[87,3038+75])
                                        Pexp_setfield
                                        expression (src/utils.ml[86,3011+6]..[86,3011+12])
                                          Pexp_ident "lexbuf" (src/utils.ml[86,3011+6]..[86,3011+12])
                                        "lex_curr_p" (src/utils.ml[86,3011+13]..[86,3011+23])
                                        expression (src/utils.ml[87,3038+8]..[87,3038+75])
                                          Pexp_record
                                          [
                                            "pos_fname" (src/utils.ml[87,3038+10]..[87,3038+19])
                                              expression (src/utils.ml[87,3038+22]..[87,3038+32])
                                                Pexp_ident "input_name" (src/utils.ml[87,3038+22]..[87,3038+32])
                                            "pos_lnum" (src/utils.ml[87,3038+34]..[87,3038+42])
                                              expression (src/utils.ml[87,3038+45]..[87,3038+46])
                                                Pexp_constant PConst_int (1,None)
                                            "pos_bol" (src/utils.ml[87,3038+48]..[87,3038+55])
                                              expression (src/utils.ml[87,3038+58]..[87,3038+59])
                                                Pexp_constant PConst_int (0,None)
                                            "pos_cnum" (src/utils.ml[87,3038+61]..[87,3038+69])
                                              expression (src/utils.ml[87,3038+72]..[87,3038+73])
                                                Pexp_constant PConst_int (0,None)
                                          ]
                                          None
                                      expression (src/utils.ml[88,3115+6]..[94,3326+43])
                                        Pexp_sequence
                                        expression (src/utils.ml[88,3115+6]..[88,3115+42])
                                          Pexp_apply
                                          expression (src/utils.ml[88,3115+6]..[88,3115+35])
                                            Pexp_ident "Skip_hash_bang.skip_hash_bang" (src/utils.ml[88,3115+6]..[88,3115+35])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/utils.ml[88,3115+36]..[88,3115+42])
                                                Pexp_ident "lexbuf" (src/utils.ml[88,3115+36]..[88,3115+42])
                                          ]
                                        expression (src/utils.ml[89,3159+6]..[94,3326+43])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/utils.ml[89,3159+10]..[89,3159+30]) ghost
                                                Ppat_constraint
                                                pattern (src/utils.ml[89,3159+10]..[89,3159+13])
                                                  Ppat_var "ast" (src/utils.ml[89,3159+10]..[89,3159+13])
                                                core_type (src/utils.ml[89,3159+16]..[89,3159+30]) ghost
                                                  Ptyp_poly
                                                  core_type (src/utils.ml[89,3159+16]..[89,3159+30])
                                                    Ptyp_constr "Intf_or_impl.t" (src/utils.ml[89,3159+16]..[89,3159+30])
                                                    []
                                              expression (src/utils.ml[89,3159+10]..[92,3264+52]) ghost
                                                Pexp_constraint
                                                expression (src/utils.ml[90,3192+8]..[92,3264+52])
                                                  Pexp_match
                                                  expression (src/utils.ml[90,3192+14]..[90,3192+18])
                                                    Pexp_ident "kind" (src/utils.ml[90,3192+14]..[90,3192+18])
                                                  [
                                                    <case>
                                                      pattern (src/utils.ml[91,3216+10]..[91,3216+14])
                                                        Ppat_construct "Intf" (src/utils.ml[91,3216+10]..[91,3216+14])
                                                        None
                                                      expression (src/utils.ml[91,3216+18]..[91,3216+47])
                                                        Pexp_construct "Intf" (src/utils.ml[91,3216+18]..[91,3216+22])
                                                        Some
                                                          expression (src/utils.ml[91,3216+23]..[91,3216+47])
                                                            Pexp_apply
                                                            expression (src/utils.ml[91,3216+24]..[91,3216+39])
                                                              Pexp_ident "Parse.interface" (src/utils.ml[91,3216+24]..[91,3216+39])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/utils.ml[91,3216+40]..[91,3216+46])
                                                                  Pexp_ident "lexbuf" (src/utils.ml[91,3216+40]..[91,3216+46])
                                                            ]
                                                    <case>
                                                      pattern (src/utils.ml[92,3264+10]..[92,3264+14])
                                                        Ppat_construct "Impl" (src/utils.ml[92,3264+10]..[92,3264+14])
                                                        None
                                                      expression (src/utils.ml[92,3264+18]..[92,3264+52])
                                                        Pexp_construct "Impl" (src/utils.ml[92,3264+18]..[92,3264+22])
                                                        Some
                                                          expression (src/utils.ml[92,3264+23]..[92,3264+52])
                                                            Pexp_apply
                                                            expression (src/utils.ml[92,3264+24]..[92,3264+44])
                                                              Pexp_ident "Parse.implementation" (src/utils.ml[92,3264+24]..[92,3264+44])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/utils.ml[92,3264+45]..[92,3264+51])
                                                                  Pexp_ident "lexbuf" (src/utils.ml[92,3264+45]..[92,3264+51])
                                                            ]
                                                  ]
                                                core_type (src/utils.ml[89,3159+16]..[89,3159+30])
                                                  Ptyp_constr "Intf_or_impl.t" (src/utils.ml[89,3159+16]..[89,3159+30])
                                                  []
                                          ]
                                          expression (src/utils.ml[94,3326+6]..[94,3326+43])
                                            Pexp_construct "Ok" (src/utils.ml[94,3326+6]..[94,3326+8])
                                            Some
                                              expression (src/utils.ml[94,3326+9]..[94,3326+43])
                                                Pexp_record
                                                [
                                                  "input_name" (src/utils.ml[94,3326+11]..[94,3326+21])
                                                    expression (src/utils.ml[94,3326+11]..[94,3326+21]) ghost
                                                      Pexp_ident "input_name" (src/utils.ml[94,3326+11]..[94,3326+21]) ghost
                                                  "input_version" (src/utils.ml[94,3326+23]..[94,3326+36])
                                                    expression (src/utils.ml[94,3326+23]..[94,3326+36]) ghost
                                                      Pexp_ident "input_version" (src/utils.ml[94,3326+23]..[94,3326+36]) ghost
                                                  "ast" (src/utils.ml[94,3326+38]..[94,3326+41])
                                                    expression (src/utils.ml[94,3326+38]..[94,3326+41]) ghost
                                                      Pexp_ident "ast" (src/utils.ml[94,3326+38]..[94,3326+41]) ghost
                                                ]
                                                None
                            [
                              <case>
                                pattern (src/utils.ml[95,3370+9]..[95,3370+12])
                                  Ppat_var "exn" (src/utils.ml[95,3370+9]..[95,3370+12])
                                expression (src/utils.ml[95,3370+16]..[98,3457+72])
                                  Pexp_match
                                  expression (src/utils.ml[96,3388+12]..[96,3388+37])
                                    Pexp_apply
                                    expression (src/utils.ml[96,3388+12]..[96,3388+33])
                                      Pexp_ident "Location.Error.of_exn" (src/utils.ml[96,3388+12]..[96,3388+33])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/utils.ml[96,3388+34]..[96,3388+37])
                                          Pexp_ident "exn" (src/utils.ml[96,3388+34]..[96,3388+37])
                                    ]
                                  [
                                    <case>
                                      pattern (src/utils.ml[97,3431+8]..[97,3431+12])
                                        Ppat_construct "None" (src/utils.ml[97,3431+8]..[97,3431+12])
                                        None
                                      expression (src/utils.ml[97,3431+16]..[97,3431+25])
                                        Pexp_apply
                                        expression (src/utils.ml[97,3431+16]..[97,3431+21])
                                          Pexp_ident "raise" (src/utils.ml[97,3431+16]..[97,3431+21])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[97,3431+22]..[97,3431+25])
                                              Pexp_ident "exn" (src/utils.ml[97,3431+22]..[97,3431+25])
                                        ]
                                    <case>
                                      pattern (src/utils.ml[98,3457+8]..[98,3457+18])
                                        Ppat_construct "Some" (src/utils.ml[98,3457+8]..[98,3457+12])
                                        Some
                                          pattern (src/utils.ml[98,3457+13]..[98,3457+18])
                                            Ppat_var "error" (src/utils.ml[98,3457+13]..[98,3457+18])
                                      expression (src/utils.ml[98,3457+22]..[98,3457+71])
                                        Pexp_construct "Error" (src/utils.ml[98,3457+22]..[98,3457+27])
                                        Some
                                          expression (src/utils.ml[98,3457+28]..[98,3457+71])
                                            Pexp_construct "Source_parse_error" (src/utils.ml[98,3457+29]..[98,3457+47])
                                            Some
                                              expression (src/utils.ml[98,3457+48]..[98,3457+70])
                                                Pexp_tuple
                                                [
                                                  expression (src/utils.ml[98,3457+49]..[98,3457+54])
                                                    Pexp_ident "error" (src/utils.ml[98,3457+49]..[98,3457+54])
                                                  expression (src/utils.ml[98,3457+56]..[98,3457+69])
                                                    Pexp_ident "input_version" (src/utils.ml[98,3457+56]..[98,3457+69])
                                                ]
                                  ]
                            ]
            ]
          structure_item (src/utils.ml[100,3531+2]..[100,3531+70])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[100,3531+6]..[100,3531+18])
                  Ppat_var "magic_length" (src/utils.ml[100,3531+6]..[100,3531+18])
                expression (src/utils.ml[100,3531+21]..[100,3531+70])
                  Pexp_apply
                  expression (src/utils.ml[100,3531+21]..[100,3531+34])
                    Pexp_ident "String.length" (src/utils.ml[100,3531+21]..[100,3531+34])
                  [
                    <arg>
                    Nolabel
                      expression (src/utils.ml[100,3531+35]..[100,3531+70])
                        Pexp_ident "Astlib.Config.ast_impl_magic_number" (src/utils.ml[100,3531+35]..[100,3531+70])
                  ]
            ]
          structure_item (src/utils.ml[102,3603+2]..[106,3761+48])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[102,3603+6]..[102,3603+16])
                  Ppat_var "read_magic" (src/utils.ml[102,3603+6]..[102,3603+16])
                expression (src/utils.ml[102,3603+17]..[106,3761+48]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[102,3603+17]..[102,3603+19])
                    Ppat_var "ic" (src/utils.ml[102,3603+17]..[102,3603+19])
                  expression (src/utils.ml[103,3625+4]..[106,3761+48])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/utils.ml[103,3625+8]..[103,3625+11])
                          Ppat_var "buf" (src/utils.ml[103,3625+8]..[103,3625+11])
                        expression (src/utils.ml[103,3625+14]..[103,3625+39])
                          Pexp_apply
                          expression (src/utils.ml[103,3625+14]..[103,3625+26])
                            Pexp_ident "Bytes.create" (src/utils.ml[103,3625+14]..[103,3625+26])
                          [
                            <arg>
                            Nolabel
                              expression (src/utils.ml[103,3625+27]..[103,3625+39])
                                Pexp_ident "magic_length" (src/utils.ml[103,3625+27]..[103,3625+39])
                          ]
                    ]
                    expression (src/utils.ml[104,3668+4]..[106,3761+48])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/utils.ml[104,3668+8]..[104,3668+11])
                            Ppat_var "len" (src/utils.ml[104,3668+8]..[104,3668+11])
                          expression (src/utils.ml[104,3668+14]..[104,3668+41])
                            Pexp_apply
                            expression (src/utils.ml[104,3668+14]..[104,3668+19])
                              Pexp_ident "input" (src/utils.ml[104,3668+14]..[104,3668+19])
                            [
                              <arg>
                              Nolabel
                                expression (src/utils.ml[104,3668+20]..[104,3668+22])
                                  Pexp_ident "ic" (src/utils.ml[104,3668+20]..[104,3668+22])
                              <arg>
                              Nolabel
                                expression (src/utils.ml[104,3668+23]..[104,3668+26])
                                  Pexp_ident "buf" (src/utils.ml[104,3668+23]..[104,3668+26])
                              <arg>
                              Nolabel
                                expression (src/utils.ml[104,3668+27]..[104,3668+28])
                                  Pexp_constant PConst_int (0,None)
                              <arg>
                              Nolabel
                                expression (src/utils.ml[104,3668+29]..[104,3668+41])
                                  Pexp_ident "magic_length" (src/utils.ml[104,3668+29]..[104,3668+41])
                            ]
                      ]
                      expression (src/utils.ml[105,3713+4]..[106,3761+48])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/utils.ml[105,3713+8]..[105,3713+9])
                              Ppat_var "s" (src/utils.ml[105,3713+8]..[105,3713+9])
                            expression (src/utils.ml[105,3713+12]..[105,3713+44])
                              Pexp_apply
                              expression (src/utils.ml[105,3713+12]..[105,3713+28])
                                Pexp_ident "Bytes.sub_string" (src/utils.ml[105,3713+12]..[105,3713+28])
                              [
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[105,3713+29]..[105,3713+32])
                                    Pexp_ident "buf" (src/utils.ml[105,3713+29]..[105,3713+32])
                                <arg>
                                Labelled "pos"
                                  expression (src/utils.ml[105,3713+38]..[105,3713+39])
                                    Pexp_constant PConst_int (0,None)
                                <arg>
                                Labelled "len"
                                  expression (src/utils.ml[105,3713+41]..[105,3713+44])
                                    Pexp_ident "len" (src/utils.ml[105,3713+41]..[105,3713+44])
                              ]
                        ]
                        expression (src/utils.ml[106,3761+4]..[106,3761+48])
                          Pexp_ifthenelse
                          expression (src/utils.ml[106,3761+7]..[106,3761+25])
                            Pexp_apply
                            expression (src/utils.ml[106,3761+11]..[106,3761+12])
                              Pexp_ident "=" (src/utils.ml[106,3761+11]..[106,3761+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/utils.ml[106,3761+7]..[106,3761+10])
                                  Pexp_ident "len" (src/utils.ml[106,3761+7]..[106,3761+10])
                              <arg>
                              Nolabel
                                expression (src/utils.ml[106,3761+13]..[106,3761+25])
                                  Pexp_ident "magic_length" (src/utils.ml[106,3761+13]..[106,3761+25])
                            ]
                          expression (src/utils.ml[106,3761+31]..[106,3761+35])
                            Pexp_construct "Ok" (src/utils.ml[106,3761+31]..[106,3761+33])
                            Some
                              expression (src/utils.ml[106,3761+34]..[106,3761+35])
                                Pexp_ident "s" (src/utils.ml[106,3761+34]..[106,3761+35])
                          Some
                            expression (src/utils.ml[106,3761+41]..[106,3761+48])
                              Pexp_construct "Error" (src/utils.ml[106,3761+41]..[106,3761+46])
                              Some
                                expression (src/utils.ml[106,3761+47]..[106,3761+48])
                                  Pexp_ident "s" (src/utils.ml[106,3761+47]..[106,3761+48])
            ]
          structure_item (src/utils.ml[108,3811+2]..[150,5599+37])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[108,3811+6]..[108,3811+18])
                  Ppat_var "from_channel" (src/utils.ml[108,3811+6]..[108,3811+18])
                expression (src/utils.ml[108,3811+19]..[150,5599+37]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[108,3811+19]..[108,3811+21])
                    Ppat_var "ch" (src/utils.ml[108,3811+19]..[108,3811+21])
                  expression (src/utils.ml[108,3811+22]..[150,5599+37]) ghost
                    Pexp_fun
                    Labelled "input_kind"
                    None
                    pattern (src/utils.ml[108,3811+23]..[108,3811+33])
                      Ppat_var "input_kind" (src/utils.ml[108,3811+23]..[108,3811+33])
                    expression (src/utils.ml[109,3847+4]..[150,5599+37])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/utils.ml[109,3847+8]..[109,3847+25])
                            Ppat_var "handle_non_binary" (src/utils.ml[109,3847+8]..[109,3847+25])
                          expression (src/utils.ml[109,3847+26]..[113,4047+52]) ghost
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/utils.ml[109,3847+26]..[109,3847+49])
                              Ppat_var "prefix_read_from_source" (src/utils.ml[109,3847+26]..[109,3847+49])
                            expression (src/utils.ml[110,3899+6]..[113,4047+52])
                              Pexp_match
                              expression (src/utils.ml[110,3899+12]..[110,3899+22])
                                Pexp_ident "input_kind" (src/utils.ml[110,3899+12]..[110,3899+22])
                              [
                                <case>
                                  pattern (src/utils.ml[111,3927+8]..[111,3927+42])
                                    Ppat_construct "Possibly_source" (src/utils.ml[111,3927+8]..[111,3927+23])
                                    Some
                                      pattern (src/utils.ml[111,3927+24]..[111,3927+42])
                                        Ppat_tuple
                                        [
                                          pattern (src/utils.ml[111,3927+25]..[111,3927+29])
                                            Ppat_var "kind" (src/utils.ml[111,3927+25]..[111,3927+29])
                                          pattern (src/utils.ml[111,3927+31]..[111,3927+41])
                                            Ppat_var "input_name" (src/utils.ml[111,3927+31]..[111,3927+41])
                                        ]
                                  expression (src/utils.ml[112,3973+10]..[112,3973+73])
                                    Pexp_apply
                                    expression (src/utils.ml[112,3973+10]..[112,3973+27])
                                      Pexp_ident "parse_source_code" (src/utils.ml[112,3973+10]..[112,3973+27])
                                    [
                                      <arg>
                                      Labelled "kind"
                                        expression (src/utils.ml[112,3973+29]..[112,3973+33])
                                          Pexp_ident "kind" (src/utils.ml[112,3973+29]..[112,3973+33])
                                      <arg>
                                      Labelled "input_name"
                                        expression (src/utils.ml[112,3973+35]..[112,3973+45])
                                          Pexp_ident "input_name" (src/utils.ml[112,3973+35]..[112,3973+45])
                                      <arg>
                                      Labelled "prefix_read_from_source"
                                        expression (src/utils.ml[112,3973+47]..[112,3973+70])
                                          Pexp_ident "prefix_read_from_source" (src/utils.ml[112,3973+47]..[112,3973+70])
                                      <arg>
                                      Nolabel
                                        expression (src/utils.ml[112,3973+71]..[112,3973+73])
                                          Pexp_ident "ch" (src/utils.ml[112,3973+71]..[112,3973+73])
                                    ]
                                <case>
                                  pattern (src/utils.ml[113,4047+8]..[113,4047+26])
                                    Ppat_construct "Necessarily_binary" (src/utils.ml[113,4047+8]..[113,4047+26])
                                    None
                                  expression (src/utils.ml[113,4047+30]..[113,4047+52])
                                    Pexp_construct "Error" (src/utils.ml[113,4047+30]..[113,4047+35])
                                    Some
                                      expression (src/utils.ml[113,4047+36]..[113,4047+52])
                                        Pexp_construct "Not_a_binary_ast" (src/utils.ml[113,4047+36]..[113,4047+52])
                                        None
                              ]
                      ]
                      expression (src/utils.ml[115,4107+4]..[150,5599+37])
                        Pexp_match
                        expression (src/utils.ml[115,4107+10]..[115,4107+23])
                          Pexp_apply
                          expression (src/utils.ml[115,4107+10]..[115,4107+20])
                            Pexp_ident "read_magic" (src/utils.ml[115,4107+10]..[115,4107+20])
                          [
                            <arg>
                            Nolabel
                              expression (src/utils.ml[115,4107+21]..[115,4107+23])
                                Pexp_ident "ch" (src/utils.ml[115,4107+21]..[115,4107+23])
                          ]
                        [
                          <case>
                            pattern (src/utils.ml[116,4136+6]..[116,4136+13])
                              Ppat_construct "Error" (src/utils.ml[116,4136+6]..[116,4136+11])
                              Some
                                pattern (src/utils.ml[116,4136+12]..[116,4136+13])
                                  Ppat_var "s" (src/utils.ml[116,4136+12]..[116,4136+13])
                            expression (src/utils.ml[116,4136+17]..[116,4136+36])
                              Pexp_apply
                              expression (src/utils.ml[116,4136+17]..[116,4136+34])
                                Pexp_ident "handle_non_binary" (src/utils.ml[116,4136+17]..[116,4136+34])
                              [
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[116,4136+35]..[116,4136+36])
                                    Pexp_ident "s" (src/utils.ml[116,4136+35]..[116,4136+36])
                              ]
                          <case>
                            pattern (src/utils.ml[117,4173+6]..[117,4173+10])
                              Ppat_construct "Ok" (src/utils.ml[117,4173+6]..[117,4173+8])
                              Some
                                pattern (src/utils.ml[117,4173+9]..[117,4173+10])
                                  Ppat_var "s" (src/utils.ml[117,4173+9]..[117,4173+10])
                            expression (src/utils.ml[117,4173+14]..[150,5599+37])
                              Pexp_match
                              expression (src/utils.ml[118,4189+14]..[118,4189+39])
                                Pexp_apply
                                expression (src/utils.ml[118,4189+14]..[118,4189+37])
                                  Pexp_ident "Find_version.from_magic" (src/utils.ml[118,4189+14]..[118,4189+37])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/utils.ml[118,4189+38]..[118,4189+39])
                                      Pexp_ident "s" (src/utils.ml[118,4189+38]..[118,4189+39])
                                ]
                              [
                                <case>
                                  pattern (src/utils.ml[119,4234+10]..[119,4234+53])
                                    Ppat_construct "Intf" (src/utils.ml[119,4234+10]..[119,4234+14])
                                    Some
                                      pattern (src/utils.ml[119,4234+15]..[119,4234+53])
                                        Ppat_constraint
                                        pattern (src/utils.ml[119,4234+23]..[119,4234+36])
                                          Ppat_unpack "Input_version" (src/utils.ml[119,4234+23]..[119,4234+36])
                                        core_type (src/utils.ml[119,4234+39]..[119,4234+52])
                                          Ptyp_package "OCaml_version" (src/utils.ml[119,4234+39]..[119,4234+52])
                                          []
                                  expression (src/utils.ml[120,4291+12]..[129,4692+15])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/utils.ml[120,4291+16]..[120,4291+35]) ghost
                                          Ppat_constraint
                                          pattern (src/utils.ml[120,4291+16]..[120,4291+26])
                                            Ppat_var "input_name" (src/utils.ml[120,4291+16]..[120,4291+26])
                                          core_type (src/utils.ml[120,4291+29]..[120,4291+35]) ghost
                                            Ptyp_poly
                                            core_type (src/utils.ml[120,4291+29]..[120,4291+35])
                                              Ptyp_constr "string" (src/utils.ml[120,4291+29]..[120,4291+35])
                                              []
                                        expression (src/utils.ml[120,4291+16]..[120,4291+52]) ghost
                                          Pexp_constraint
                                          expression (src/utils.ml[120,4291+38]..[120,4291+52])
                                            Pexp_apply
                                            expression (src/utils.ml[120,4291+38]..[120,4291+49])
                                              Pexp_ident "input_value" (src/utils.ml[120,4291+38]..[120,4291+49])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[120,4291+50]..[120,4291+52])
                                                  Pexp_ident "ch" (src/utils.ml[120,4291+50]..[120,4291+52])
                                            ]
                                          core_type (src/utils.ml[120,4291+29]..[120,4291+35])
                                            Ptyp_constr "string" (src/utils.ml[120,4291+29]..[120,4291+35])
                                            []
                                    ]
                                    expression (src/utils.ml[121,4347+12]..[129,4692+15])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/utils.ml[121,4347+16]..[121,4347+19])
                                            Ppat_var "ast" (src/utils.ml[121,4347+16]..[121,4347+19])
                                          expression (src/utils.ml[121,4347+22]..[121,4347+36])
                                            Pexp_apply
                                            expression (src/utils.ml[121,4347+22]..[121,4347+33])
                                              Pexp_ident "input_value" (src/utils.ml[121,4347+22]..[121,4347+33])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[121,4347+34]..[121,4347+36])
                                                  Pexp_ident "ch" (src/utils.ml[121,4347+34]..[121,4347+36])
                                            ]
                                      ]
                                      expression (src/utils.ml[122,4387+12]..[129,4692+15])
                                        Pexp_letmodule "Input_to_ppxlib" (src/utils.ml[122,4387+23]..[122,4387+38])
                                        module_expr (src/utils.ml[122,4387+41]..[122,4387+69])
                                          Pmod_apply
                                          module_expr (src/utils.ml[122,4387+41]..[122,4387+64])
                                            Pmod_apply
                                            module_expr (src/utils.ml[122,4387+41]..[122,4387+48])
                                              Pmod_ident "Convert" (src/utils.ml[122,4387+41]..[122,4387+48])
                                            module_expr (src/utils.ml[122,4387+50]..[122,4387+63])
                                              Pmod_ident "Input_version" (src/utils.ml[122,4387+50]..[122,4387+63])
                                          module_expr (src/utils.ml[122,4387+66]..[122,4387+68])
                                            Pmod_ident "Js" (src/utils.ml[122,4387+66]..[122,4387+68])
                                        expression (src/utils.ml[123,4460+12]..[129,4692+15])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/utils.ml[123,4460+16]..[123,4460+19])
                                                Ppat_var "ast" (src/utils.ml[123,4460+16]..[123,4460+19])
                                              expression (src/utils.ml[123,4460+22]..[123,4460+76])
                                                Pexp_construct "Intf_or_impl.Intf" (src/utils.ml[123,4460+22]..[123,4460+39])
                                                Some
                                                  expression (src/utils.ml[123,4460+40]..[123,4460+76])
                                                    Pexp_apply
                                                    expression (src/utils.ml[123,4460+41]..[123,4460+71])
                                                      Pexp_ident "Input_to_ppxlib.copy_signature" (src/utils.ml[123,4460+41]..[123,4460+71])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/utils.ml[123,4460+72]..[123,4460+75])
                                                          Pexp_ident "ast" (src/utils.ml[123,4460+72]..[123,4460+75])
                                                    ]
                                          ]
                                          expression (src/utils.ml[124,4540+12]..[129,4692+15])
                                            Pexp_construct "Ok" (src/utils.ml[124,4540+12]..[124,4540+14])
                                            Some
                                              expression (src/utils.ml[125,4555+14]..[129,4692+15])
                                                Pexp_record
                                                [
                                                  "input_name" (src/utils.ml[126,4571+16]..[126,4571+26])
                                                    expression (src/utils.ml[126,4571+16]..[126,4571+26]) ghost
                                                      Pexp_ident "input_name" (src/utils.ml[126,4571+16]..[126,4571+26]) ghost
                                                  "input_version" (src/utils.ml[127,4599+16]..[127,4599+29])
                                                    expression (src/utils.ml[127,4599+32]..[127,4599+70])
                                                      Pexp_constraint
                                                      expression (src/utils.ml[127,4599+32]..[127,4599+70]) ghost
                                                        Pexp_pack
                                                        module_expr (src/utils.ml[127,4599+40]..[127,4599+53])
                                                          Pmod_ident "Input_version" (src/utils.ml[127,4599+40]..[127,4599+53])
                                                      core_type (src/utils.ml[127,4599+56]..[127,4599+69])
                                                        Ptyp_package "OCaml_version" (src/utils.ml[127,4599+56]..[127,4599+69])
                                                        []
                                                  "ast" (src/utils.ml[128,4671+16]..[128,4671+19])
                                                    expression (src/utils.ml[128,4671+16]..[128,4671+19]) ghost
                                                      Pexp_ident "ast" (src/utils.ml[128,4671+16]..[128,4671+19]) ghost
                                                ]
                                                None
                                <case>
                                  pattern (src/utils.ml[130,4708+10]..[130,4708+53])
                                    Ppat_construct "Impl" (src/utils.ml[130,4708+10]..[130,4708+14])
                                    Some
                                      pattern (src/utils.ml[130,4708+15]..[130,4708+53])
                                        Ppat_constraint
                                        pattern (src/utils.ml[130,4708+23]..[130,4708+36])
                                          Ppat_unpack "Input_version" (src/utils.ml[130,4708+23]..[130,4708+36])
                                        core_type (src/utils.ml[130,4708+39]..[130,4708+52])
                                          Ptyp_package "OCaml_version" (src/utils.ml[130,4708+39]..[130,4708+52])
                                          []
                                  expression (src/utils.ml[131,4765+12]..[140,5166+15])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/utils.ml[131,4765+16]..[131,4765+35]) ghost
                                          Ppat_constraint
                                          pattern (src/utils.ml[131,4765+16]..[131,4765+26])
                                            Ppat_var "input_name" (src/utils.ml[131,4765+16]..[131,4765+26])
                                          core_type (src/utils.ml[131,4765+29]..[131,4765+35]) ghost
                                            Ptyp_poly
                                            core_type (src/utils.ml[131,4765+29]..[131,4765+35])
                                              Ptyp_constr "string" (src/utils.ml[131,4765+29]..[131,4765+35])
                                              []
                                        expression (src/utils.ml[131,4765+16]..[131,4765+52]) ghost
                                          Pexp_constraint
                                          expression (src/utils.ml[131,4765+38]..[131,4765+52])
                                            Pexp_apply
                                            expression (src/utils.ml[131,4765+38]..[131,4765+49])
                                              Pexp_ident "input_value" (src/utils.ml[131,4765+38]..[131,4765+49])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[131,4765+50]..[131,4765+52])
                                                  Pexp_ident "ch" (src/utils.ml[131,4765+50]..[131,4765+52])
                                            ]
                                          core_type (src/utils.ml[131,4765+29]..[131,4765+35])
                                            Ptyp_constr "string" (src/utils.ml[131,4765+29]..[131,4765+35])
                                            []
                                    ]
                                    expression (src/utils.ml[132,4821+12]..[140,5166+15])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/utils.ml[132,4821+16]..[132,4821+19])
                                            Ppat_var "ast" (src/utils.ml[132,4821+16]..[132,4821+19])
                                          expression (src/utils.ml[132,4821+22]..[132,4821+36])
                                            Pexp_apply
                                            expression (src/utils.ml[132,4821+22]..[132,4821+33])
                                              Pexp_ident "input_value" (src/utils.ml[132,4821+22]..[132,4821+33])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[132,4821+34]..[132,4821+36])
                                                  Pexp_ident "ch" (src/utils.ml[132,4821+34]..[132,4821+36])
                                            ]
                                      ]
                                      expression (src/utils.ml[133,4861+12]..[140,5166+15])
                                        Pexp_letmodule "Input_to_ppxlib" (src/utils.ml[133,4861+23]..[133,4861+38])
                                        module_expr (src/utils.ml[133,4861+41]..[133,4861+69])
                                          Pmod_apply
                                          module_expr (src/utils.ml[133,4861+41]..[133,4861+64])
                                            Pmod_apply
                                            module_expr (src/utils.ml[133,4861+41]..[133,4861+48])
                                              Pmod_ident "Convert" (src/utils.ml[133,4861+41]..[133,4861+48])
                                            module_expr (src/utils.ml[133,4861+50]..[133,4861+63])
                                              Pmod_ident "Input_version" (src/utils.ml[133,4861+50]..[133,4861+63])
                                          module_expr (src/utils.ml[133,4861+66]..[133,4861+68])
                                            Pmod_ident "Js" (src/utils.ml[133,4861+66]..[133,4861+68])
                                        expression (src/utils.ml[134,4934+12]..[140,5166+15])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/utils.ml[134,4934+16]..[134,4934+19])
                                                Ppat_var "ast" (src/utils.ml[134,4934+16]..[134,4934+19])
                                              expression (src/utils.ml[134,4934+22]..[134,4934+76])
                                                Pexp_construct "Intf_or_impl.Impl" (src/utils.ml[134,4934+22]..[134,4934+39])
                                                Some
                                                  expression (src/utils.ml[134,4934+40]..[134,4934+76])
                                                    Pexp_apply
                                                    expression (src/utils.ml[134,4934+41]..[134,4934+71])
                                                      Pexp_ident "Input_to_ppxlib.copy_structure" (src/utils.ml[134,4934+41]..[134,4934+71])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/utils.ml[134,4934+72]..[134,4934+75])
                                                          Pexp_ident "ast" (src/utils.ml[134,4934+72]..[134,4934+75])
                                                    ]
                                          ]
                                          expression (src/utils.ml[135,5014+12]..[140,5166+15])
                                            Pexp_construct "Ok" (src/utils.ml[135,5014+12]..[135,5014+14])
                                            Some
                                              expression (src/utils.ml[136,5029+14]..[140,5166+15])
                                                Pexp_record
                                                [
                                                  "input_name" (src/utils.ml[137,5045+16]..[137,5045+26])
                                                    expression (src/utils.ml[137,5045+16]..[137,5045+26]) ghost
                                                      Pexp_ident "input_name" (src/utils.ml[137,5045+16]..[137,5045+26]) ghost
                                                  "input_version" (src/utils.ml[138,5073+16]..[138,5073+29])
                                                    expression (src/utils.ml[138,5073+32]..[138,5073+70])
                                                      Pexp_constraint
                                                      expression (src/utils.ml[138,5073+32]..[138,5073+70]) ghost
                                                        Pexp_pack
                                                        module_expr (src/utils.ml[138,5073+40]..[138,5073+53])
                                                          Pmod_ident "Input_version" (src/utils.ml[138,5073+40]..[138,5073+53])
                                                      core_type (src/utils.ml[138,5073+56]..[138,5073+69])
                                                        Ptyp_package "OCaml_version" (src/utils.ml[138,5073+56]..[138,5073+69])
                                                        []
                                                  "ast" (src/utils.ml[139,5145+16]..[139,5145+19])
                                                    expression (src/utils.ml[139,5145+16]..[139,5145+19]) ghost
                                                      Pexp_ident "ast" (src/utils.ml[139,5145+16]..[139,5145+19]) ghost
                                                ]
                                                None
                                <case>
                                  pattern (src/utils.ml[141,5182+10]..[141,5182+17])
                                    Ppat_construct "Unknown" (src/utils.ml[141,5182+10]..[141,5182+17])
                                    None
                                  expression (src/utils.ml[142,5203+12]..[150,5599+36])
                                    Pexp_ifthenelse
                                    expression (src/utils.ml[143,5218+14]..[148,5447+81])
                                      Pexp_apply
                                      expression (src/utils.ml[146,5369+14]..[146,5369+16])
                                        Pexp_ident "||" (src/utils.ml[146,5369+14]..[146,5369+16])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[143,5218+14]..[145,5290+78])
                                            Pexp_apply
                                            expression (src/utils.ml[143,5218+14]..[143,5218+26])
                                              Pexp_ident "String.equal" (src/utils.ml[143,5218+14]..[143,5218+26])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[144,5245+16]..[144,5245+44])
                                                  Pexp_apply
                                                  expression (src/utils.ml[144,5245+17]..[144,5245+27])
                                                    Pexp_ident "String.sub" (src/utils.ml[144,5245+17]..[144,5245+27])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/utils.ml[144,5245+28]..[144,5245+29])
                                                        Pexp_ident "s" (src/utils.ml[144,5245+28]..[144,5245+29])
                                                    <arg>
                                                    Labelled "pos"
                                                      expression (src/utils.ml[144,5245+35]..[144,5245+36])
                                                        Pexp_constant PConst_int (0,None)
                                                    <arg>
                                                    Labelled "len"
                                                      expression (src/utils.ml[144,5245+42]..[144,5245+43])
                                                        Pexp_constant PConst_int (9,None)
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[145,5290+16]..[145,5290+78])
                                                  Pexp_apply
                                                  expression (src/utils.ml[145,5290+17]..[145,5290+27])
                                                    Pexp_ident "String.sub" (src/utils.ml[145,5290+17]..[145,5290+27])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/utils.ml[145,5290+28]..[145,5290+63])
                                                        Pexp_ident "Astlib.Config.ast_impl_magic_number" (src/utils.ml[145,5290+28]..[145,5290+63])
                                                    <arg>
                                                    Labelled "pos"
                                                      expression (src/utils.ml[145,5290+69]..[145,5290+70])
                                                        Pexp_constant PConst_int (0,None)
                                                    <arg>
                                                    Labelled "len"
                                                      expression (src/utils.ml[145,5290+76]..[145,5290+77])
                                                        Pexp_constant PConst_int (9,None)
                                                  ]
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[146,5369+17]..[148,5447+81])
                                            Pexp_apply
                                            expression (src/utils.ml[146,5369+17]..[146,5369+29])
                                              Pexp_ident "String.equal" (src/utils.ml[146,5369+17]..[146,5369+29])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[147,5399+19]..[147,5399+47])
                                                  Pexp_apply
                                                  expression (src/utils.ml[147,5399+20]..[147,5399+30])
                                                    Pexp_ident "String.sub" (src/utils.ml[147,5399+20]..[147,5399+30])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/utils.ml[147,5399+31]..[147,5399+32])
                                                        Pexp_ident "s" (src/utils.ml[147,5399+31]..[147,5399+32])
                                                    <arg>
                                                    Labelled "pos"
                                                      expression (src/utils.ml[147,5399+38]..[147,5399+39])
                                                        Pexp_constant PConst_int (0,None)
                                                    <arg>
                                                    Labelled "len"
                                                      expression (src/utils.ml[147,5399+45]..[147,5399+46])
                                                        Pexp_constant PConst_int (9,None)
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[148,5447+19]..[148,5447+81])
                                                  Pexp_apply
                                                  expression (src/utils.ml[148,5447+20]..[148,5447+30])
                                                    Pexp_ident "String.sub" (src/utils.ml[148,5447+20]..[148,5447+30])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/utils.ml[148,5447+31]..[148,5447+66])
                                                        Pexp_ident "Astlib.Config.ast_intf_magic_number" (src/utils.ml[148,5447+31]..[148,5447+66])
                                                    <arg>
                                                    Labelled "pos"
                                                      expression (src/utils.ml[148,5447+72]..[148,5447+73])
                                                        Pexp_constant PConst_int (0,None)
                                                    <arg>
                                                    Labelled "len"
                                                      expression (src/utils.ml[148,5447+79]..[148,5447+80])
                                                        Pexp_constant PConst_int (9,None)
                                                  ]
                                            ]
                                      ]
                                    expression (src/utils.ml[149,5529+17]..[149,5529+69])
                                      Pexp_construct "Error" (src/utils.ml[149,5529+17]..[149,5529+22])
                                      Some
                                        expression (src/utils.ml[149,5529+23]..[149,5529+69])
                                          Pexp_construct "Unknown_version" (src/utils.ml[149,5529+24]..[149,5529+39])
                                          Some
                                            expression (src/utils.ml[149,5529+40]..[149,5529+68])
                                              Pexp_tuple
                                              [
                                                expression (src/utils.ml[149,5529+41]..[149,5529+42])
                                                  Pexp_ident "s" (src/utils.ml[149,5529+41]..[149,5529+42])
                                                expression (src/utils.ml[149,5529+44]..[149,5529+67])
                                                  Pexp_ident "fall_back_input_version" (src/utils.ml[149,5529+44]..[149,5529+67])
                                              ]
                                    Some
                                      expression (src/utils.ml[150,5599+17]..[150,5599+36])
                                        Pexp_apply
                                        expression (src/utils.ml[150,5599+17]..[150,5599+34])
                                          Pexp_ident "handle_non_binary" (src/utils.ml[150,5599+17]..[150,5599+34])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[150,5599+35]..[150,5599+36])
                                              Pexp_ident "s" (src/utils.ml[150,5599+35]..[150,5599+36])
                                        ]
                              ]
                        ]
            ]
          structure_item (src/utils.ml[152,5638+2]..[160,5922+76])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[152,5638+6]..[152,5638+10])
                  Ppat_var "read" (src/utils.ml[152,5638+6]..[152,5638+10])
                expression (src/utils.ml[152,5638+11]..[160,5922+76]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[152,5638+11]..[152,5638+23])
                    Ppat_var "input_source" (src/utils.ml[152,5638+11]..[152,5638+23])
                  expression (src/utils.ml[152,5638+24]..[160,5922+76]) ghost
                    Pexp_fun
                    Labelled "input_kind"
                    None
                    pattern (src/utils.ml[152,5638+25]..[152,5638+35])
                      Ppat_var "input_kind" (src/utils.ml[152,5638+25]..[152,5638+35])
                    expression (src/utils.ml[153,5676+4]..[160,5922+76])
                      Pexp_try
                      expression (src/utils.ml[154,5684+6]..[156,5762+72])
                        Pexp_match
                        expression (src/utils.ml[154,5684+12]..[154,5684+24])
                          Pexp_ident "input_source" (src/utils.ml[154,5684+12]..[154,5684+24])
                        [
                          <case>
                            pattern (src/utils.ml[155,5714+8]..[155,5714+13])
                              Ppat_construct "Stdin" (src/utils.ml[155,5714+8]..[155,5714+13])
                              None
                            expression (src/utils.ml[155,5714+17]..[155,5714+47])
                              Pexp_apply
                              expression (src/utils.ml[155,5714+17]..[155,5714+29])
                                Pexp_ident "from_channel" (src/utils.ml[155,5714+17]..[155,5714+29])
                              [
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[155,5714+30]..[155,5714+35])
                                    Pexp_ident "stdin" (src/utils.ml[155,5714+30]..[155,5714+35])
                                <arg>
                                Labelled "input_kind"
                                  expression (src/utils.ml[155,5714+37]..[155,5714+47])
                                    Pexp_ident "input_kind" (src/utils.ml[155,5714+37]..[155,5714+47])
                              ]
                          <case>
                            pattern (src/utils.ml[156,5762+8]..[156,5762+15])
                              Ppat_construct "File" (src/utils.ml[156,5762+8]..[156,5762+12])
                              Some
                                pattern (src/utils.ml[156,5762+13]..[156,5762+15])
                                  Ppat_var "fn" (src/utils.ml[156,5762+13]..[156,5762+15])
                            expression (src/utils.ml[156,5762+19]..[156,5762+72])
                              Pexp_apply
                              expression (src/utils.ml[156,5762+19]..[156,5762+39])
                                Pexp_ident "In_channel.with_file" (src/utils.ml[156,5762+19]..[156,5762+39])
                              [
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[156,5762+40]..[156,5762+42])
                                    Pexp_ident "fn" (src/utils.ml[156,5762+40]..[156,5762+42])
                                <arg>
                                Labelled "f"
                                  expression (src/utils.ml[156,5762+46]..[156,5762+72])
                                    Pexp_apply
                                    expression (src/utils.ml[156,5762+47]..[156,5762+59])
                                      Pexp_ident "from_channel" (src/utils.ml[156,5762+47]..[156,5762+59])
                                    [
                                      <arg>
                                      Labelled "input_kind"
                                        expression (src/utils.ml[156,5762+61]..[156,5762+71])
                                          Pexp_ident "input_kind" (src/utils.ml[156,5762+61]..[156,5762+71])
                                    ]
                              ]
                        ]
                      [
                        <case>
                          pattern (src/utils.ml[157,5835+9]..[157,5835+12])
                            Ppat_var "exn" (src/utils.ml[157,5835+9]..[157,5835+12])
                          expression (src/utils.ml[157,5835+16]..[160,5922+76])
                            Pexp_match
                            expression (src/utils.ml[158,5853+12]..[158,5853+37])
                              Pexp_apply
                              expression (src/utils.ml[158,5853+12]..[158,5853+33])
                                Pexp_ident "Location.Error.of_exn" (src/utils.ml[158,5853+12]..[158,5853+33])
                              [
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[158,5853+34]..[158,5853+37])
                                    Pexp_ident "exn" (src/utils.ml[158,5853+34]..[158,5853+37])
                              ]
                            [
                              <case>
                                pattern (src/utils.ml[159,5896+8]..[159,5896+12])
                                  Ppat_construct "None" (src/utils.ml[159,5896+8]..[159,5896+12])
                                  None
                                expression (src/utils.ml[159,5896+16]..[159,5896+25])
                                  Pexp_apply
                                  expression (src/utils.ml[159,5896+16]..[159,5896+21])
                                    Pexp_ident "raise" (src/utils.ml[159,5896+16]..[159,5896+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/utils.ml[159,5896+22]..[159,5896+25])
                                        Pexp_ident "exn" (src/utils.ml[159,5896+22]..[159,5896+25])
                                  ]
                              <case>
                                pattern (src/utils.ml[160,5922+8]..[160,5922+18])
                                  Ppat_construct "Some" (src/utils.ml[160,5922+8]..[160,5922+12])
                                  Some
                                    pattern (src/utils.ml[160,5922+13]..[160,5922+18])
                                      Ppat_var "error" (src/utils.ml[160,5922+13]..[160,5922+18])
                                expression (src/utils.ml[160,5922+22]..[160,5922+75])
                                  Pexp_construct "Error" (src/utils.ml[160,5922+22]..[160,5922+27])
                                  Some
                                    expression (src/utils.ml[160,5922+28]..[160,5922+75])
                                      Pexp_construct "System_error" (src/utils.ml[160,5922+29]..[160,5922+41])
                                      Some
                                        expression (src/utils.ml[160,5922+42]..[160,5922+74])
                                          Pexp_tuple
                                          [
                                            expression (src/utils.ml[160,5922+43]..[160,5922+48])
                                              Pexp_ident "error" (src/utils.ml[160,5922+43]..[160,5922+48])
                                            expression (src/utils.ml[160,5922+50]..[160,5922+73])
                                              Pexp_ident "fall_back_input_version" (src/utils.ml[160,5922+50]..[160,5922+73])
                                          ]
                            ]
                      ]
            ]
          structure_item (src/utils.ml[162,6000+2]..[188,7115+26])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[162,6000+6]..[162,6000+11])
                  Ppat_var "write" (src/utils.ml[162,6000+6]..[162,6000+11])
                expression (src/utils.ml[162,6000+12]..[188,7115+26]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/utils.ml[162,6000+12]..[162,6000+14])
                    Ppat_var "oc" (src/utils.ml[162,6000+12]..[162,6000+14])
                  expression (src/utils.ml[162,6000+15]..[188,7115+26]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/utils.ml[162,6000+15]..[162,6000+74])
                      Ppat_record Closed
                      [
                        "input_name" (src/utils.ml[162,6000+17]..[162,6000+27]) ghost
                          pattern (src/utils.ml[162,6000+17]..[162,6000+27])
                            Ppat_var "input_name" (src/utils.ml[162,6000+17]..[162,6000+27])
                        "input_version" (src/utils.ml[162,6000+29]..[162,6000+42])
                          pattern (src/utils.ml[162,6000+45]..[162,6000+67])
                            Ppat_unpack "Input_version" (src/utils.ml[162,6000+53]..[162,6000+66])
                        "ast" (src/utils.ml[162,6000+69]..[162,6000+72]) ghost
                          pattern (src/utils.ml[162,6000+69]..[162,6000+72])
                            Ppat_var "ast" (src/utils.ml[162,6000+69]..[162,6000+72])
                      ]
                    expression (src/utils.ml[163,6075+6]..[188,7115+26]) ghost
                      Pexp_fun
                      Labelled "add_ppx_context"
                      None
                      pattern (src/utils.ml[163,6075+7]..[163,6075+22])
                        Ppat_var "add_ppx_context" (src/utils.ml[163,6075+7]..[163,6075+22])
                      expression (src/utils.ml[164,6100+4]..[188,7115+26])
                        Pexp_letmodule "Ppxlib_to_input" (src/utils.ml[164,6100+15]..[164,6100+30])
                        module_expr (src/utils.ml[164,6100+33]..[164,6100+61])
                          Pmod_apply
                          module_expr (src/utils.ml[164,6100+33]..[164,6100+45])
                            Pmod_apply
                            module_expr (src/utils.ml[164,6100+33]..[164,6100+40])
                              Pmod_ident "Convert" (src/utils.ml[164,6100+33]..[164,6100+40])
                            module_expr (src/utils.ml[164,6100+42]..[164,6100+44])
                              Pmod_ident "Js" (src/utils.ml[164,6100+42]..[164,6100+44])
                          module_expr (src/utils.ml[164,6100+47]..[164,6100+60])
                            Pmod_ident "Input_version" (src/utils.ml[164,6100+47]..[164,6100+60])
                        expression (src/utils.ml[165,6165+4]..[188,7115+26])
                          Pexp_letmodule "Ocaml_to_input" (src/utils.ml[165,6165+15]..[165,6165+29])
                          module_expr (src/utils.ml[165,6165+32]..[165,6165+74])
                            Pmod_apply
                            module_expr (src/utils.ml[165,6165+32]..[165,6165+58])
                              Pmod_apply
                              module_expr (src/utils.ml[165,6165+32]..[165,6165+39])
                                Pmod_ident "Convert" (src/utils.ml[165,6165+32]..[165,6165+39])
                              module_expr (src/utils.ml[165,6165+41]..[165,6165+57])
                                Pmod_ident "Compiler_version" (src/utils.ml[165,6165+41]..[165,6165+57])
                            module_expr (src/utils.ml[165,6165+60]..[165,6165+73])
                              Pmod_ident "Input_version" (src/utils.ml[165,6165+60]..[165,6165+73])
                          expression (src/utils.ml[166,6243+4]..[188,7115+26])
                            Pexp_match
                            expression (src/utils.ml[166,6243+10]..[166,6243+13])
                              Pexp_ident "ast" (src/utils.ml[166,6243+10]..[166,6243+13])
                            [
                              <case>
                                pattern (src/utils.ml[167,6262+6]..[167,6262+13])
                                  Ppat_construct "Intf" (src/utils.ml[167,6262+6]..[167,6262+10])
                                  Some
                                    pattern (src/utils.ml[167,6262+11]..[167,6262+13])
                                      Ppat_var "sg" (src/utils.ml[167,6262+11]..[167,6262+13])
                                expression (src/utils.ml[168,6279+8]..[177,6675+26])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/utils.ml[168,6279+12]..[168,6279+14])
                                        Ppat_var "sg" (src/utils.ml[168,6279+12]..[168,6279+14])
                                      expression (src/utils.ml[169,6296+10]..[173,6506+48])
                                        Pexp_ifthenelse
                                        expression (src/utils.ml[169,6296+13]..[169,6296+28])
                                          Pexp_ident "add_ppx_context" (src/utils.ml[169,6296+13]..[169,6296+28])
                                        expression (src/utils.ml[170,6330+12]..[172,6461+44])
                                          Pexp_apply
                                          expression (src/utils.ml[172,6461+12]..[172,6461+14])
                                            Pexp_ident "|>" (src/utils.ml[172,6461+12]..[172,6461+14])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/utils.ml[170,6330+12]..[171,6382+78])
                                                Pexp_apply
                                                expression (src/utils.ml[171,6382+12]..[171,6382+14])
                                                  Pexp_ident "|>" (src/utils.ml[171,6382+12]..[171,6382+14])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/utils.ml[170,6330+12]..[170,6330+51])
                                                      Pexp_apply
                                                      expression (src/utils.ml[170,6330+12]..[170,6330+48])
                                                        Pexp_ident "Selected_ast.To_ocaml.copy_signature" (src/utils.ml[170,6330+12]..[170,6330+48])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/utils.ml[170,6330+49]..[170,6330+51])
                                                            Pexp_ident "sg" (src/utils.ml[170,6330+49]..[170,6330+51])
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/utils.ml[171,6382+15]..[171,6382+78])
                                                      Pexp_apply
                                                      expression (src/utils.ml[171,6382+15]..[171,6382+54])
                                                        Pexp_ident "Astlib.Ast_metadata.add_ppx_context_sig" (src/utils.ml[171,6382+15]..[171,6382+54])
                                                      [
                                                        <arg>
                                                        Labelled "tool_name"
                                                          expression (src/utils.ml[171,6382+66]..[171,6382+78])
                                                            Pexp_constant PConst_string("ppx_driver",(src/utils.ml[171,6382+67]..[171,6382+77]),None)
                                                      ]
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/utils.ml[172,6461+15]..[172,6461+44])
                                                Pexp_ident "Ocaml_to_input.copy_signature" (src/utils.ml[172,6461+15]..[172,6461+44])
                                          ]
                                        Some
                                          expression (src/utils.ml[173,6506+15]..[173,6506+48])
                                            Pexp_apply
                                            expression (src/utils.ml[173,6506+15]..[173,6506+45])
                                              Pexp_ident "Ppxlib_to_input.copy_signature" (src/utils.ml[173,6506+15]..[173,6506+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[173,6506+46]..[173,6506+48])
                                                  Pexp_ident "sg" (src/utils.ml[173,6506+46]..[173,6506+48])
                                            ]
                                  ]
                                  expression (src/utils.ml[175,6566+8]..[177,6675+26])
                                    Pexp_sequence
                                    expression (src/utils.ml[175,6566+8]..[175,6566+71])
                                      Pexp_apply
                                      expression (src/utils.ml[175,6566+8]..[175,6566+21])
                                        Pexp_ident "output_string" (src/utils.ml[175,6566+8]..[175,6566+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[175,6566+22]..[175,6566+24])
                                            Pexp_ident "oc" (src/utils.ml[175,6566+22]..[175,6566+24])
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[175,6566+25]..[175,6566+71])
                                            Pexp_ident "Input_version.Ast.Config.ast_intf_magic_number" (src/utils.ml[175,6566+25]..[175,6566+71])
                                      ]
                                    expression (src/utils.ml[176,6639+8]..[177,6675+26])
                                      Pexp_sequence
                                      expression (src/utils.ml[176,6639+8]..[176,6639+34])
                                        Pexp_apply
                                        expression (src/utils.ml[176,6639+8]..[176,6639+20])
                                          Pexp_ident "output_value" (src/utils.ml[176,6639+8]..[176,6639+20])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[176,6639+21]..[176,6639+23])
                                              Pexp_ident "oc" (src/utils.ml[176,6639+21]..[176,6639+23])
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[176,6639+24]..[176,6639+34])
                                              Pexp_ident "input_name" (src/utils.ml[176,6639+24]..[176,6639+34])
                                        ]
                                      expression (src/utils.ml[177,6675+8]..[177,6675+26])
                                        Pexp_apply
                                        expression (src/utils.ml[177,6675+8]..[177,6675+20])
                                          Pexp_ident "output_value" (src/utils.ml[177,6675+8]..[177,6675+20])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[177,6675+21]..[177,6675+23])
                                              Pexp_ident "oc" (src/utils.ml[177,6675+21]..[177,6675+23])
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[177,6675+24]..[177,6675+26])
                                              Pexp_ident "sg" (src/utils.ml[177,6675+24]..[177,6675+26])
                                        ]
                              <case>
                                pattern (src/utils.ml[178,6702+6]..[178,6702+13])
                                  Ppat_construct "Impl" (src/utils.ml[178,6702+6]..[178,6702+10])
                                  Some
                                    pattern (src/utils.ml[178,6702+11]..[178,6702+13])
                                      Ppat_var "st" (src/utils.ml[178,6702+11]..[178,6702+13])
                                expression (src/utils.ml[179,6719+8]..[188,7115+26])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/utils.ml[179,6719+12]..[179,6719+14])
                                        Ppat_var "st" (src/utils.ml[179,6719+12]..[179,6719+14])
                                      expression (src/utils.ml[180,6736+10]..[184,6946+48])
                                        Pexp_ifthenelse
                                        expression (src/utils.ml[180,6736+13]..[180,6736+28])
                                          Pexp_ident "add_ppx_context" (src/utils.ml[180,6736+13]..[180,6736+28])
                                        expression (src/utils.ml[181,6770+12]..[183,6901+44])
                                          Pexp_apply
                                          expression (src/utils.ml[183,6901+12]..[183,6901+14])
                                            Pexp_ident "|>" (src/utils.ml[183,6901+12]..[183,6901+14])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/utils.ml[181,6770+12]..[182,6822+78])
                                                Pexp_apply
                                                expression (src/utils.ml[182,6822+12]..[182,6822+14])
                                                  Pexp_ident "|>" (src/utils.ml[182,6822+12]..[182,6822+14])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/utils.ml[181,6770+12]..[181,6770+51])
                                                      Pexp_apply
                                                      expression (src/utils.ml[181,6770+12]..[181,6770+48])
                                                        Pexp_ident "Selected_ast.To_ocaml.copy_structure" (src/utils.ml[181,6770+12]..[181,6770+48])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/utils.ml[181,6770+49]..[181,6770+51])
                                                            Pexp_ident "st" (src/utils.ml[181,6770+49]..[181,6770+51])
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/utils.ml[182,6822+15]..[182,6822+78])
                                                      Pexp_apply
                                                      expression (src/utils.ml[182,6822+15]..[182,6822+54])
                                                        Pexp_ident "Astlib.Ast_metadata.add_ppx_context_str" (src/utils.ml[182,6822+15]..[182,6822+54])
                                                      [
                                                        <arg>
                                                        Labelled "tool_name"
                                                          expression (src/utils.ml[182,6822+66]..[182,6822+78])
                                                            Pexp_constant PConst_string("ppx_driver",(src/utils.ml[182,6822+67]..[182,6822+77]),None)
                                                      ]
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/utils.ml[183,6901+15]..[183,6901+44])
                                                Pexp_ident "Ocaml_to_input.copy_structure" (src/utils.ml[183,6901+15]..[183,6901+44])
                                          ]
                                        Some
                                          expression (src/utils.ml[184,6946+15]..[184,6946+48])
                                            Pexp_apply
                                            expression (src/utils.ml[184,6946+15]..[184,6946+45])
                                              Pexp_ident "Ppxlib_to_input.copy_structure" (src/utils.ml[184,6946+15]..[184,6946+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/utils.ml[184,6946+46]..[184,6946+48])
                                                  Pexp_ident "st" (src/utils.ml[184,6946+46]..[184,6946+48])
                                            ]
                                  ]
                                  expression (src/utils.ml[186,7006+8]..[188,7115+26])
                                    Pexp_sequence
                                    expression (src/utils.ml[186,7006+8]..[186,7006+71])
                                      Pexp_apply
                                      expression (src/utils.ml[186,7006+8]..[186,7006+21])
                                        Pexp_ident "output_string" (src/utils.ml[186,7006+8]..[186,7006+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[186,7006+22]..[186,7006+24])
                                            Pexp_ident "oc" (src/utils.ml[186,7006+22]..[186,7006+24])
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[186,7006+25]..[186,7006+71])
                                            Pexp_ident "Input_version.Ast.Config.ast_impl_magic_number" (src/utils.ml[186,7006+25]..[186,7006+71])
                                      ]
                                    expression (src/utils.ml[187,7079+8]..[188,7115+26])
                                      Pexp_sequence
                                      expression (src/utils.ml[187,7079+8]..[187,7079+34])
                                        Pexp_apply
                                        expression (src/utils.ml[187,7079+8]..[187,7079+20])
                                          Pexp_ident "output_value" (src/utils.ml[187,7079+8]..[187,7079+20])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[187,7079+21]..[187,7079+23])
                                              Pexp_ident "oc" (src/utils.ml[187,7079+21]..[187,7079+23])
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[187,7079+24]..[187,7079+34])
                                              Pexp_ident "input_name" (src/utils.ml[187,7079+24]..[187,7079+34])
                                        ]
                                      expression (src/utils.ml[188,7115+8]..[188,7115+26])
                                        Pexp_apply
                                        expression (src/utils.ml[188,7115+8]..[188,7115+20])
                                          Pexp_ident "output_value" (src/utils.ml[188,7115+8]..[188,7115+20])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[188,7115+21]..[188,7115+23])
                                              Pexp_ident "oc" (src/utils.ml[188,7115+21]..[188,7115+23])
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[188,7115+24]..[188,7115+26])
                                              Pexp_ident "st" (src/utils.ml[188,7115+24]..[188,7115+26])
                                        ]
                            ]
            ]
          structure_item (src/utils.ml[190,7143+2]..[209,7742+5])
            Pstr_module
            "Read_bin" (src/utils.ml[190,7143+9]..[190,7143+17])
              module_expr (src/utils.ml[190,7143+20]..[209,7742+5])
                Pmod_structure
                [
                  structure_item (src/utils.ml[191,7170+4]..[191,7170+52])
                    Pstr_type Rec
                    [
                      type_declaration "ast" (src/utils.ml[191,7170+9]..[191,7170+12]) (src/utils.ml[191,7170+4]..[191,7170+52])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_variant
                            [
                              (src/utils.ml[191,7170+15]..[191,7170+32])
                                "Intf" (src/utils.ml[191,7170+15]..[191,7170+19])
                                [
                                  core_type (src/utils.ml[191,7170+23]..[191,7170+32])
                                    Ptyp_constr "signature" (src/utils.ml[191,7170+23]..[191,7170+32])
                                    []
                                ]
                                None
                              (src/utils.ml[191,7170+33]..[191,7170+52])
                                "Impl" (src/utils.ml[191,7170+35]..[191,7170+39])
                                [
                                  core_type (src/utils.ml[191,7170+43]..[191,7170+52])
                                    Ptyp_constr "structure" (src/utils.ml[191,7170+43]..[191,7170+52])
                                    []
                                ]
                                None
                            ]
                        ptype_private = Public
                        ptype_manifest =
                          None
                    ]
                  structure_item (src/utils.ml[192,7223+4]..[192,7223+47])
                    Pstr_type Rec
                    [
                      type_declaration "t" (src/utils.ml[192,7223+9]..[192,7223+10]) (src/utils.ml[192,7223+4]..[192,7223+47])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_record
                            [
                              (src/utils.ml[192,7223+15]..[192,7223+25])
                                Immutable
                                "ast" (src/utils.ml[192,7223+15]..[192,7223+18])                                core_type (src/utils.ml[192,7223+21]..[192,7223+24])
                                  Ptyp_constr "ast" (src/utils.ml[192,7223+21]..[192,7223+24])
                                  []
                              (src/utils.ml[192,7223+26]..[192,7223+45])
                                Immutable
                                "input_name" (src/utils.ml[192,7223+26]..[192,7223+36])                                core_type (src/utils.ml[192,7223+39]..[192,7223+45])
                                  Ptyp_constr "string" (src/utils.ml[192,7223+39]..[192,7223+45])
                                  []
                            ]
                        ptype_private = Public
                        ptype_manifest =
                          None
                    ]
                  structure_item (src/utils.ml[194,7272+4]..[205,7625+49])
                    Pstr_value Nonrec
                    [
                      <def>
                        pattern (src/utils.ml[194,7272+8]..[194,7272+19])
                          Ppat_var "read_binary" (src/utils.ml[194,7272+8]..[194,7272+19])
                        expression (src/utils.ml[194,7272+20]..[205,7625+49]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/utils.ml[194,7272+20]..[194,7272+22])
                            Ppat_var "fn" (src/utils.ml[194,7272+20]..[194,7272+22])
                          expression (src/utils.ml[195,7297+6]..[205,7625+49])
                            Pexp_match
                            expression (src/utils.ml[196,7309+8]..[196,7309+80])
                              Pexp_apply
                              expression (src/utils.ml[196,7309+8]..[196,7309+28])
                                Pexp_ident "In_channel.with_file" (src/utils.ml[196,7309+8]..[196,7309+28])
                              [
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[196,7309+29]..[196,7309+31])
                                    Pexp_ident "fn" (src/utils.ml[196,7309+29]..[196,7309+31])
                                <arg>
                                Labelled "f"
                                  expression (src/utils.ml[196,7309+35]..[196,7309+80])
                                    Pexp_apply
                                    expression (src/utils.ml[196,7309+36]..[196,7309+48])
                                      Pexp_ident "from_channel" (src/utils.ml[196,7309+36]..[196,7309+48])
                                    [
                                      <arg>
                                      Labelled "input_kind"
                                        expression (src/utils.ml[196,7309+61]..[196,7309+79])
                                          Pexp_construct "Necessarily_binary" (src/utils.ml[196,7309+61]..[196,7309+79])
                                          None
                                    ]
                              ]
                            [
                              <case>
                                pattern (src/utils.ml[198,7401+8]..[198,7401+33])
                                  Ppat_construct "Ok" (src/utils.ml[198,7401+8]..[198,7401+10])
                                  Some
                                    pattern (src/utils.ml[198,7401+11]..[198,7401+33])
                                      Ppat_record Open
                                      [
                                        "ast" (src/utils.ml[198,7401+13]..[198,7401+16]) ghost
                                          pattern (src/utils.ml[198,7401+13]..[198,7401+16])
                                            Ppat_var "ast" (src/utils.ml[198,7401+13]..[198,7401+16])
                                        "input_name" (src/utils.ml[198,7401+18]..[198,7401+28]) ghost
                                          pattern (src/utils.ml[198,7401+18]..[198,7401+28])
                                            Ppat_var "input_name" (src/utils.ml[198,7401+18]..[198,7401+28])
                                      ]
                                expression (src/utils.ml[199,7438+10]..[204,7592+32])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/utils.ml[199,7438+14]..[199,7438+17])
                                        Ppat_var "ast" (src/utils.ml[199,7438+14]..[199,7438+17])
                                      expression (src/utils.ml[200,7458+12]..[202,7532+46])
                                        Pexp_match
                                        expression (src/utils.ml[200,7458+18]..[200,7458+21])
                                          Pexp_ident "ast" (src/utils.ml[200,7458+18]..[200,7458+21])
                                        [
                                          <case>
                                            pattern (src/utils.ml[201,7485+14]..[201,7485+28])
                                              Ppat_construct "Impl" (src/utils.ml[201,7485+14]..[201,7485+18])
                                              Some
                                                pattern (src/utils.ml[201,7485+19]..[201,7485+28])
                                                  Ppat_var "structure" (src/utils.ml[201,7485+19]..[201,7485+28])
                                            expression (src/utils.ml[201,7485+32]..[201,7485+46])
                                              Pexp_construct "Impl" (src/utils.ml[201,7485+32]..[201,7485+36])
                                              Some
                                                expression (src/utils.ml[201,7485+37]..[201,7485+46])
                                                  Pexp_ident "structure" (src/utils.ml[201,7485+37]..[201,7485+46])
                                          <case>
                                            pattern (src/utils.ml[202,7532+14]..[202,7532+28])
                                              Ppat_construct "Intf" (src/utils.ml[202,7532+14]..[202,7532+18])
                                              Some
                                                pattern (src/utils.ml[202,7532+19]..[202,7532+28])
                                                  Ppat_var "signature" (src/utils.ml[202,7532+19]..[202,7532+28])
                                            expression (src/utils.ml[202,7532+32]..[202,7532+46])
                                              Pexp_construct "Intf" (src/utils.ml[202,7532+32]..[202,7532+36])
                                              Some
                                                expression (src/utils.ml[202,7532+37]..[202,7532+46])
                                                  Pexp_ident "signature" (src/utils.ml[202,7532+37]..[202,7532+46])
                                        ]
                                  ]
                                  expression (src/utils.ml[204,7592+10]..[204,7592+32])
                                    Pexp_construct "Ok" (src/utils.ml[204,7592+10]..[204,7592+12])
                                    Some
                                      expression (src/utils.ml[204,7592+13]..[204,7592+32])
                                        Pexp_record
                                        [
                                          "ast" (src/utils.ml[204,7592+15]..[204,7592+18])
                                            expression (src/utils.ml[204,7592+15]..[204,7592+18]) ghost
                                              Pexp_ident "ast" (src/utils.ml[204,7592+15]..[204,7592+18]) ghost
                                          "input_name" (src/utils.ml[204,7592+20]..[204,7592+30])
                                            expression (src/utils.ml[204,7592+20]..[204,7592+30]) ghost
                                              Pexp_ident "input_name" (src/utils.ml[204,7592+20]..[204,7592+30]) ghost
                                        ]
                                        None
                              <case>
                                pattern (src/utils.ml[205,7625+8]..[205,7625+15])
                                  Ppat_construct "Error" (src/utils.ml[205,7625+8]..[205,7625+13])
                                  Some
                                    pattern (src/utils.ml[205,7625+14]..[205,7625+15])
                                      Ppat_var "e" (src/utils.ml[205,7625+14]..[205,7625+15])
                                expression (src/utils.ml[205,7625+19]..[205,7625+49])
                                  Pexp_construct "Error" (src/utils.ml[205,7625+19]..[205,7625+24])
                                  Some
                                    expression (src/utils.ml[205,7625+25]..[205,7625+49])
                                      Pexp_apply
                                      expression (src/utils.ml[205,7625+26]..[205,7625+46])
                                        Pexp_ident "read_error_to_string" (src/utils.ml[205,7625+26]..[205,7625+46])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[205,7625+47]..[205,7625+48])
                                            Pexp_ident "e" (src/utils.ml[205,7625+47]..[205,7625+48])
                                      ]
                            ]
                    ]
                  structure_item (src/utils.ml[207,7676+4]..[207,7676+25])
                    Pstr_value Nonrec
                    [
                      <def>
                        pattern (src/utils.ml[207,7676+8]..[207,7676+15])
                          Ppat_var "get_ast" (src/utils.ml[207,7676+8]..[207,7676+15])
                        expression (src/utils.ml[207,7676+16]..[207,7676+25]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/utils.ml[207,7676+16]..[207,7676+17])
                            Ppat_var "t" (src/utils.ml[207,7676+16]..[207,7676+17])
                          expression (src/utils.ml[207,7676+20]..[207,7676+25])
                            Pexp_field
                            expression (src/utils.ml[207,7676+20]..[207,7676+21])
                              Pexp_ident "t" (src/utils.ml[207,7676+20]..[207,7676+21])
                            "ast" (src/utils.ml[207,7676+22]..[207,7676+25])
                    ]
                  structure_item (src/utils.ml[208,7702+4]..[208,7702+39])
                    Pstr_value Nonrec
                    [
                      <def>
                        pattern (src/utils.ml[208,7702+8]..[208,7702+22])
                          Ppat_var "get_input_name" (src/utils.ml[208,7702+8]..[208,7702+22])
                        expression (src/utils.ml[208,7702+23]..[208,7702+39]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/utils.ml[208,7702+23]..[208,7702+24])
                            Ppat_var "t" (src/utils.ml[208,7702+23]..[208,7702+24])
                          expression (src/utils.ml[208,7702+27]..[208,7702+39])
                            Pexp_field
                            expression (src/utils.ml[208,7702+27]..[208,7702+28])
                              Pexp_ident "t" (src/utils.ml[208,7702+27]..[208,7702+28])
                            "input_name" (src/utils.ml[208,7702+29]..[208,7702+39])
                    ]
                ]
        ]
  structure_item (src/utils.ml[212,7753+0]..[221,8104+3])
    Pstr_module
    "System" (src/utils.ml[212,7753+7]..[212,7753+13])
      module_expr (src/utils.ml[212,7753+16]..[221,8104+3])
        Pmod_structure
        [
          structure_item (src/utils.ml[213,7776+2]..[220,8047+56])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[213,7776+6]..[213,7776+22])
                  Ppat_var "run_preprocessor" (src/utils.ml[213,7776+6]..[213,7776+22])
                expression (src/utils.ml[213,7776+23]..[220,8047+56]) ghost
                  Pexp_fun
                  Labelled "pp"
                  None
                  pattern (src/utils.ml[213,7776+24]..[213,7776+26])
                    Ppat_var "pp" (src/utils.ml[213,7776+24]..[213,7776+26])
                  expression (src/utils.ml[213,7776+27]..[220,8047+56]) ghost
                    Pexp_fun
                    Labelled "input"
                    None
                    pattern (src/utils.ml[213,7776+28]..[213,7776+33])
                      Ppat_var "input" (src/utils.ml[213,7776+28]..[213,7776+33])
                    expression (src/utils.ml[213,7776+34]..[220,8047+56]) ghost
                      Pexp_fun
                      Labelled "output"
                      None
                      pattern (src/utils.ml[213,7776+35]..[213,7776+41])
                        Ppat_var "output" (src/utils.ml[213,7776+35]..[213,7776+41])
                      expression (src/utils.ml[214,7820+4]..[220,8047+56])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/utils.ml[214,7820+8]..[214,7820+15])
                              Ppat_var "command" (src/utils.ml[214,7820+8]..[214,7820+15])
                            expression (src/utils.ml[215,7838+6]..[217,7952+38])
                              Pexp_apply
                              expression (src/utils.ml[215,7838+6]..[215,7838+20])
                                Pexp_ident "Printf.sprintf" (src/utils.ml[215,7838+6]..[215,7838+20])
                              [
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[215,7838+21]..[215,7838+33])
                                    Pexp_constant PConst_string("%s %s > %s",(src/utils.ml[215,7838+22]..[215,7838+32]),None)
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[215,7838+34]..[215,7838+36])
                                    Pexp_ident "pp" (src/utils.ml[215,7838+34]..[215,7838+36])
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[216,7875+8]..[216,7875+76])
                                    Pexp_ifthenelse
                                    expression (src/utils.ml[216,7875+12]..[216,7875+34])
                                      Pexp_apply
                                      expression (src/utils.ml[216,7875+12]..[216,7875+24])
                                        Pexp_ident "String.equal" (src/utils.ml[216,7875+12]..[216,7875+24])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[216,7875+25]..[216,7875+30])
                                            Pexp_ident "input" (src/utils.ml[216,7875+25]..[216,7875+30])
                                        <arg>
                                        Nolabel
                                          expression (src/utils.ml[216,7875+31]..[216,7875+34])
                                            Pexp_constant PConst_string("-",(src/utils.ml[216,7875+32]..[216,7875+33]),None)
                                      ]
                                    expression (src/utils.ml[216,7875+40]..[216,7875+42])
                                      Pexp_constant PConst_string("",(src/utils.ml[216,7875+41]..[216,7875+41]),None)
                                    Some
                                      expression (src/utils.ml[216,7875+48]..[216,7875+75])
                                        Pexp_apply
                                        expression (src/utils.ml[216,7875+48]..[216,7875+69])
                                          Pexp_ident "Stdlib.Filename.quote" (src/utils.ml[216,7875+48]..[216,7875+69])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/utils.ml[216,7875+70]..[216,7875+75])
                                              Pexp_ident "input" (src/utils.ml[216,7875+70]..[216,7875+75])
                                        ]
                                <arg>
                                Nolabel
                                  expression (src/utils.ml[217,7952+8]..[217,7952+38])
                                    Pexp_apply
                                    expression (src/utils.ml[217,7952+9]..[217,7952+30])
                                      Pexp_ident "Stdlib.Filename.quote" (src/utils.ml[217,7952+9]..[217,7952+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/utils.ml[217,7952+31]..[217,7952+37])
                                          Pexp_ident "output" (src/utils.ml[217,7952+31]..[217,7952+37])
                                    ]
                              ]
                        ]
                        expression (src/utils.ml[219,7998+4]..[220,8047+56])
                          Pexp_ifthenelse
                          expression (src/utils.ml[219,7998+7]..[219,7998+37])
                            Pexp_apply
                            expression (src/utils.ml[219,7998+34]..[219,7998+35])
                              Pexp_ident "=" (src/utils.ml[219,7998+34]..[219,7998+35])
                            [
                              <arg>
                              Nolabel
                                expression (src/utils.ml[219,7998+7]..[219,7998+33])
                                  Pexp_apply
                                  expression (src/utils.ml[219,7998+7]..[219,7998+25])
                                    Pexp_ident "Stdlib.Sys.command" (src/utils.ml[219,7998+7]..[219,7998+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/utils.ml[219,7998+26]..[219,7998+33])
                                        Pexp_ident "command" (src/utils.ml[219,7998+26]..[219,7998+33])
                                  ]
                              <arg>
                              Nolabel
                                expression (src/utils.ml[219,7998+36]..[219,7998+37])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (src/utils.ml[219,7998+43]..[219,7998+48])
                            Pexp_construct "Ok" (src/utils.ml[219,7998+43]..[219,7998+45])
                            Some
                              expression (src/utils.ml[219,7998+46]..[219,7998+48])
                                Pexp_construct "()" (src/utils.ml[219,7998+46]..[219,7998+48])
                                None
                          Some
                            expression (src/utils.ml[220,8047+9]..[220,8047+56])
                              Pexp_construct "Error" (src/utils.ml[220,8047+9]..[220,8047+14])
                              Some
                                expression (src/utils.ml[220,8047+15]..[220,8047+56])
                                  Pexp_tuple
                                  [
                                    expression (src/utils.ml[220,8047+16]..[220,8047+23])
                                      Pexp_ident "command" (src/utils.ml[220,8047+16]..[220,8047+23])
                                    expression (src/utils.ml[220,8047+25]..[220,8047+55])
                                      Pexp_ident "Ast_io.fall_back_input_version" (src/utils.ml[220,8047+25]..[220,8047+55])
                                  ]
            ]
        ]
]

open Import
let with_output fn ~binary  ~f  =
  match fn with
  | None | Some "-" -> f stdout
  | Some fn -> Out_channel.with_file fn ~binary ~f
module Kind =
  struct
    type t =
      | Intf 
      | Impl 
    let of_filename fn =
      (if Stdlib.Filename.check_suffix fn ".ml"
       then Some Impl
       else
         if Stdlib.Filename.check_suffix fn ".mli" then Some Intf else None : 
      t option)
    let describe = function | Impl -> "implementation" | Intf -> "interface"
    let equal : t -> t -> bool = Poly.equal
  end
module Intf_or_impl =
  struct
    type t =
      | Intf of signature 
      | Impl of structure 
    let map t (map : Ast_traverse.map) =
      match t with
      | Impl x -> Impl (map#structure x)
      | Intf x -> Intf (map#signature x)
    let map_with_context t (map : _ Ast_traverse.map_with_context) ctx =
      match t with
      | Impl x -> Impl (map#structure ctx x)
      | Intf x -> Intf (map#signature ctx x)
    let kind : _ -> Kind.t = function | Intf _ -> Intf | Impl _ -> Impl
  end
module Ast_io =
  struct
    type input_version = (module OCaml_version)
    let fall_back_input_version = ((module
      Compiler_version) : (module OCaml_version))
    type t =
      {
      input_name: string ;
      input_version: input_version ;
      ast: Intf_or_impl.t }
    type read_error =
      | Not_a_binary_ast 
      | Unknown_version of string * input_version 
      | Source_parse_error of Location.Error.t * input_version 
      | System_error of Location.Error.t * input_version 
    type input_source =
      | Stdin 
      | File of string 
    type input_kind =
      | Possibly_source of Kind.t * string 
      | Necessarily_binary 
    let read_error_to_string (error : read_error) =
      match error with
      | Not_a_binary_ast -> "Error: Not a binary ast"
      | Unknown_version (s, _) -> "Error: Unknown version " ^ s
      | Source_parse_error (loc, _) ->
          "Source parse error:" ^ (Location.Error.message loc)
      | System_error (loc, _) ->
          "System error: " ^ (Location.Error.message loc)
    let parse_source_code ~kind:(kind : Kind.t)  ~input_name 
      ~prefix_read_from_source  ic =
      let input_version = ((module
        Compiler_version) : (module OCaml_version)) in
      try
        let lexbuf = Lexing.from_channel ic in
        let len = String.length prefix_read_from_source in
        Bytes.blit_string ~src:prefix_read_from_source ~src_pos:0
          ~dst:(lexbuf.lex_buffer) ~dst_pos:0 ~len;
        lexbuf.lex_buffer_len <- len;
        lexbuf.lex_curr_p <-
          { pos_fname = input_name; pos_lnum = 1; pos_bol = 0; pos_cnum = 0 };
        Skip_hash_bang.skip_hash_bang lexbuf;
        (let ast : Intf_or_impl.t =
           match kind with
           | Intf -> Intf (Parse.interface lexbuf)
           | Impl -> Impl (Parse.implementation lexbuf) in
         Ok { input_name; input_version; ast })
      with
      | exn ->
          (match Location.Error.of_exn exn with
           | None -> raise exn
           | Some error -> Error (Source_parse_error (error, input_version)))
    let magic_length = String.length Astlib.Config.ast_impl_magic_number
    let read_magic ic =
      let buf = Bytes.create magic_length in
      let len = input ic buf 0 magic_length in
      let s = Bytes.sub_string buf ~pos:0 ~len in
      if len = magic_length then Ok s else Error s
    let from_channel ch ~input_kind  =
      let handle_non_binary prefix_read_from_source =
        match input_kind with
        | Possibly_source (kind, input_name) ->
            parse_source_code ~kind ~input_name ~prefix_read_from_source ch
        | Necessarily_binary -> Error Not_a_binary_ast in
      match read_magic ch with
      | Error s -> handle_non_binary s
      | Ok s ->
          (match Find_version.from_magic s with
           | Intf ((module Input_version)  : (module OCaml_version)) ->
               let input_name : string = input_value ch in
               let ast = input_value ch in
               let module Input_to_ppxlib = ((Convert)(Input_version))(Js) in
                 let ast =
                   Intf_or_impl.Intf (Input_to_ppxlib.copy_signature ast) in
                 Ok
                   {
                     input_name;
                     input_version = ((module
                       Input_version) : (module OCaml_version));
                     ast
                   }
           | Impl ((module Input_version)  : (module OCaml_version)) ->
               let input_name : string = input_value ch in
               let ast = input_value ch in
               let module Input_to_ppxlib = ((Convert)(Input_version))(Js) in
                 let ast =
                   Intf_or_impl.Impl (Input_to_ppxlib.copy_structure ast) in
                 Ok
                   {
                     input_name;
                     input_version = ((module
                       Input_version) : (module OCaml_version));
                     ast
                   }
           | Unknown ->
               if
                 (String.equal (String.sub s ~pos:0 ~len:9)
                    (String.sub Astlib.Config.ast_impl_magic_number ~pos:0
                       ~len:9))
                   ||
                   (String.equal (String.sub s ~pos:0 ~len:9)
                      (String.sub Astlib.Config.ast_intf_magic_number ~pos:0
                         ~len:9))
               then Error (Unknown_version (s, fall_back_input_version))
               else handle_non_binary s)
    let read input_source ~input_kind  =
      try
        match input_source with
        | Stdin -> from_channel stdin ~input_kind
        | File fn -> In_channel.with_file fn ~f:(from_channel ~input_kind)
      with
      | exn ->
          (match Location.Error.of_exn exn with
           | None -> raise exn
           | Some error ->
               Error (System_error (error, fall_back_input_version)))
    let write oc { input_name; input_version = (module Input_version) ; ast }
      ~add_ppx_context  =
      let module Ppxlib_to_input = ((Convert)(Js))(Input_version) in
        let module Ocaml_to_input =
          ((Convert)(Compiler_version))(Input_version) in
          match ast with
          | Intf sg ->
              let sg =
                if add_ppx_context
                then
                  ((Selected_ast.To_ocaml.copy_signature sg) |>
                     (Astlib.Ast_metadata.add_ppx_context_sig
                        ~tool_name:"ppx_driver"))
                    |> Ocaml_to_input.copy_signature
                else Ppxlib_to_input.copy_signature sg in
              (output_string oc
                 Input_version.Ast.Config.ast_intf_magic_number;
               output_value oc input_name;
               output_value oc sg)
          | Impl st ->
              let st =
                if add_ppx_context
                then
                  ((Selected_ast.To_ocaml.copy_structure st) |>
                     (Astlib.Ast_metadata.add_ppx_context_str
                        ~tool_name:"ppx_driver"))
                    |> Ocaml_to_input.copy_structure
                else Ppxlib_to_input.copy_structure st in
              (output_string oc
                 Input_version.Ast.Config.ast_impl_magic_number;
               output_value oc input_name;
               output_value oc st)
    module Read_bin =
      struct
        type ast =
          | Intf of signature 
          | Impl of structure 
        type t = {
          ast: ast ;
          input_name: string }
        let read_binary fn =
          match In_channel.with_file fn
                  ~f:(from_channel ~input_kind:Necessarily_binary)
          with
          | Ok { ast; input_name;_} ->
              let ast =
                match ast with
                | Impl structure -> Impl structure
                | Intf signature -> Intf signature in
              Ok { ast; input_name }
          | Error e -> Error (read_error_to_string e)
        let get_ast t = t.ast
        let get_input_name t = t.input_name
      end
  end
module System =
  struct
    let run_preprocessor ~pp  ~input  ~output  =
      let command =
        Printf.sprintf "%s %s > %s" pp
          (if String.equal input "-" then "" else Stdlib.Filename.quote input)
          (Stdlib.Filename.quote output) in
      if (Stdlib.Sys.command command) = 0
      then Ok ()
      else Error (command, Ast_io.fall_back_input_version)
  end
[
  structure_item (src/utils.ml[1,0+0]..src/utils.ml[1,0+11])
    Tstr_open Fresh
    module_expr (src/utils.ml[1,0+5]..src/utils.ml[1,0+11])
      Tmod_ident "Ppxlib__!.Import"
  structure_item (src/utils.ml[3,13+0]..src/utils.ml[6,93+50])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/utils.ml[3,13+4]..src/utils.ml[3,13+15])
          Tpat_var "with_output/550"
        expression (src/utils.ml[3,13+16]..src/utils.ml[6,93+50]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/utils.ml[3,13+16]..src/utils.ml[3,13+18])
                Tpat_var "fn/552"
              expression (src/utils.ml[3,13+19]..src/utils.ml[6,93+50]) ghost
                Texp_function
                Labelled "binary"
                [
                  <case>
                    pattern (src/utils.ml[3,13+20]..src/utils.ml[3,13+26])
                      Tpat_var "binary/553"
                    expression (src/utils.ml[3,13+27]..src/utils.ml[6,93+50]) ghost
                      Texp_function
                      Labelled "f"
                      [
                        <case>
                          pattern (src/utils.ml[3,13+28]..src/utils.ml[3,13+29])
                            Tpat_var "f/554"
                          expression (src/utils.ml[4,45+2]..src/utils.ml[6,93+50])
                            Texp_match
                            expression (src/utils.ml[4,45+8]..src/utils.ml[4,45+10])
                              Texp_ident "fn/552"
                            [
                              <case>
                                pattern (src/utils.ml[5,61+4]..src/utils.ml[5,61+19])
                                  Tpat_or
                                  pattern (src/utils.ml[5,61+4]..src/utils.ml[5,61+8])
                                    Tpat_value
                                    pattern (src/utils.ml[5,61+4]..src/utils.ml[5,61+8])
                                      Tpat_construct "None"
                                      []
                                  pattern (src/utils.ml[5,61+11]..src/utils.ml[5,61+19])
                                    Tpat_value
                                    pattern (src/utils.ml[5,61+11]..src/utils.ml[5,61+19])
                                      Tpat_construct "Some"
                                      [
                                        pattern (src/utils.ml[5,61+16]..src/utils.ml[5,61+19])
                                          Tpat_constant Const_string("-",(src/utils.ml[5,61+17]..src/utils.ml[5,61+18]),None)
                                      ]
                                expression (src/utils.ml[5,61+23]..src/utils.ml[5,61+31])
                                  Texp_apply
                                  expression (src/utils.ml[5,61+23]..src/utils.ml[5,61+24])
                                    Texp_ident "f/554"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/utils.ml[5,61+25]..src/utils.ml[5,61+31])
                                        Texp_ident "Stdlib!.stdout"
                                  ]
                              <case>
                                pattern (src/utils.ml[6,93+4]..src/utils.ml[6,93+11])
                                  Tpat_value
                                  pattern (src/utils.ml[6,93+4]..src/utils.ml[6,93+11])
                                    Tpat_construct "Some"
                                    [
                                      pattern (src/utils.ml[6,93+9]..src/utils.ml[6,93+11])
                                        Tpat_var "fn/555"
                                    ]
                                expression (src/utils.ml[6,93+15]..src/utils.ml[6,93+50])
                                  Texp_apply
                                  expression (src/utils.ml[6,93+15]..src/utils.ml[6,93+36])
                                    Texp_ident "Ppxlib__!.Import.Out_channel.with_file"
                                  [
                                    <arg>
                                      Optional "binary"
                                      expression (src/utils.ml[6,93+41]..src/utils.ml[6,93+47])
                                        Texp_construct "Some"
                                        [
                                          expression (src/utils.ml[6,93+41]..src/utils.ml[6,93+47])
                                            Texp_ident "binary/553"
                                        ]
                                    <arg>
                                      Optional "append"
                                      expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                        Texp_construct "None"
                                        []
                                    <arg>
                                      Optional "fail_if_exists"
                                      expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                        Texp_construct "None"
                                        []
                                    <arg>
                                      Optional "perm"
                                      expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                        Texp_construct "None"
                                        []
                                    <arg>
                                      Nolabel
                                      expression (src/utils.ml[6,93+37]..src/utils.ml[6,93+39])
                                        Texp_ident "fn/555"
                                    <arg>
                                      Labelled "f"
                                      expression (src/utils.ml[6,93+49]..src/utils.ml[6,93+50])
                                        Texp_ident "f/554"
                                  ]
                            ]
                            []
                      ]
                ]
          ]
    ]
  structure_item (src/utils.ml[8,145+0]..src/utils.ml[18,480+3])
    Tstr_module
    Kind/647
      module_expr (src/utils.ml[8,145+14]..src/utils.ml[18,480+3])
        Tmod_structure
        [
          structure_item (src/utils.ml[9,166+2]..src/utils.ml[9,166+22])
            Tstr_type Rec
            [
              type_declaration t/605 (src/utils.ml[9,166+2]..src/utils.ml[9,166+22])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/utils.ml[9,166+11]..src/utils.ml[9,166+15])
                        Intf/606
                        []
                        None
                      (src/utils.ml[9,166+16]..src/utils.ml[9,166+22])
                        Impl/607
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[11,190+2]..src/utils.ml[14,350+13])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[11,190+6]..src/utils.ml[11,190+17])
                  Tpat_var "of_filename/608"
                expression (src/utils.ml[11,190+18]..src/utils.ml[14,350+13]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[11,190+18]..src/utils.ml[11,190+20])
                        Tpat_var "fn/610"
                      expression (src/utils.ml[12,224+4]..src/utils.ml[14,350+13])
                        Texp_constraint
                        core_type (src/utils.ml[11,190+23]..src/utils.ml[11,190+31])
                          Ttyp_constr "option/12!"
                          [
                            core_type (src/utils.ml[11,190+23]..src/utils.ml[11,190+24])
                              Ttyp_constr "t/605"
                              []
                          ]
                          Texp_ifthenelse
                          expression (src/utils.ml[12,224+7]..src/utils.ml[12,224+44])
                            Texp_apply
                            expression (src/utils.ml[12,224+7]..src/utils.ml[12,224+35])
                              Texp_ident "Stdlib!.Filename.check_suffix"
                            [
                              <arg>
                                Nolabel
                                expression (src/utils.ml[12,224+36]..src/utils.ml[12,224+38])
                                  Texp_ident "fn/610"
                              <arg>
                                Nolabel
                                expression (src/utils.ml[12,224+39]..src/utils.ml[12,224+44])
                                  Texp_constant Const_string(".ml",(src/utils.ml[12,224+40]..src/utils.ml[12,224+43]),None)
                            ]
                          expression (src/utils.ml[12,224+50]..src/utils.ml[12,224+59])
                            Texp_construct "Some"
                            [
                              expression (src/utils.ml[12,224+55]..src/utils.ml[12,224+59])
                                Texp_construct "Impl"
                                []
                            ]
                          Some
                            expression (src/utils.ml[13,284+9]..src/utils.ml[14,350+13])
                              Texp_ifthenelse
                              expression (src/utils.ml[13,284+12]..src/utils.ml[13,284+50])
                                Texp_apply
                                expression (src/utils.ml[13,284+12]..src/utils.ml[13,284+40])
                                  Texp_ident "Stdlib!.Filename.check_suffix"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[13,284+41]..src/utils.ml[13,284+43])
                                      Texp_ident "fn/610"
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[13,284+44]..src/utils.ml[13,284+50])
                                      Texp_constant Const_string(".mli",(src/utils.ml[13,284+45]..src/utils.ml[13,284+49]),None)
                                ]
                              expression (src/utils.ml[13,284+56]..src/utils.ml[13,284+65])
                                Texp_construct "Some"
                                [
                                  expression (src/utils.ml[13,284+61]..src/utils.ml[13,284+65])
                                    Texp_construct "Intf"
                                    []
                                ]
                              Some
                                expression (src/utils.ml[14,350+9]..src/utils.ml[14,350+13])
                                  Texp_construct "None"
                                  []
                  ]
            ]
          structure_item (src/utils.ml[16,365+2]..src/utils.ml[16,365+72])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[16,365+6]..src/utils.ml[16,365+14])
                  Tpat_var "describe/633"
                expression (src/utils.ml[16,365+17]..src/utils.ml[16,365+72])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[16,365+26]..src/utils.ml[16,365+30])
                        Tpat_construct "Impl"
                        []
                      expression (src/utils.ml[16,365+34]..src/utils.ml[16,365+50])
                        Texp_constant Const_string("implementation",(src/utils.ml[16,365+35]..src/utils.ml[16,365+49]),None)
                    <case>
                      pattern (src/utils.ml[16,365+53]..src/utils.ml[16,365+57])
                        Tpat_construct "Intf"
                        []
                      expression (src/utils.ml[16,365+61]..src/utils.ml[16,365+72])
                        Texp_constant Const_string("interface",(src/utils.ml[16,365+62]..src/utils.ml[16,365+71]),None)
                  ]
            ]
          structure_item (src/utils.ml[17,438+2]..src/utils.ml[17,438+41])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[17,438+6]..src/utils.ml[17,438+11])
                  Tpat_extra_constraint
                  core_type (src/utils.ml[17,438+14]..src/utils.ml[17,438+28]) ghost
                    Ttyp_poly
                    core_type (src/utils.ml[17,438+14]..src/utils.ml[17,438+28])
                      Ttyp_arrow
                      Nolabel
                      core_type (src/utils.ml[17,438+14]..src/utils.ml[17,438+15])
                        Ttyp_constr "t/605"
                        []
                      core_type (src/utils.ml[17,438+19]..src/utils.ml[17,438+28])
                        Ttyp_arrow
                        Nolabel
                        core_type (src/utils.ml[17,438+19]..src/utils.ml[17,438+20])
                          Ttyp_constr "t/605"
                          []
                        core_type (src/utils.ml[17,438+24]..src/utils.ml[17,438+28])
                          Ttyp_constr "bool/5!"
                          []
                  pattern (src/utils.ml[17,438+6]..src/utils.ml[17,438+11])
                    Tpat_var "equal/636"
                expression (src/utils.ml[17,438+31]..src/utils.ml[17,438+41])
                  Texp_constraint
                  core_type (src/utils.ml[17,438+14]..src/utils.ml[17,438+28])
                    Ttyp_arrow
                    Nolabel
                    core_type (src/utils.ml[17,438+14]..src/utils.ml[17,438+15])
                      Ttyp_constr "t/605"
                      []
                    core_type (src/utils.ml[17,438+19]..src/utils.ml[17,438+28])
                      Ttyp_arrow
                      Nolabel
                      core_type (src/utils.ml[17,438+19]..src/utils.ml[17,438+20])
                        Ttyp_constr "t/605"
                        []
                      core_type (src/utils.ml[17,438+24]..src/utils.ml[17,438+28])
                        Ttyp_constr "bool/5!"
                        []
                    Texp_ident "Ppxlib__!.Import.Poly.equal"
            ]
        ]
  structure_item (src/utils.ml[20,485+0]..src/utils.ml[34,942+3])
    Tstr_module
    Intf_or_impl/1687
      module_expr (src/utils.ml[20,485+22]..src/utils.ml[34,942+3])
        Tmod_structure
        [
          structure_item (src/utils.ml[21,514+2]..src/utils.ml[21,514+48])
            Tstr_type Rec
            [
              type_declaration t/648 (src/utils.ml[21,514+2]..src/utils.ml[21,514+48])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/utils.ml[21,514+11]..src/utils.ml[21,514+28])
                        Intf/649
                        [
                          core_type (src/utils.ml[21,514+19]..src/utils.ml[21,514+28])
                            Ttyp_constr "Ppxlib__!.Import.signature"
                            []
                        ]
                        None
                      (src/utils.ml[21,514+29]..src/utils.ml[21,514+48])
                        Impl/650
                        [
                          core_type (src/utils.ml[21,514+39]..src/utils.ml[21,514+48])
                            Ttyp_constr "Ppxlib__!.Import.structure"
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[23,564+2]..src/utils.ml[26,659+38])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[23,564+6]..src/utils.ml[23,564+9])
                  Tpat_var "map/651"
                expression (src/utils.ml[23,564+10]..src/utils.ml[26,659+38]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[23,564+10]..src/utils.ml[23,564+11])
                        Tpat_var "t/653"
                      expression (src/utils.ml[23,564+12]..src/utils.ml[26,659+38]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/utils.ml[23,564+13]..src/utils.ml[23,564+16])
                              Tpat_extra_constraint
                              core_type (src/utils.ml[23,564+19]..src/utils.ml[23,564+35])
                                Ttyp_constr "Ppxlib__!.Ast_traverse.map"
                                []
                              pattern (src/utils.ml[23,564+13]..src/utils.ml[23,564+16])
                                Tpat_alias "map/743"
                                pattern (src/utils.ml[23,564+13]..src/utils.ml[23,564+16])
                                  Tpat_any
                            expression (src/utils.ml[24,603+4]..src/utils.ml[26,659+38])
                              Texp_match
                              expression (src/utils.ml[24,603+10]..src/utils.ml[24,603+11])
                                Texp_ident "t/653"
                              [
                                <case>
                                  pattern (src/utils.ml[25,620+6]..src/utils.ml[25,620+12])
                                    Tpat_value
                                    pattern (src/utils.ml[25,620+6]..src/utils.ml[25,620+12])
                                      Tpat_construct "Impl"
                                      [
                                        pattern (src/utils.ml[25,620+11]..src/utils.ml[25,620+12])
                                          Tpat_var "x/744"
                                      ]
                                  expression (src/utils.ml[25,620+16]..src/utils.ml[25,620+38])
                                    Texp_construct "Impl"
                                    [
                                      expression (src/utils.ml[25,620+21]..src/utils.ml[25,620+38])
                                        Texp_apply
                                        expression (src/utils.ml[25,620+22]..src/utils.ml[25,620+35])
                                          Texp_send "structure"
                                          expression (src/utils.ml[25,620+22]..src/utils.ml[25,620+25])
                                            Texp_ident "map/743"
                                          None
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/utils.ml[25,620+36]..src/utils.ml[25,620+37])
                                              Texp_ident "x/744"
                                        ]
                                    ]
                                <case>
                                  pattern (src/utils.ml[26,659+6]..src/utils.ml[26,659+12])
                                    Tpat_value
                                    pattern (src/utils.ml[26,659+6]..src/utils.ml[26,659+12])
                                      Tpat_construct "Intf"
                                      [
                                        pattern (src/utils.ml[26,659+11]..src/utils.ml[26,659+12])
                                          Tpat_var "x/745"
                                      ]
                                  expression (src/utils.ml[26,659+16]..src/utils.ml[26,659+38])
                                    Texp_construct "Intf"
                                    [
                                      expression (src/utils.ml[26,659+21]..src/utils.ml[26,659+38])
                                        Texp_apply
                                        expression (src/utils.ml[26,659+22]..src/utils.ml[26,659+35])
                                          Texp_send "signature"
                                          expression (src/utils.ml[26,659+22]..src/utils.ml[26,659+25])
                                            Texp_ident "map/743"
                                          None
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/utils.ml[26,659+36]..src/utils.ml[26,659+37])
                                              Texp_ident "x/745"
                                        ]
                                    ]
                              ]
                              []
                        ]
                  ]
            ]
          structure_item (src/utils.ml[28,699+2]..src/utils.ml[31,830+42])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[28,699+6]..src/utils.ml[28,699+22])
                  Tpat_var "map_with_context/1678"
                expression (src/utils.ml[28,699+23]..src/utils.ml[31,830+42]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[28,699+23]..src/utils.ml[28,699+24])
                        Tpat_var "t/1680"
                      expression (src/utils.ml[28,699+25]..src/utils.ml[31,830+42]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/utils.ml[28,699+26]..src/utils.ml[28,699+29])
                              Tpat_extra_constraint
                              core_type (src/utils.ml[28,699+32]..src/utils.ml[28,699+63])
                                Ttyp_constr "Ppxlib__!.Ast_traverse.map_with_context"
                                [
                                  core_type (src/utils.ml[28,699+32]..src/utils.ml[28,699+33])
                                    Ttyp_any
                                ]
                              pattern (src/utils.ml[28,699+26]..src/utils.ml[28,699+29])
                                Tpat_alias "map/1681"
                                pattern (src/utils.ml[28,699+26]..src/utils.ml[28,699+29])
                                  Tpat_any
                            expression (src/utils.ml[28,699+65]..src/utils.ml[31,830+42]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/utils.ml[28,699+65]..src/utils.ml[28,699+68])
                                    Tpat_var "ctx/1682"
                                  expression (src/utils.ml[29,770+4]..src/utils.ml[31,830+42])
                                    Texp_match
                                    expression (src/utils.ml[29,770+10]..src/utils.ml[29,770+11])
                                      Texp_ident "t/1680"
                                    [
                                      <case>
                                        pattern (src/utils.ml[30,787+6]..src/utils.ml[30,787+12])
                                          Tpat_value
                                          pattern (src/utils.ml[30,787+6]..src/utils.ml[30,787+12])
                                            Tpat_construct "Impl"
                                            [
                                              pattern (src/utils.ml[30,787+11]..src/utils.ml[30,787+12])
                                                Tpat_var "x/1683"
                                            ]
                                        expression (src/utils.ml[30,787+16]..src/utils.ml[30,787+42])
                                          Texp_construct "Impl"
                                          [
                                            expression (src/utils.ml[30,787+21]..src/utils.ml[30,787+42])
                                              Texp_apply
                                              expression (src/utils.ml[30,787+22]..src/utils.ml[30,787+35])
                                                Texp_send "structure"
                                                expression (src/utils.ml[30,787+22]..src/utils.ml[30,787+25])
                                                  Texp_ident "map/1681"
                                                None
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/utils.ml[30,787+36]..src/utils.ml[30,787+39])
                                                    Texp_ident "ctx/1682"
                                                <arg>
                                                  Nolabel
                                                  expression (src/utils.ml[30,787+40]..src/utils.ml[30,787+41])
                                                    Texp_ident "x/1683"
                                              ]
                                          ]
                                      <case>
                                        pattern (src/utils.ml[31,830+6]..src/utils.ml[31,830+12])
                                          Tpat_value
                                          pattern (src/utils.ml[31,830+6]..src/utils.ml[31,830+12])
                                            Tpat_construct "Intf"
                                            [
                                              pattern (src/utils.ml[31,830+11]..src/utils.ml[31,830+12])
                                                Tpat_var "x/1684"
                                            ]
                                        expression (src/utils.ml[31,830+16]..src/utils.ml[31,830+42])
                                          Texp_construct "Intf"
                                          [
                                            expression (src/utils.ml[31,830+21]..src/utils.ml[31,830+42])
                                              Texp_apply
                                              expression (src/utils.ml[31,830+22]..src/utils.ml[31,830+35])
                                                Texp_send "signature"
                                                expression (src/utils.ml[31,830+22]..src/utils.ml[31,830+25])
                                                  Texp_ident "map/1681"
                                                None
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/utils.ml[31,830+36]..src/utils.ml[31,830+39])
                                                    Texp_ident "ctx/1682"
                                                <arg>
                                                  Nolabel
                                                  expression (src/utils.ml[31,830+40]..src/utils.ml[31,830+41])
                                                    Texp_ident "x/1684"
                                              ]
                                          ]
                                    ]
                                    []
                              ]
                        ]
                  ]
            ]
          structure_item (src/utils.ml[33,874+2]..src/utils.ml[33,874+67])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[33,874+6]..src/utils.ml[33,874+10])
                  Tpat_extra_constraint
                  core_type (src/utils.ml[33,874+13]..src/utils.ml[33,874+24]) ghost
                    Ttyp_poly
                    core_type (src/utils.ml[33,874+13]..src/utils.ml[33,874+24])
                      Ttyp_arrow
                      Nolabel
                      core_type (src/utils.ml[33,874+13]..src/utils.ml[33,874+14])
                        Ttyp_any
                      core_type (src/utils.ml[33,874+18]..src/utils.ml[33,874+24])
                        Ttyp_constr "Kind/647.t"
                        []
                  pattern (src/utils.ml[33,874+6]..src/utils.ml[33,874+10])
                    Tpat_var "kind/1685"
                expression (src/utils.ml[33,874+27]..src/utils.ml[33,874+67])
                  Texp_constraint
                  core_type (src/utils.ml[33,874+13]..src/utils.ml[33,874+24])
                    Ttyp_arrow
                    Nolabel
                    core_type (src/utils.ml[33,874+13]..src/utils.ml[33,874+14])
                      Ttyp_any
                    core_type (src/utils.ml[33,874+18]..src/utils.ml[33,874+24])
                      Ttyp_constr "Kind/647.t"
                      []
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/utils.ml[33,874+36]..src/utils.ml[33,874+42])
                          Tpat_construct "Intf"
                          [
                            pattern (src/utils.ml[33,874+41]..src/utils.ml[33,874+42])
                              Tpat_any
                          ]
                        expression (src/utils.ml[33,874+46]..src/utils.ml[33,874+50])
                          Texp_construct "Intf"
                          []
                      <case>
                        pattern (src/utils.ml[33,874+53]..src/utils.ml[33,874+59])
                          Tpat_construct "Impl"
                          [
                            pattern (src/utils.ml[33,874+58]..src/utils.ml[33,874+59])
                              Tpat_any
                          ]
                        expression (src/utils.ml[33,874+63]..src/utils.ml[33,874+67])
                          Texp_construct "Impl"
                          []
                    ]
            ]
        ]
  structure_item (src/utils.ml[36,947+0]..src/utils.ml[210,7748+3])
    Tstr_module
    Ast_io/4970
      module_expr (src/utils.ml[36,947+16]..src/utils.ml[210,7748+3])
        Tmod_structure
        [
          structure_item (src/utils.ml[37,970+2]..src/utils.ml[37,970+45])
            Tstr_type Rec
            [
              type_declaration input_version/1688 (src/utils.ml[37,970+2]..src/utils.ml[37,970+45])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (src/utils.ml[37,970+23]..src/utils.ml[37,970+45])
                      Ttyp_package "Ppxlib__!.Import.OCaml_version"
                      []
            ]
          structure_item (src/utils.ml[39,1017+2]..src/utils.ml[39,1017+73])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[39,1017+6]..src/utils.ml[39,1017+29])
                  Tpat_var "fall_back_input_version/1689"
                expression (src/utils.ml[39,1017+32]..src/utils.ml[39,1017+73]) ghost
                  Texp_constraint
                  core_type (src/utils.ml[39,1017+59]..src/utils.ml[39,1017+72])
                    Ttyp_package "Ppxlib__!.Import.OCaml_version"
                    []
                    Texp_pack                    module_expr (src/utils.ml[39,1017+40]..src/utils.ml[39,1017+56])
                      module_expr (src/utils.ml[39,1017+40]..src/utils.ml[39,1017+56])
                        module_expr (src/utils.ml[39,1017+40]..src/utils.ml[39,1017+56])
                          Tmod_ident "Ppxlib__!.Import.Compiler_version"
            ]
          structure_item (src/utils.ml[43,1213+2]..src/utils.ml[47,1312+3])
            Tstr_type Rec
            [
              type_declaration t/3578 (src/utils.ml[43,1213+2]..src/utils.ml[47,1312+3])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_record
                    [
                      (src/utils.ml[44,1226+4]..src/utils.ml[44,1226+24])
                        Immutable
                        input_name/3579                        core_type (src/utils.ml[44,1226+17]..src/utils.ml[44,1226+23])
                          Ttyp_poly
                          core_type (src/utils.ml[44,1226+17]..src/utils.ml[44,1226+23])
                            Ttyp_constr "string/17!"
                            []
                      (src/utils.ml[45,1251+4]..src/utils.ml[45,1251+34])
                        Immutable
                        input_version/3580                        core_type (src/utils.ml[45,1251+20]..src/utils.ml[45,1251+33])
                          Ttyp_poly
                          core_type (src/utils.ml[45,1251+20]..src/utils.ml[45,1251+33])
                            Ttyp_constr "input_version/1688"
                            []
                      (src/utils.ml[46,1286+4]..src/utils.ml[46,1286+25])
                        Immutable
                        ast/3581                        core_type (src/utils.ml[46,1286+10]..src/utils.ml[46,1286+24])
                          Ttyp_poly
                          core_type (src/utils.ml[46,1286+10]..src/utils.ml[46,1286+24])
                            Ttyp_constr "Intf_or_impl/1687.t"
                            []
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[49,1317+2]..src/utils.ml[53,1469+54])
            Tstr_type Rec
            [
              type_declaration read_error/3582 (src/utils.ml[49,1317+2]..src/utils.ml[53,1469+54])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/utils.ml[50,1337+4]..src/utils.ml[50,1337+22])
                        Not_a_binary_ast/3583
                        []
                        None
                      (src/utils.ml[51,1360+4]..src/utils.ml[51,1360+47])
                        Unknown_version/3584
                        [
                          core_type (src/utils.ml[51,1360+25]..src/utils.ml[51,1360+31])
                            Ttyp_constr "string/17!"
                            []
                          core_type (src/utils.ml[51,1360+34]..src/utils.ml[51,1360+47])
                            Ttyp_constr "input_version/1688"
                            []
                        ]
                        None
                      (src/utils.ml[52,1408+4]..src/utils.ml[52,1408+60])
                        Source_parse_error/3585
                        [
                          core_type (src/utils.ml[52,1408+28]..src/utils.ml[52,1408+44])
                            Ttyp_constr "Ppxlib__!.Location.Error.t"
                            []
                          core_type (src/utils.ml[52,1408+47]..src/utils.ml[52,1408+60])
                            Ttyp_constr "input_version/1688"
                            []
                        ]
                        None
                      (src/utils.ml[53,1469+4]..src/utils.ml[53,1469+54])
                        System_error/3634
                        [
                          core_type (src/utils.ml[53,1469+22]..src/utils.ml[53,1469+38])
                            Ttyp_constr "Ppxlib__!.Location.Error.t"
                            []
                          core_type (src/utils.ml[53,1469+41]..src/utils.ml[53,1469+54])
                            Ttyp_constr "input_version/1688"
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[55,1525+2]..src/utils.ml[55,1525+44])
            Tstr_type Rec
            [
              type_declaration input_source/3635 (src/utils.ml[55,1525+2]..src/utils.ml[55,1525+44])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/utils.ml[55,1525+22]..src/utils.ml[55,1525+27])
                        Stdin/3636
                        []
                        None
                      (src/utils.ml[55,1525+28]..src/utils.ml[55,1525+44])
                        File/3637
                        [
                          core_type (src/utils.ml[55,1525+38]..src/utils.ml[55,1525+44])
                            Ttyp_constr "string/17!"
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[56,1570+2]..src/utils.ml[56,1570+75])
            Tstr_type Rec
            [
              type_declaration input_kind/3638 (src/utils.ml[56,1570+2]..src/utils.ml[56,1570+75])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/utils.ml[56,1570+20]..src/utils.ml[56,1570+54])
                        Possibly_source/3639
                        [
                          core_type (src/utils.ml[56,1570+39]..src/utils.ml[56,1570+45])
                            Ttyp_constr "Kind/647.t"
                            []
                          core_type (src/utils.ml[56,1570+48]..src/utils.ml[56,1570+54])
                            Ttyp_constr "string/17!"
                            []
                        ]
                        None
                      (src/utils.ml[56,1570+55]..src/utils.ml[56,1570+75])
                        Necessarily_binary/3640
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/utils.ml[58,1647+2]..src/utils.ml[64,1928+76])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[58,1647+6]..src/utils.ml[58,1647+26])
                  Tpat_var "read_error_to_string/3641"
                expression (src/utils.ml[58,1647+27]..src/utils.ml[64,1928+76]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[58,1647+28]..src/utils.ml[58,1647+33])
                        Tpat_extra_constraint
                        core_type (src/utils.ml[58,1647+36]..src/utils.ml[58,1647+46])
                          Ttyp_constr "read_error/3582"
                          []
                        pattern (src/utils.ml[58,1647+28]..src/utils.ml[58,1647+33])
                          Tpat_alias "error/3643"
                          pattern (src/utils.ml[58,1647+28]..src/utils.ml[58,1647+33])
                            Tpat_any
                      expression (src/utils.ml[59,1697+4]..src/utils.ml[64,1928+76])
                        Texp_match
                        expression (src/utils.ml[59,1697+10]..src/utils.ml[59,1697+15])
                          Texp_ident "error/3643"
                        [
                          <case>
                            pattern (src/utils.ml[60,1718+6]..src/utils.ml[60,1718+22])
                              Tpat_value
                              pattern (src/utils.ml[60,1718+6]..src/utils.ml[60,1718+22])
                                Tpat_construct "Not_a_binary_ast"
                                []
                            expression (src/utils.ml[60,1718+26]..src/utils.ml[60,1718+51])
                              Texp_constant Const_string("Error: Not a binary ast",(src/utils.ml[60,1718+27]..src/utils.ml[60,1718+50]),None)
                          <case>
                            pattern (src/utils.ml[61,1770+6]..src/utils.ml[61,1770+28])
                              Tpat_value
                              pattern (src/utils.ml[61,1770+6]..src/utils.ml[61,1770+28])
                                Tpat_construct "Unknown_version"
                                [
                                  pattern (src/utils.ml[61,1770+23]..src/utils.ml[61,1770+24])
                                    Tpat_var "s/3644"
                                  pattern (src/utils.ml[61,1770+26]..src/utils.ml[61,1770+27])
                                    Tpat_any
                                ]
                            expression (src/utils.ml[61,1770+32]..src/utils.ml[61,1770+61])
                              Texp_apply
                              expression (src/utils.ml[61,1770+58]..src/utils.ml[61,1770+59])
                                Texp_ident "Stdlib!.^"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/utils.ml[61,1770+32]..src/utils.ml[61,1770+57])
                                    Texp_constant Const_string("Error: Unknown version ",(src/utils.ml[61,1770+33]..src/utils.ml[61,1770+56]),None)
                                <arg>
                                  Nolabel
                                  expression (src/utils.ml[61,1770+60]..src/utils.ml[61,1770+61])
                                    Texp_ident "s/3644"
                              ]
                          <case>
                            pattern (src/utils.ml[62,1832+6]..src/utils.ml[62,1832+33])
                              Tpat_value
                              pattern (src/utils.ml[62,1832+6]..src/utils.ml[62,1832+33])
                                Tpat_construct "Source_parse_error"
                                [
                                  pattern (src/utils.ml[62,1832+26]..src/utils.ml[62,1832+29])
                                    Tpat_var "loc/3645"
                                  pattern (src/utils.ml[62,1832+31]..src/utils.ml[62,1832+32])
                                    Tpat_any
                                ]
                            expression (src/utils.ml[63,1869+8]..src/utils.ml[63,1869+58])
                              Texp_apply
                              expression (src/utils.ml[63,1869+30]..src/utils.ml[63,1869+31])
                                Texp_ident "Stdlib!.^"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/utils.ml[63,1869+8]..src/utils.ml[63,1869+29])
                                    Texp_constant Const_string("Source parse error:",(src/utils.ml[63,1869+9]..src/utils.ml[63,1869+28]),None)
                                <arg>
                                  Nolabel
                                  expression (src/utils.ml[63,1869+32]..src/utils.ml[63,1869+58])
                                    Texp_apply
                                    expression (src/utils.ml[63,1869+32]..src/utils.ml[63,1869+54])
                                      Texp_ident "Ppxlib__!.Location.Error.message"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/utils.ml[63,1869+55]..src/utils.ml[63,1869+58])
                                          Texp_ident "loc/3645"
                                    ]
                              ]
                          <case>
                            pattern (src/utils.ml[64,1928+6]..src/utils.ml[64,1928+27])
                              Tpat_value
                              pattern (src/utils.ml[64,1928+6]..src/utils.ml[64,1928+27])
                                Tpat_construct "System_error"
                                [
                                  pattern (src/utils.ml[64,1928+20]..src/utils.ml[64,1928+23])
                                    Tpat_var "loc/3646"
                                  pattern (src/utils.ml[64,1928+25]..src/utils.ml[64,1928+26])
                                    Tpat_any
                                ]
                            expression (src/utils.ml[64,1928+31]..src/utils.ml[64,1928+76])
                              Texp_apply
                              expression (src/utils.ml[64,1928+48]..src/utils.ml[64,1928+49])
                                Texp_ident "Stdlib!.^"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/utils.ml[64,1928+31]..src/utils.ml[64,1928+47])
                                    Texp_constant Const_string("System error: ",(src/utils.ml[64,1928+32]..src/utils.ml[64,1928+46]),None)
                                <arg>
                                  Nolabel
                                  expression (src/utils.ml[64,1928+50]..src/utils.ml[64,1928+76])
                                    Texp_apply
                                    expression (src/utils.ml[64,1928+50]..src/utils.ml[64,1928+72])
                                      Texp_ident "Ppxlib__!.Location.Error.message"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/utils.ml[64,1928+73]..src/utils.ml[64,1928+76])
                                          Texp_ident "loc/3646"
                                    ]
                              ]
                        ]
                        []
                  ]
            ]
          structure_item (src/utils.ml[66,2006+2]..src/utils.ml[98,3457+72])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[66,2006+6]..src/utils.ml[66,2006+23])
                  Tpat_var "parse_source_code/3648"
                expression (src/utils.ml[66,2006+24]..src/utils.ml[98,3457+72]) ghost
                  Texp_function
                  Labelled "kind"
                  [
                    <case>
                      pattern (src/utils.ml[66,2006+26]..src/utils.ml[66,2006+30])
                        Tpat_extra_constraint
                        core_type (src/utils.ml[66,2006+33]..src/utils.ml[66,2006+39])
                          Ttyp_constr "Kind/647.t"
                          []
                        pattern (src/utils.ml[66,2006+26]..src/utils.ml[66,2006+30])
                          Tpat_alias "kind/3650"
                          pattern (src/utils.ml[66,2006+26]..src/utils.ml[66,2006+30])
                            Tpat_any
                      expression (src/utils.ml[66,2006+41]..src/utils.ml[98,3457+72]) ghost
                        Texp_function
                        Labelled "input_name"
                        [
                          <case>
                            pattern (src/utils.ml[66,2006+42]..src/utils.ml[66,2006+52])
                              Tpat_var "input_name/3651"
                            expression (src/utils.ml[66,2006+53]..src/utils.ml[98,3457+72]) ghost
                              Texp_function
                              Labelled "prefix_read_from_source"
                              [
                                <case>
                                  pattern (src/utils.ml[66,2006+54]..src/utils.ml[66,2006+77])
                                    Tpat_var "prefix_read_from_source/3652"
                                  expression (src/utils.ml[66,2006+78]..src/utils.ml[98,3457+72]) ghost
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/utils.ml[66,2006+78]..src/utils.ml[66,2006+80])
                                          Tpat_var "ic/3653"
                                        expression (src/utils.ml[70,2224+4]..src/utils.ml[98,3457+72])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/utils.ml[70,2224+8]..src/utils.ml[70,2224+21])
                                                Tpat_var "input_version/3654"
                                              expression (src/utils.ml[70,2224+24]..src/utils.ml[70,2224+65]) ghost
                                                Texp_constraint
                                                core_type (src/utils.ml[70,2224+51]..src/utils.ml[70,2224+64])
                                                  Ttyp_package "Ppxlib__!.Import.OCaml_version"
                                                  []
                                                  Texp_pack                                                  module_expr (src/utils.ml[70,2224+32]..src/utils.ml[70,2224+48])
                                                    module_expr (src/utils.ml[70,2224+32]..src/utils.ml[70,2224+48])
                                                      module_expr (src/utils.ml[70,2224+32]..src/utils.ml[70,2224+48])
                                                        Tmod_ident "Ppxlib__!.Import.Compiler_version"
                                          ]
                                          expression (src/utils.ml[71,2293+4]..src/utils.ml[98,3457+72])
                                            Texp_try
                                            expression (src/utils.ml[81,2761+6]..src/utils.ml[94,3326+43])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/utils.ml[81,2761+10]..src/utils.ml[81,2761+16])
                                                    Tpat_var "lexbuf/3659"
                                                  expression (src/utils.ml[81,2761+19]..src/utils.ml[81,2761+41])
                                                    Texp_apply
                                                    expression (src/utils.ml[81,2761+19]..src/utils.ml[81,2761+38])
                                                      Texp_ident "Stdlib!.Lexing.from_channel"
                                                    [
                                                      <arg>
                                                        Optional "with_positions"
                                                        expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                                          Texp_construct "None"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[81,2761+39]..src/utils.ml[81,2761+41])
                                                          Texp_ident "ic/3653"
                                                    ]
                                              ]
                                              expression (src/utils.ml[82,2806+6]..src/utils.ml[94,3326+43])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/utils.ml[82,2806+10]..src/utils.ml[82,2806+13])
                                                      Tpat_var "len/3690"
                                                    expression (src/utils.ml[82,2806+16]..src/utils.ml[82,2806+53])
                                                      Texp_apply
                                                      expression (src/utils.ml[82,2806+16]..src/utils.ml[82,2806+29])
                                                        Texp_ident "Ppxlib__!.Import.String.length"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[82,2806+30]..src/utils.ml[82,2806+53])
                                                            Texp_ident "prefix_read_from_source/3652"
                                                      ]
                                                ]
                                                expression (src/utils.ml[83,2863+6]..src/utils.ml[94,3326+43])
                                                  Texp_sequence
                                                  expression (src/utils.ml[83,2863+6]..src/utils.ml[84,2927+46])
                                                    Texp_apply
                                                    expression (src/utils.ml[83,2863+6]..src/utils.ml[83,2863+23])
                                                      Texp_ident "Ppxlib__!.Import.Bytes.blit_string"
                                                    [
                                                      <arg>
                                                        Labelled "src"
                                                        expression (src/utils.ml[83,2863+29]..src/utils.ml[83,2863+52])
                                                          Texp_ident "prefix_read_from_source/3652"
                                                      <arg>
                                                        Labelled "src_pos"
                                                        expression (src/utils.ml[83,2863+62]..src/utils.ml[83,2863+63])
                                                          Texp_constant Const_int 0
                                                      <arg>
                                                        Labelled "dst"
                                                        expression (src/utils.ml[84,2927+13]..src/utils.ml[84,2927+30])
                                                          Texp_field
                                                          expression (src/utils.ml[84,2927+13]..src/utils.ml[84,2927+19])
                                                            Texp_ident "lexbuf/3659"
                                                          "lex_buffer"
                                                      <arg>
                                                        Labelled "dst_pos"
                                                        expression (src/utils.ml[84,2927+40]..src/utils.ml[84,2927+41])
                                                          Texp_constant Const_int 0
                                                      <arg>
                                                        Labelled "len"
                                                        expression (src/utils.ml[84,2927+43]..src/utils.ml[84,2927+46])
                                                          Texp_ident "len/3690"
                                                    ]
                                                  expression (src/utils.ml[85,2975+6]..src/utils.ml[94,3326+43])
                                                    Texp_sequence
                                                    expression (src/utils.ml[85,2975+6]..src/utils.ml[85,2975+34])
                                                      Texp_setfield
                                                      expression (src/utils.ml[85,2975+6]..src/utils.ml[85,2975+12])
                                                        Texp_ident "lexbuf/3659"
                                                      "lex_buffer_len"
                                                      expression (src/utils.ml[85,2975+31]..src/utils.ml[85,2975+34])
                                                        Texp_ident "len/3690"
                                                    expression (src/utils.ml[86,3011+6]..src/utils.ml[94,3326+43])
                                                      Texp_sequence
                                                      expression (src/utils.ml[86,3011+6]..src/utils.ml[87,3038+75])
                                                        Texp_setfield
                                                        expression (src/utils.ml[86,3011+6]..src/utils.ml[86,3011+12])
                                                          Texp_ident "lexbuf/3659"
                                                        "lex_curr_p"
                                                        expression (src/utils.ml[87,3038+8]..src/utils.ml[87,3038+75])
                                                          Texp_record
                                                            fields =
                                                              [
                                                                "pos_fname"
                                                                  expression (src/utils.ml[87,3038+22]..src/utils.ml[87,3038+32])
                                                                    Texp_ident "input_name/3651"
                                                                "pos_lnum"
                                                                  expression (src/utils.ml[87,3038+45]..src/utils.ml[87,3038+46])
                                                                    Texp_constant Const_int 1
                                                                "pos_bol"
                                                                  expression (src/utils.ml[87,3038+58]..src/utils.ml[87,3038+59])
                                                                    Texp_constant Const_int 0
                                                                "pos_cnum"
                                                                  expression (src/utils.ml[87,3038+72]..src/utils.ml[87,3038+73])
                                                                    Texp_constant Const_int 0
                                                              ]
                                                            representation =
                                                              Record_regular
                                                            extended_expression =
                                                              None
                                                      expression (src/utils.ml[88,3115+6]..src/utils.ml[94,3326+43])
                                                        Texp_sequence
                                                        expression (src/utils.ml[88,3115+6]..src/utils.ml[88,3115+42])
                                                          Texp_apply
                                                          expression (src/utils.ml[88,3115+6]..src/utils.ml[88,3115+35])
                                                            Texp_ident "Ppxlib__!.Skip_hash_bang.skip_hash_bang"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/utils.ml[88,3115+36]..src/utils.ml[88,3115+42])
                                                                Texp_ident "lexbuf/3659"
                                                          ]
                                                        expression (src/utils.ml[89,3159+6]..src/utils.ml[94,3326+43])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/utils.ml[89,3159+10]..src/utils.ml[89,3159+13])
                                                                Tpat_extra_constraint
                                                                core_type (src/utils.ml[89,3159+16]..src/utils.ml[89,3159+30]) ghost
                                                                  Ttyp_poly
                                                                  core_type (src/utils.ml[89,3159+16]..src/utils.ml[89,3159+30])
                                                                    Ttyp_constr "Intf_or_impl/1687.t"
                                                                    []
                                                                pattern (src/utils.ml[89,3159+10]..src/utils.ml[89,3159+13])
                                                                  Tpat_var "ast/3933"
                                                              expression (src/utils.ml[90,3192+8]..src/utils.ml[92,3264+52])
                                                                Texp_constraint
                                                                core_type (src/utils.ml[89,3159+16]..src/utils.ml[89,3159+30])
                                                                  Ttyp_constr "Intf_or_impl/1687.t"
                                                                  []
                                                                  Texp_match
                                                                  expression (src/utils.ml[90,3192+14]..src/utils.ml[90,3192+18])
                                                                    Texp_ident "kind/3650"
                                                                  [
                                                                    <case>
                                                                      pattern (src/utils.ml[91,3216+10]..src/utils.ml[91,3216+14])
                                                                        Tpat_value
                                                                        pattern (src/utils.ml[91,3216+10]..src/utils.ml[91,3216+14])
                                                                          Tpat_construct "Intf"
                                                                          []
                                                                      expression (src/utils.ml[91,3216+18]..src/utils.ml[91,3216+47])
                                                                        Texp_construct "Intf"
                                                                        [
                                                                          expression (src/utils.ml[91,3216+23]..src/utils.ml[91,3216+47])
                                                                            Texp_apply
                                                                            expression (src/utils.ml[91,3216+24]..src/utils.ml[91,3216+39])
                                                                              Texp_ident "Ppxlib__!.Import.Parse.interface"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/utils.ml[91,3216+40]..src/utils.ml[91,3216+46])
                                                                                  Texp_ident "lexbuf/3659"
                                                                            ]
                                                                        ]
                                                                    <case>
                                                                      pattern (src/utils.ml[92,3264+10]..src/utils.ml[92,3264+14])
                                                                        Tpat_value
                                                                        pattern (src/utils.ml[92,3264+10]..src/utils.ml[92,3264+14])
                                                                          Tpat_construct "Impl"
                                                                          []
                                                                      expression (src/utils.ml[92,3264+18]..src/utils.ml[92,3264+52])
                                                                        Texp_construct "Impl"
                                                                        [
                                                                          expression (src/utils.ml[92,3264+23]..src/utils.ml[92,3264+52])
                                                                            Texp_apply
                                                                            expression (src/utils.ml[92,3264+24]..src/utils.ml[92,3264+44])
                                                                              Texp_ident "Ppxlib__!.Import.Parse.implementation"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/utils.ml[92,3264+45]..src/utils.ml[92,3264+51])
                                                                                  Texp_ident "lexbuf/3659"
                                                                            ]
                                                                        ]
                                                                  ]
                                                                  []
                                                          ]
                                                          expression (src/utils.ml[94,3326+6]..src/utils.ml[94,3326+43])
                                                            Texp_construct "Ok"
                                                            [
                                                              expression (src/utils.ml[94,3326+9]..src/utils.ml[94,3326+43])
                                                                Texp_record
                                                                  fields =
                                                                    [
                                                                      "input_name"
                                                                        expression (src/utils.ml[94,3326+11]..src/utils.ml[94,3326+21]) ghost
                                                                          Texp_ident "input_name/3651"
                                                                      "input_version"
                                                                        expression (src/utils.ml[94,3326+23]..src/utils.ml[94,3326+36]) ghost
                                                                          Texp_ident "input_version/3654"
                                                                      "ast"
                                                                        expression (src/utils.ml[94,3326+38]..src/utils.ml[94,3326+41]) ghost
                                                                          Texp_ident "ast/3933"
                                                                    ]
                                                                  representation =
                                                                    Record_regular
                                                                  extended_expression =
                                                                    None
                                                            ]
                                            [
                                              <case>
                                                pattern (src/utils.ml[95,3370+9]..src/utils.ml[95,3370+12])
                                                  Tpat_var "exn/4219"
                                                expression (src/utils.ml[95,3370+16]..src/utils.ml[98,3457+72])
                                                  Texp_match
                                                  expression (src/utils.ml[96,3388+12]..src/utils.ml[96,3388+37])
                                                    Texp_apply
                                                    expression (src/utils.ml[96,3388+12]..src/utils.ml[96,3388+33])
                                                      Texp_ident "Ppxlib__!.Location.Error.of_exn"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[96,3388+34]..src/utils.ml[96,3388+37])
                                                          Texp_ident "exn/4219"
                                                    ]
                                                  [
                                                    <case>
                                                      pattern (src/utils.ml[97,3431+8]..src/utils.ml[97,3431+12])
                                                        Tpat_value
                                                        pattern (src/utils.ml[97,3431+8]..src/utils.ml[97,3431+12])
                                                          Tpat_construct "None"
                                                          []
                                                      expression (src/utils.ml[97,3431+16]..src/utils.ml[97,3431+25])
                                                        Texp_apply
                                                        expression (src/utils.ml[97,3431+16]..src/utils.ml[97,3431+21])
                                                          Texp_ident "Stdlib!.raise"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/utils.ml[97,3431+22]..src/utils.ml[97,3431+25])
                                                              Texp_ident "exn/4219"
                                                        ]
                                                    <case>
                                                      pattern (src/utils.ml[98,3457+8]..src/utils.ml[98,3457+18])
                                                        Tpat_value
                                                        pattern (src/utils.ml[98,3457+8]..src/utils.ml[98,3457+18])
                                                          Tpat_construct "Some"
                                                          [
                                                            pattern (src/utils.ml[98,3457+13]..src/utils.ml[98,3457+18])
                                                              Tpat_var "error/4220"
                                                          ]
                                                      expression (src/utils.ml[98,3457+22]..src/utils.ml[98,3457+71])
                                                        Texp_construct "Error"
                                                        [
                                                          expression (src/utils.ml[98,3457+28]..src/utils.ml[98,3457+71])
                                                            Texp_construct "Source_parse_error"
                                                            [
                                                              expression (src/utils.ml[98,3457+49]..src/utils.ml[98,3457+54])
                                                                Texp_ident "error/4220"
                                                              expression (src/utils.ml[98,3457+56]..src/utils.ml[98,3457+69])
                                                                Texp_ident "input_version/3654"
                                                            ]
                                                        ]
                                                  ]
                                                  []
                                            ]
                                            []
                                    ]
                              ]
                        ]
                  ]
            ]
          structure_item (src/utils.ml[100,3531+2]..src/utils.ml[100,3531+70])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[100,3531+6]..src/utils.ml[100,3531+18])
                  Tpat_var "magic_length/4223"
                expression (src/utils.ml[100,3531+21]..src/utils.ml[100,3531+70])
                  Texp_apply
                  expression (src/utils.ml[100,3531+21]..src/utils.ml[100,3531+34])
                    Texp_ident "Ppxlib__!.Import.String.length"
                  [
                    <arg>
                      Nolabel
                      expression (src/utils.ml[100,3531+35]..src/utils.ml[100,3531+70])
                        Texp_ident "Astlib!.Config.ast_impl_magic_number"
                  ]
            ]
          structure_item (src/utils.ml[102,3603+2]..src/utils.ml[106,3761+48])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[102,3603+6]..src/utils.ml[102,3603+16])
                  Tpat_var "read_magic/4327"
                expression (src/utils.ml[102,3603+17]..src/utils.ml[106,3761+48]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[102,3603+17]..src/utils.ml[102,3603+19])
                        Tpat_var "ic/4329"
                      expression (src/utils.ml[103,3625+4]..src/utils.ml[106,3761+48])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/utils.ml[103,3625+8]..src/utils.ml[103,3625+11])
                              Tpat_var "buf/4330"
                            expression (src/utils.ml[103,3625+14]..src/utils.ml[103,3625+39])
                              Texp_apply
                              expression (src/utils.ml[103,3625+14]..src/utils.ml[103,3625+26])
                                Texp_ident "Ppxlib__!.Import.Bytes.create"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/utils.ml[103,3625+27]..src/utils.ml[103,3625+39])
                                    Texp_ident "magic_length/4223"
                              ]
                        ]
                        expression (src/utils.ml[104,3668+4]..src/utils.ml[106,3761+48])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/utils.ml[104,3668+8]..src/utils.ml[104,3668+11])
                                Tpat_var "len/4331"
                              expression (src/utils.ml[104,3668+14]..src/utils.ml[104,3668+41])
                                Texp_apply
                                expression (src/utils.ml[104,3668+14]..src/utils.ml[104,3668+19])
                                  Texp_ident "Stdlib!.input"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[104,3668+20]..src/utils.ml[104,3668+22])
                                      Texp_ident "ic/4329"
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[104,3668+23]..src/utils.ml[104,3668+26])
                                      Texp_ident "buf/4330"
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[104,3668+27]..src/utils.ml[104,3668+28])
                                      Texp_constant Const_int 0
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[104,3668+29]..src/utils.ml[104,3668+41])
                                      Texp_ident "magic_length/4223"
                                ]
                          ]
                          expression (src/utils.ml[105,3713+4]..src/utils.ml[106,3761+48])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/utils.ml[105,3713+8]..src/utils.ml[105,3713+9])
                                  Tpat_var "s/4332"
                                expression (src/utils.ml[105,3713+12]..src/utils.ml[105,3713+44])
                                  Texp_apply
                                  expression (src/utils.ml[105,3713+12]..src/utils.ml[105,3713+28])
                                    Texp_ident "Ppxlib__!.Import.Bytes.sub_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/utils.ml[105,3713+29]..src/utils.ml[105,3713+32])
                                        Texp_ident "buf/4330"
                                    <arg>
                                      Labelled "pos"
                                      expression (src/utils.ml[105,3713+38]..src/utils.ml[105,3713+39])
                                        Texp_constant Const_int 0
                                    <arg>
                                      Labelled "len"
                                      expression (src/utils.ml[105,3713+41]..src/utils.ml[105,3713+44])
                                        Texp_ident "len/4331"
                                  ]
                            ]
                            expression (src/utils.ml[106,3761+4]..src/utils.ml[106,3761+48])
                              Texp_ifthenelse
                              expression (src/utils.ml[106,3761+7]..src/utils.ml[106,3761+25])
                                Texp_apply
                                expression (src/utils.ml[106,3761+11]..src/utils.ml[106,3761+12])
                                  Texp_ident "Ppxlib__!.Import.="
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[106,3761+7]..src/utils.ml[106,3761+10])
                                      Texp_ident "len/4331"
                                  <arg>
                                    Nolabel
                                    expression (src/utils.ml[106,3761+13]..src/utils.ml[106,3761+25])
                                      Texp_ident "magic_length/4223"
                                ]
                              expression (src/utils.ml[106,3761+31]..src/utils.ml[106,3761+35])
                                Texp_construct "Ok"
                                [
                                  expression (src/utils.ml[106,3761+34]..src/utils.ml[106,3761+35])
                                    Texp_ident "s/4332"
                                ]
                              Some
                                expression (src/utils.ml[106,3761+41]..src/utils.ml[106,3761+48])
                                  Texp_construct "Error"
                                  [
                                    expression (src/utils.ml[106,3761+47]..src/utils.ml[106,3761+48])
                                      Texp_ident "s/4332"
                                  ]
                  ]
            ]
          structure_item (src/utils.ml[108,3811+2]..src/utils.ml[150,5599+37])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[108,3811+6]..src/utils.ml[108,3811+18])
                  Tpat_var "from_channel/4333"
                expression (src/utils.ml[108,3811+19]..src/utils.ml[150,5599+37]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[108,3811+19]..src/utils.ml[108,3811+21])
                        Tpat_var "ch/4335"
                      expression (src/utils.ml[108,3811+22]..src/utils.ml[150,5599+37]) ghost
                        Texp_function
                        Labelled "input_kind"
                        [
                          <case>
                            pattern (src/utils.ml[108,3811+23]..src/utils.ml[108,3811+33])
                              Tpat_var "input_kind/4336"
                            expression (src/utils.ml[109,3847+4]..src/utils.ml[150,5599+37])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/utils.ml[109,3847+8]..src/utils.ml[109,3847+25])
                                    Tpat_var "handle_non_binary/4337"
                                  expression (src/utils.ml[109,3847+26]..src/utils.ml[113,4047+52]) ghost
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/utils.ml[109,3847+26]..src/utils.ml[109,3847+49])
                                          Tpat_var "prefix_read_from_source/4339"
                                        expression (src/utils.ml[110,3899+6]..src/utils.ml[113,4047+52])
                                          Texp_match
                                          expression (src/utils.ml[110,3899+12]..src/utils.ml[110,3899+22])
                                            Texp_ident "input_kind/4336"
                                          [
                                            <case>
                                              pattern (src/utils.ml[111,3927+8]..src/utils.ml[111,3927+42])
                                                Tpat_value
                                                pattern (src/utils.ml[111,3927+8]..src/utils.ml[111,3927+42])
                                                  Tpat_construct "Possibly_source"
                                                  [
                                                    pattern (src/utils.ml[111,3927+25]..src/utils.ml[111,3927+29])
                                                      Tpat_var "kind/4340"
                                                    pattern (src/utils.ml[111,3927+31]..src/utils.ml[111,3927+41])
                                                      Tpat_var "input_name/4341"
                                                  ]
                                              expression (src/utils.ml[112,3973+10]..src/utils.ml[112,3973+73])
                                                Texp_apply
                                                expression (src/utils.ml[112,3973+10]..src/utils.ml[112,3973+27])
                                                  Texp_ident "parse_source_code/3648"
                                                [
                                                  <arg>
                                                    Labelled "kind"
                                                    expression (src/utils.ml[112,3973+29]..src/utils.ml[112,3973+33])
                                                      Texp_ident "kind/4340"
                                                  <arg>
                                                    Labelled "input_name"
                                                    expression (src/utils.ml[112,3973+35]..src/utils.ml[112,3973+45])
                                                      Texp_ident "input_name/4341"
                                                  <arg>
                                                    Labelled "prefix_read_from_source"
                                                    expression (src/utils.ml[112,3973+47]..src/utils.ml[112,3973+70])
                                                      Texp_ident "prefix_read_from_source/4339"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/utils.ml[112,3973+71]..src/utils.ml[112,3973+73])
                                                      Texp_ident "ch/4335"
                                                ]
                                            <case>
                                              pattern (src/utils.ml[113,4047+8]..src/utils.ml[113,4047+26])
                                                Tpat_value
                                                pattern (src/utils.ml[113,4047+8]..src/utils.ml[113,4047+26])
                                                  Tpat_construct "Necessarily_binary"
                                                  []
                                              expression (src/utils.ml[113,4047+30]..src/utils.ml[113,4047+52])
                                                Texp_construct "Error"
                                                [
                                                  expression (src/utils.ml[113,4047+36]..src/utils.ml[113,4047+52])
                                                    Texp_construct "Not_a_binary_ast"
                                                    []
                                                ]
                                          ]
                                          []
                                    ]
                              ]
                              expression (src/utils.ml[115,4107+4]..src/utils.ml[150,5599+37])
                                Texp_match
                                expression (src/utils.ml[115,4107+10]..src/utils.ml[115,4107+23])
                                  Texp_apply
                                  expression (src/utils.ml[115,4107+10]..src/utils.ml[115,4107+20])
                                    Texp_ident "read_magic/4327"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/utils.ml[115,4107+21]..src/utils.ml[115,4107+23])
                                        Texp_ident "ch/4335"
                                  ]
                                [
                                  <case>
                                    pattern (src/utils.ml[116,4136+6]..src/utils.ml[116,4136+13])
                                      Tpat_value
                                      pattern (src/utils.ml[116,4136+6]..src/utils.ml[116,4136+13])
                                        Tpat_construct "Error"
                                        [
                                          pattern (src/utils.ml[116,4136+12]..src/utils.ml[116,4136+13])
                                            Tpat_var "s/4342"
                                        ]
                                    expression (src/utils.ml[116,4136+17]..src/utils.ml[116,4136+36])
                                      Texp_apply
                                      expression (src/utils.ml[116,4136+17]..src/utils.ml[116,4136+34])
                                        Texp_ident "handle_non_binary/4337"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/utils.ml[116,4136+35]..src/utils.ml[116,4136+36])
                                            Texp_ident "s/4342"
                                      ]
                                  <case>
                                    pattern (src/utils.ml[117,4173+6]..src/utils.ml[117,4173+10])
                                      Tpat_value
                                      pattern (src/utils.ml[117,4173+6]..src/utils.ml[117,4173+10])
                                        Tpat_construct "Ok"
                                        [
                                          pattern (src/utils.ml[117,4173+9]..src/utils.ml[117,4173+10])
                                            Tpat_var "s/4343"
                                        ]
                                    expression (src/utils.ml[117,4173+14]..src/utils.ml[150,5599+37])
                                      Texp_match
                                      expression (src/utils.ml[118,4189+14]..src/utils.ml[118,4189+39])
                                        Texp_apply
                                        expression (src/utils.ml[118,4189+14]..src/utils.ml[118,4189+37])
                                          Texp_ident "Ppxlib__!.Import.Find_version.from_magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/utils.ml[118,4189+38]..src/utils.ml[118,4189+39])
                                              Texp_ident "s/4343"
                                        ]
                                      [
                                        <case>
                                          pattern (src/utils.ml[119,4234+10]..src/utils.ml[119,4234+53])
                                            Tpat_value
                                            pattern (src/utils.ml[119,4234+10]..src/utils.ml[119,4234+53])
                                              Tpat_construct "Intf"
                                              [
                                                pattern (src/utils.ml[119,4234+23]..src/utils.ml[119,4234+36])
                                                  Tpat_extra_constraint
                                                  core_type (src/utils.ml[119,4234+39]..src/utils.ml[119,4234+52])
                                                    Ttyp_package "Ppxlib__!.Import.OCaml_version"
                                                    []
                                                  pattern (src/utils.ml[119,4234+23]..src/utils.ml[119,4234+36])
                                                    Tpat_alias "Input_version/4384"
                                                    pattern (src/utils.ml[119,4234+23]..src/utils.ml[119,4234+36])
                                                      Tpat_extra_unpack
                                                      pattern (src/utils.ml[119,4234+23]..src/utils.ml[119,4234+36])
                                                        Tpat_any
                                              ]
                                          expression (src/utils.ml[120,4291+12]..src/utils.ml[129,4692+15]) ghost
                                            attribute "#modulepat"
                                              []
                                            Texp_letmodule "Input_version/4388"
                                            module_expr (src/utils.ml[119,4234+23]..src/utils.ml[119,4234+36])
                                              Tmod_unpack
                                              expression (src/utils.ml[119,4234+23]..src/utils.ml[119,4234+36])
                                                Texp_ident "Input_version/4384"
                                            expression (src/utils.ml[120,4291+12]..src/utils.ml[129,4692+15])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/utils.ml[120,4291+16]..src/utils.ml[120,4291+26])
                                                    Tpat_extra_constraint
                                                    core_type (src/utils.ml[120,4291+29]..src/utils.ml[120,4291+35]) ghost
                                                      Ttyp_poly
                                                      core_type (src/utils.ml[120,4291+29]..src/utils.ml[120,4291+35])
                                                        Ttyp_constr "string/17!"
                                                        []
                                                    pattern (src/utils.ml[120,4291+16]..src/utils.ml[120,4291+26])
                                                      Tpat_var "input_name/4389"
                                                  expression (src/utils.ml[120,4291+38]..src/utils.ml[120,4291+52])
                                                    Texp_constraint
                                                    core_type (src/utils.ml[120,4291+29]..src/utils.ml[120,4291+35])
                                                      Ttyp_constr "string/17!"
                                                      []
                                                      Texp_apply
                                                      expression (src/utils.ml[120,4291+38]..src/utils.ml[120,4291+49])
                                                        Texp_ident "Stdlib!.input_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[120,4291+50]..src/utils.ml[120,4291+52])
                                                            Texp_ident "ch/4335"
                                                      ]
                                              ]
                                              expression (src/utils.ml[121,4347+12]..src/utils.ml[129,4692+15])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/utils.ml[121,4347+16]..src/utils.ml[121,4347+19])
                                                      Tpat_var "ast/4390"
                                                    expression (src/utils.ml[121,4347+22]..src/utils.ml[121,4347+36])
                                                      Texp_apply
                                                      expression (src/utils.ml[121,4347+22]..src/utils.ml[121,4347+33])
                                                        Texp_ident "Stdlib!.input_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[121,4347+34]..src/utils.ml[121,4347+36])
                                                            Texp_ident "ch/4335"
                                                      ]
                                                ]
                                                expression (src/utils.ml[122,4387+12]..src/utils.ml[129,4692+15])
                                                  Texp_letmodule "Input_to_ppxlib/4453"
                                                  module_expr (src/utils.ml[122,4387+41]..src/utils.ml[122,4387+69])
                                                    Tmod_apply
                                                    module_expr (src/utils.ml[122,4387+41]..src/utils.ml[122,4387+64])
                                                      Tmod_apply
                                                      module_expr (src/utils.ml[122,4387+41]..src/utils.ml[122,4387+48])
                                                        module_expr (src/utils.ml[122,4387+41]..src/utils.ml[122,4387+48])
                                                          Tmod_ident "Ppxlib__!.Import.Convert"
                                                      module_expr (src/utils.ml[122,4387+50]..src/utils.ml[122,4387+63])
                                                        Tmod_ident "Input_version/4388"
                                                    module_expr (src/utils.ml[122,4387+66]..src/utils.ml[122,4387+68])
                                                      module_expr (src/utils.ml[122,4387+66]..src/utils.ml[122,4387+68])
                                                        Tmod_ident "Ppxlib__!.Import.Js"
                                                  expression (src/utils.ml[123,4460+12]..src/utils.ml[129,4692+15])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/utils.ml[123,4460+16]..src/utils.ml[123,4460+19])
                                                          Tpat_var "ast/4454"
                                                        expression (src/utils.ml[123,4460+22]..src/utils.ml[123,4460+76])
                                                          Texp_construct "Intf_or_impl.Intf"
                                                          [
                                                            expression (src/utils.ml[123,4460+40]..src/utils.ml[123,4460+76])
                                                              Texp_apply
                                                              expression (src/utils.ml[123,4460+41]..src/utils.ml[123,4460+71])
                                                                Texp_ident "Input_to_ppxlib/4453.copy_signature"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/utils.ml[123,4460+72]..src/utils.ml[123,4460+75])
                                                                    Texp_ident "ast/4390"
                                                              ]
                                                          ]
                                                    ]
                                                    expression (src/utils.ml[124,4540+12]..src/utils.ml[129,4692+15])
                                                      Texp_construct "Ok"
                                                      [
                                                        expression (src/utils.ml[125,4555+14]..src/utils.ml[129,4692+15])
                                                          Texp_record
                                                            fields =
                                                              [
                                                                "input_name"
                                                                  expression (src/utils.ml[126,4571+16]..src/utils.ml[126,4571+26]) ghost
                                                                    Texp_ident "input_name/4389"
                                                                "input_version"
                                                                  expression (src/utils.ml[127,4599+32]..src/utils.ml[127,4599+70]) ghost
                                                                    Texp_constraint
                                                                    core_type (src/utils.ml[127,4599+56]..src/utils.ml[127,4599+69])
                                                                      Ttyp_package "Ppxlib__!.Import.OCaml_version"
                                                                      []
                                                                      Texp_pack                                                                      module_expr (src/utils.ml[127,4599+40]..src/utils.ml[127,4599+53])
                                                                        module_expr (src/utils.ml[127,4599+40]..src/utils.ml[127,4599+53])
                                                                          Tmod_ident "Input_version/4388"
                                                                "ast"
                                                                  expression (src/utils.ml[128,4671+16]..src/utils.ml[128,4671+19]) ghost
                                                                    Texp_ident "ast/4454"
                                                              ]
                                                            representation =
                                                              Record_regular
                                                            extended_expression =
                                                              None
                                                      ]
                                        <case>
                                          pattern (src/utils.ml[130,4708+10]..src/utils.ml[130,4708+53])
                                            Tpat_value
                                            pattern (src/utils.ml[130,4708+10]..src/utils.ml[130,4708+53])
                                              Tpat_construct "Impl"
                                              [
                                                pattern (src/utils.ml[130,4708+23]..src/utils.ml[130,4708+36])
                                                  Tpat_extra_constraint
                                                  core_type (src/utils.ml[130,4708+39]..src/utils.ml[130,4708+52])
                                                    Ttyp_package "Ppxlib__!.Import.OCaml_version"
                                                    []
                                                  pattern (src/utils.ml[130,4708+23]..src/utils.ml[130,4708+36])
                                                    Tpat_alias "Input_version/4387"
                                                    pattern (src/utils.ml[130,4708+23]..src/utils.ml[130,4708+36])
                                                      Tpat_extra_unpack
                                                      pattern (src/utils.ml[130,4708+23]..src/utils.ml[130,4708+36])
                                                        Tpat_any
                                              ]
                                          expression (src/utils.ml[131,4765+12]..src/utils.ml[140,5166+15]) ghost
                                            attribute "#modulepat"
                                              []
                                            Texp_letmodule "Input_version/4558"
                                            module_expr (src/utils.ml[130,4708+23]..src/utils.ml[130,4708+36])
                                              Tmod_unpack
                                              expression (src/utils.ml[130,4708+23]..src/utils.ml[130,4708+36])
                                                Texp_ident "Input_version/4387"
                                            expression (src/utils.ml[131,4765+12]..src/utils.ml[140,5166+15])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/utils.ml[131,4765+16]..src/utils.ml[131,4765+26])
                                                    Tpat_extra_constraint
                                                    core_type (src/utils.ml[131,4765+29]..src/utils.ml[131,4765+35]) ghost
                                                      Ttyp_poly
                                                      core_type (src/utils.ml[131,4765+29]..src/utils.ml[131,4765+35])
                                                        Ttyp_constr "string/17!"
                                                        []
                                                    pattern (src/utils.ml[131,4765+16]..src/utils.ml[131,4765+26])
                                                      Tpat_var "input_name/4559"
                                                  expression (src/utils.ml[131,4765+38]..src/utils.ml[131,4765+52])
                                                    Texp_constraint
                                                    core_type (src/utils.ml[131,4765+29]..src/utils.ml[131,4765+35])
                                                      Ttyp_constr "string/17!"
                                                      []
                                                      Texp_apply
                                                      expression (src/utils.ml[131,4765+38]..src/utils.ml[131,4765+49])
                                                        Texp_ident "Stdlib!.input_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[131,4765+50]..src/utils.ml[131,4765+52])
                                                            Texp_ident "ch/4335"
                                                      ]
                                              ]
                                              expression (src/utils.ml[132,4821+12]..src/utils.ml[140,5166+15])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/utils.ml[132,4821+16]..src/utils.ml[132,4821+19])
                                                      Tpat_var "ast/4560"
                                                    expression (src/utils.ml[132,4821+22]..src/utils.ml[132,4821+36])
                                                      Texp_apply
                                                      expression (src/utils.ml[132,4821+22]..src/utils.ml[132,4821+33])
                                                        Texp_ident "Stdlib!.input_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[132,4821+34]..src/utils.ml[132,4821+36])
                                                            Texp_ident "ch/4335"
                                                      ]
                                                ]
                                                expression (src/utils.ml[133,4861+12]..src/utils.ml[140,5166+15])
                                                  Texp_letmodule "Input_to_ppxlib/4600"
                                                  module_expr (src/utils.ml[133,4861+41]..src/utils.ml[133,4861+69])
                                                    Tmod_apply
                                                    module_expr (src/utils.ml[133,4861+41]..src/utils.ml[133,4861+64])
                                                      Tmod_apply
                                                      module_expr (src/utils.ml[133,4861+41]..src/utils.ml[133,4861+48])
                                                        module_expr (src/utils.ml[133,4861+41]..src/utils.ml[133,4861+48])
                                                          Tmod_ident "Ppxlib__!.Import.Convert"
                                                      module_expr (src/utils.ml[133,4861+50]..src/utils.ml[133,4861+63])
                                                        Tmod_ident "Input_version/4558"
                                                    module_expr (src/utils.ml[133,4861+66]..src/utils.ml[133,4861+68])
                                                      module_expr (src/utils.ml[133,4861+66]..src/utils.ml[133,4861+68])
                                                        Tmod_ident "Ppxlib__!.Import.Js"
                                                  expression (src/utils.ml[134,4934+12]..src/utils.ml[140,5166+15])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/utils.ml[134,4934+16]..src/utils.ml[134,4934+19])
                                                          Tpat_var "ast/4601"
                                                        expression (src/utils.ml[134,4934+22]..src/utils.ml[134,4934+76])
                                                          Texp_construct "Intf_or_impl.Impl"
                                                          [
                                                            expression (src/utils.ml[134,4934+40]..src/utils.ml[134,4934+76])
                                                              Texp_apply
                                                              expression (src/utils.ml[134,4934+41]..src/utils.ml[134,4934+71])
                                                                Texp_ident "Input_to_ppxlib/4600.copy_structure"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/utils.ml[134,4934+72]..src/utils.ml[134,4934+75])
                                                                    Texp_ident "ast/4560"
                                                              ]
                                                          ]
                                                    ]
                                                    expression (src/utils.ml[135,5014+12]..src/utils.ml[140,5166+15])
                                                      Texp_construct "Ok"
                                                      [
                                                        expression (src/utils.ml[136,5029+14]..src/utils.ml[140,5166+15])
                                                          Texp_record
                                                            fields =
                                                              [
                                                                "input_name"
                                                                  expression (src/utils.ml[137,5045+16]..src/utils.ml[137,5045+26]) ghost
                                                                    Texp_ident "input_name/4559"
                                                                "input_version"
                                                                  expression (src/utils.ml[138,5073+32]..src/utils.ml[138,5073+70]) ghost
                                                                    Texp_constraint
                                                                    core_type (src/utils.ml[138,5073+56]..src/utils.ml[138,5073+69])
                                                                      Ttyp_package "Ppxlib__!.Import.OCaml_version"
                                                                      []
                                                                      Texp_pack                                                                      module_expr (src/utils.ml[138,5073+40]..src/utils.ml[138,5073+53])
                                                                        module_expr (src/utils.ml[138,5073+40]..src/utils.ml[138,5073+53])
                                                                          Tmod_ident "Input_version/4558"
                                                                "ast"
                                                                  expression (src/utils.ml[139,5145+16]..src/utils.ml[139,5145+19]) ghost
                                                                    Texp_ident "ast/4601"
                                                              ]
                                                            representation =
                                                              Record_regular
                                                            extended_expression =
                                                              None
                                                      ]
                                        <case>
                                          pattern (src/utils.ml[141,5182+10]..src/utils.ml[141,5182+17])
                                            Tpat_value
                                            pattern (src/utils.ml[141,5182+10]..src/utils.ml[141,5182+17])
                                              Tpat_construct "Unknown"
                                              []
                                          expression (src/utils.ml[142,5203+12]..src/utils.ml[150,5599+36])
                                            Texp_ifthenelse
                                            expression (src/utils.ml[143,5218+14]..src/utils.ml[148,5447+81])
                                              Texp_apply
                                              expression (src/utils.ml[146,5369+14]..src/utils.ml[146,5369+16])
                                                Texp_ident "Stdlib!.||"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/utils.ml[143,5218+14]..src/utils.ml[145,5290+78])
                                                    Texp_apply
                                                    expression (src/utils.ml[143,5218+14]..src/utils.ml[143,5218+26])
                                                      Texp_ident "Ppxlib__!.Import.String.equal"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[144,5245+16]..src/utils.ml[144,5245+44])
                                                          Texp_apply
                                                          expression (src/utils.ml[144,5245+17]..src/utils.ml[144,5245+27])
                                                            Texp_ident "Ppxlib__!.Import.String.sub"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/utils.ml[144,5245+28]..src/utils.ml[144,5245+29])
                                                                Texp_ident "s/4343"
                                                            <arg>
                                                              Labelled "pos"
                                                              expression (src/utils.ml[144,5245+35]..src/utils.ml[144,5245+36])
                                                                Texp_constant Const_int 0
                                                            <arg>
                                                              Labelled "len"
                                                              expression (src/utils.ml[144,5245+42]..src/utils.ml[144,5245+43])
                                                                Texp_constant Const_int 9
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[145,5290+16]..src/utils.ml[145,5290+78])
                                                          Texp_apply
                                                          expression (src/utils.ml[145,5290+17]..src/utils.ml[145,5290+27])
                                                            Texp_ident "Ppxlib__!.Import.String.sub"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/utils.ml[145,5290+28]..src/utils.ml[145,5290+63])
                                                                Texp_ident "Astlib!.Config.ast_impl_magic_number"
                                                            <arg>
                                                              Labelled "pos"
                                                              expression (src/utils.ml[145,5290+69]..src/utils.ml[145,5290+70])
                                                                Texp_constant Const_int 0
                                                            <arg>
                                                              Labelled "len"
                                                              expression (src/utils.ml[145,5290+76]..src/utils.ml[145,5290+77])
                                                                Texp_constant Const_int 9
                                                          ]
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/utils.ml[146,5369+17]..src/utils.ml[148,5447+81])
                                                    Texp_apply
                                                    expression (src/utils.ml[146,5369+17]..src/utils.ml[146,5369+29])
                                                      Texp_ident "Ppxlib__!.Import.String.equal"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[147,5399+19]..src/utils.ml[147,5399+47])
                                                          Texp_apply
                                                          expression (src/utils.ml[147,5399+20]..src/utils.ml[147,5399+30])
                                                            Texp_ident "Ppxlib__!.Import.String.sub"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/utils.ml[147,5399+31]..src/utils.ml[147,5399+32])
                                                                Texp_ident "s/4343"
                                                            <arg>
                                                              Labelled "pos"
                                                              expression (src/utils.ml[147,5399+38]..src/utils.ml[147,5399+39])
                                                                Texp_constant Const_int 0
                                                            <arg>
                                                              Labelled "len"
                                                              expression (src/utils.ml[147,5399+45]..src/utils.ml[147,5399+46])
                                                                Texp_constant Const_int 9
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[148,5447+19]..src/utils.ml[148,5447+81])
                                                          Texp_apply
                                                          expression (src/utils.ml[148,5447+20]..src/utils.ml[148,5447+30])
                                                            Texp_ident "Ppxlib__!.Import.String.sub"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/utils.ml[148,5447+31]..src/utils.ml[148,5447+66])
                                                                Texp_ident "Astlib!.Config.ast_intf_magic_number"
                                                            <arg>
                                                              Labelled "pos"
                                                              expression (src/utils.ml[148,5447+72]..src/utils.ml[148,5447+73])
                                                                Texp_constant Const_int 0
                                                            <arg>
                                                              Labelled "len"
                                                              expression (src/utils.ml[148,5447+79]..src/utils.ml[148,5447+80])
                                                                Texp_constant Const_int 9
                                                          ]
                                                    ]
                                              ]
                                            expression (src/utils.ml[149,5529+17]..src/utils.ml[149,5529+69])
                                              Texp_construct "Error"
                                              [
                                                expression (src/utils.ml[149,5529+23]..src/utils.ml[149,5529+69])
                                                  Texp_construct "Unknown_version"
                                                  [
                                                    expression (src/utils.ml[149,5529+41]..src/utils.ml[149,5529+42])
                                                      Texp_ident "s/4343"
                                                    expression (src/utils.ml[149,5529+44]..src/utils.ml[149,5529+67])
                                                      Texp_ident "fall_back_input_version/1689"
                                                  ]
                                              ]
                                            Some
                                              expression (src/utils.ml[150,5599+17]..src/utils.ml[150,5599+36])
                                                Texp_apply
                                                expression (src/utils.ml[150,5599+17]..src/utils.ml[150,5599+34])
                                                  Texp_ident "handle_non_binary/4337"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/utils.ml[150,5599+35]..src/utils.ml[150,5599+36])
                                                      Texp_ident "s/4343"
                                                ]
                                      ]
                                      []
                                ]
                                []
                        ]
                  ]
            ]
          structure_item (src/utils.ml[152,5638+2]..src/utils.ml[160,5922+76])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[152,5638+6]..src/utils.ml[152,5638+10])
                  Tpat_var "read/4629"
                expression (src/utils.ml[152,5638+11]..src/utils.ml[160,5922+76]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[152,5638+11]..src/utils.ml[152,5638+23])
                        Tpat_var "input_source/4631"
                      expression (src/utils.ml[152,5638+24]..src/utils.ml[160,5922+76]) ghost
                        Texp_function
                        Labelled "input_kind"
                        [
                          <case>
                            pattern (src/utils.ml[152,5638+25]..src/utils.ml[152,5638+35])
                              Tpat_var "input_kind/4632"
                            expression (src/utils.ml[153,5676+4]..src/utils.ml[160,5922+76])
                              Texp_try
                              expression (src/utils.ml[154,5684+6]..src/utils.ml[156,5762+72])
                                Texp_match
                                expression (src/utils.ml[154,5684+12]..src/utils.ml[154,5684+24])
                                  Texp_ident "input_source/4631"
                                [
                                  <case>
                                    pattern (src/utils.ml[155,5714+8]..src/utils.ml[155,5714+13])
                                      Tpat_value
                                      pattern (src/utils.ml[155,5714+8]..src/utils.ml[155,5714+13])
                                        Tpat_construct "Stdin"
                                        []
                                    expression (src/utils.ml[155,5714+17]..src/utils.ml[155,5714+47])
                                      Texp_apply
                                      expression (src/utils.ml[155,5714+17]..src/utils.ml[155,5714+29])
                                        Texp_ident "from_channel/4333"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/utils.ml[155,5714+30]..src/utils.ml[155,5714+35])
                                            Texp_ident "Stdlib!.stdin"
                                        <arg>
                                          Labelled "input_kind"
                                          expression (src/utils.ml[155,5714+37]..src/utils.ml[155,5714+47])
                                            Texp_ident "input_kind/4632"
                                      ]
                                  <case>
                                    pattern (src/utils.ml[156,5762+8]..src/utils.ml[156,5762+15])
                                      Tpat_value
                                      pattern (src/utils.ml[156,5762+8]..src/utils.ml[156,5762+15])
                                        Tpat_construct "File"
                                        [
                                          pattern (src/utils.ml[156,5762+13]..src/utils.ml[156,5762+15])
                                            Tpat_var "fn/4633"
                                        ]
                                    expression (src/utils.ml[156,5762+19]..src/utils.ml[156,5762+72])
                                      Texp_apply
                                      expression (src/utils.ml[156,5762+19]..src/utils.ml[156,5762+39])
                                        Texp_ident "Ppxlib__!.Import.In_channel.with_file"
                                      [
                                        <arg>
                                          Optional "binary"
                                          expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                            Texp_construct "None"
                                            []
                                        <arg>
                                          Nolabel
                                          expression (src/utils.ml[156,5762+40]..src/utils.ml[156,5762+42])
                                            Texp_ident "fn/4633"
                                        <arg>
                                          Labelled "f"
                                          expression (src/utils.ml[156,5762+46]..src/utils.ml[156,5762+72])
                                            Texp_apply
                                            expression (src/utils.ml[156,5762+47]..src/utils.ml[156,5762+59])
                                              Texp_ident "from_channel/4333"
                                            [
                                              <arg>
                                                Nolabel
                                              <arg>
                                                Labelled "input_kind"
                                                expression (src/utils.ml[156,5762+61]..src/utils.ml[156,5762+71])
                                                  Texp_ident "input_kind/4632"
                                            ]
                                      ]
                                ]
                                []
                              [
                                <case>
                                  pattern (src/utils.ml[157,5835+9]..src/utils.ml[157,5835+12])
                                    Tpat_var "exn/4638"
                                  expression (src/utils.ml[157,5835+16]..src/utils.ml[160,5922+76])
                                    Texp_match
                                    expression (src/utils.ml[158,5853+12]..src/utils.ml[158,5853+37])
                                      Texp_apply
                                      expression (src/utils.ml[158,5853+12]..src/utils.ml[158,5853+33])
                                        Texp_ident "Ppxlib__!.Location.Error.of_exn"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/utils.ml[158,5853+34]..src/utils.ml[158,5853+37])
                                            Texp_ident "exn/4638"
                                      ]
                                    [
                                      <case>
                                        pattern (src/utils.ml[159,5896+8]..src/utils.ml[159,5896+12])
                                          Tpat_value
                                          pattern (src/utils.ml[159,5896+8]..src/utils.ml[159,5896+12])
                                            Tpat_construct "None"
                                            []
                                        expression (src/utils.ml[159,5896+16]..src/utils.ml[159,5896+25])
                                          Texp_apply
                                          expression (src/utils.ml[159,5896+16]..src/utils.ml[159,5896+21])
                                            Texp_ident "Stdlib!.raise"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/utils.ml[159,5896+22]..src/utils.ml[159,5896+25])
                                                Texp_ident "exn/4638"
                                          ]
                                      <case>
                                        pattern (src/utils.ml[160,5922+8]..src/utils.ml[160,5922+18])
                                          Tpat_value
                                          pattern (src/utils.ml[160,5922+8]..src/utils.ml[160,5922+18])
                                            Tpat_construct "Some"
                                            [
                                              pattern (src/utils.ml[160,5922+13]..src/utils.ml[160,5922+18])
                                                Tpat_var "error/4639"
                                            ]
                                        expression (src/utils.ml[160,5922+22]..src/utils.ml[160,5922+75])
                                          Texp_construct "Error"
                                          [
                                            expression (src/utils.ml[160,5922+28]..src/utils.ml[160,5922+75])
                                              Texp_construct "System_error"
                                              [
                                                expression (src/utils.ml[160,5922+43]..src/utils.ml[160,5922+48])
                                                  Texp_ident "error/4639"
                                                expression (src/utils.ml[160,5922+50]..src/utils.ml[160,5922+73])
                                                  Texp_ident "fall_back_input_version/1689"
                                              ]
                                          ]
                                    ]
                                    []
                              ]
                              []
                        ]
                  ]
            ]
          structure_item (src/utils.ml[162,6000+2]..src/utils.ml[188,7115+26])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[162,6000+6]..src/utils.ml[162,6000+11])
                  Tpat_var "write/4642"
                expression (src/utils.ml[162,6000+12]..src/utils.ml[188,7115+26]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/utils.ml[162,6000+12]..src/utils.ml[162,6000+14])
                        Tpat_var "oc/4644"
                      expression (src/utils.ml[162,6000+15]..src/utils.ml[188,7115+26]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/utils.ml[162,6000+15]..src/utils.ml[162,6000+74])
                              Tpat_record
                              [
                                "input_name"
                                  pattern (src/utils.ml[162,6000+17]..src/utils.ml[162,6000+27])
                                    Tpat_var "input_name/4645"
                                "input_version"
                                  pattern (src/utils.ml[162,6000+45]..src/utils.ml[162,6000+67])
                                    Tpat_extra_unpack
                                    pattern (src/utils.ml[162,6000+45]..src/utils.ml[162,6000+67])
                                      Tpat_var "Input_version/4646"
                                "ast"
                                  pattern (src/utils.ml[162,6000+69]..src/utils.ml[162,6000+72])
                                    Tpat_var "ast/4647"
                              ]
                            expression (src/utils.ml[163,6075+6]..src/utils.ml[188,7115+26]) ghost
                              attribute "#modulepat"
                                []
                              Texp_letmodule "Input_version/4648"
                              module_expr (src/utils.ml[162,6000+45]..src/utils.ml[162,6000+67])
                                Tmod_unpack
                                expression (src/utils.ml[162,6000+53]..src/utils.ml[162,6000+66])
                                  Texp_ident "Input_version/4646"
                              expression (src/utils.ml[163,6075+6]..src/utils.ml[188,7115+26]) ghost
                                Texp_function
                                Labelled "add_ppx_context"
                                [
                                  <case>
                                    pattern (src/utils.ml[163,6075+7]..src/utils.ml[163,6075+22])
                                      Tpat_var "add_ppx_context/4649"
                                    expression (src/utils.ml[164,6100+4]..src/utils.ml[188,7115+26])
                                      Texp_letmodule "Ppxlib_to_input/4689"
                                      module_expr (src/utils.ml[164,6100+33]..src/utils.ml[164,6100+61])
                                        Tmod_apply
                                        module_expr (src/utils.ml[164,6100+33]..src/utils.ml[164,6100+45])
                                          Tmod_apply
                                          module_expr (src/utils.ml[164,6100+33]..src/utils.ml[164,6100+40])
                                            module_expr (src/utils.ml[164,6100+33]..src/utils.ml[164,6100+40])
                                              Tmod_ident "Ppxlib__!.Import.Convert"
                                          module_expr (src/utils.ml[164,6100+42]..src/utils.ml[164,6100+44])
                                            module_expr (src/utils.ml[164,6100+42]..src/utils.ml[164,6100+44])
                                              Tmod_ident "Ppxlib__!.Import.Js"
                                        module_expr (src/utils.ml[164,6100+47]..src/utils.ml[164,6100+60])
                                          Tmod_ident "Input_version/4648"
                                      expression (src/utils.ml[165,6165+4]..src/utils.ml[188,7115+26])
                                        Texp_letmodule "Ocaml_to_input/4729"
                                        module_expr (src/utils.ml[165,6165+32]..src/utils.ml[165,6165+74])
                                          Tmod_apply
                                          module_expr (src/utils.ml[165,6165+32]..src/utils.ml[165,6165+58])
                                            Tmod_apply
                                            module_expr (src/utils.ml[165,6165+32]..src/utils.ml[165,6165+39])
                                              module_expr (src/utils.ml[165,6165+32]..src/utils.ml[165,6165+39])
                                                Tmod_ident "Ppxlib__!.Import.Convert"
                                            module_expr (src/utils.ml[165,6165+41]..src/utils.ml[165,6165+57])
                                              module_expr (src/utils.ml[165,6165+41]..src/utils.ml[165,6165+57])
                                                Tmod_ident "Ppxlib__!.Import.Compiler_version"
                                          module_expr (src/utils.ml[165,6165+60]..src/utils.ml[165,6165+73])
                                            Tmod_ident "Input_version/4648"
                                        expression (src/utils.ml[166,6243+4]..src/utils.ml[188,7115+26])
                                          Texp_match
                                          expression (src/utils.ml[166,6243+10]..src/utils.ml[166,6243+13])
                                            Texp_ident "ast/4647"
                                          [
                                            <case>
                                              pattern (src/utils.ml[167,6262+6]..src/utils.ml[167,6262+13])
                                                Tpat_value
                                                pattern (src/utils.ml[167,6262+6]..src/utils.ml[167,6262+13])
                                                  Tpat_construct "Intf"
                                                  [
                                                    pattern (src/utils.ml[167,6262+11]..src/utils.ml[167,6262+13])
                                                      Tpat_var "sg/4730"
                                                  ]
                                              expression (src/utils.ml[168,6279+8]..src/utils.ml[177,6675+26])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/utils.ml[168,6279+12]..src/utils.ml[168,6279+14])
                                                      Tpat_var "sg/4732"
                                                    expression (src/utils.ml[169,6296+10]..src/utils.ml[173,6506+48])
                                                      Texp_ifthenelse
                                                      expression (src/utils.ml[169,6296+13]..src/utils.ml[169,6296+28])
                                                        Texp_ident "add_ppx_context/4649"
                                                      expression (src/utils.ml[170,6330+12]..src/utils.ml[172,6461+44])
                                                        Texp_apply
                                                        expression (src/utils.ml[172,6461+12]..src/utils.ml[172,6461+14])
                                                          Texp_ident "Stdlib!.|>"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/utils.ml[170,6330+12]..src/utils.ml[171,6382+78])
                                                              Texp_apply
                                                              expression (src/utils.ml[171,6382+12]..src/utils.ml[171,6382+14])
                                                                Texp_ident "Stdlib!.|>"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/utils.ml[170,6330+12]..src/utils.ml[170,6330+51])
                                                                    Texp_apply
                                                                    expression (src/utils.ml[170,6330+12]..src/utils.ml[170,6330+48])
                                                                      Texp_ident "Ppxlib__!.Import.Selected_ast.To_ocaml.copy_signature"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/utils.ml[170,6330+49]..src/utils.ml[170,6330+51])
                                                                          Texp_ident "sg/4730"
                                                                    ]
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/utils.ml[171,6382+15]..src/utils.ml[171,6382+78])
                                                                    Texp_apply
                                                                    expression (src/utils.ml[171,6382+15]..src/utils.ml[171,6382+54])
                                                                      Texp_ident "Astlib!.Ast_metadata.add_ppx_context_sig"
                                                                    [
                                                                      <arg>
                                                                        Labelled "tool_name"
                                                                        expression (src/utils.ml[171,6382+66]..src/utils.ml[171,6382+78])
                                                                          Texp_constant Const_string("ppx_driver",(src/utils.ml[171,6382+67]..src/utils.ml[171,6382+77]),None)
                                                                    ]
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/utils.ml[172,6461+15]..src/utils.ml[172,6461+44])
                                                              Texp_ident "Ocaml_to_input/4729.copy_signature"
                                                        ]
                                                      Some
                                                        expression (src/utils.ml[173,6506+15]..src/utils.ml[173,6506+48])
                                                          Texp_apply
                                                          expression (src/utils.ml[173,6506+15]..src/utils.ml[173,6506+45])
                                                            Texp_ident "Ppxlib_to_input/4689.copy_signature"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/utils.ml[173,6506+46]..src/utils.ml[173,6506+48])
                                                                Texp_ident "sg/4730"
                                                          ]
                                                ]
                                                expression (src/utils.ml[175,6566+8]..src/utils.ml[177,6675+26])
                                                  Texp_sequence
                                                  expression (src/utils.ml[175,6566+8]..src/utils.ml[175,6566+71])
                                                    Texp_apply
                                                    expression (src/utils.ml[175,6566+8]..src/utils.ml[175,6566+21])
                                                      Texp_ident "Stdlib!.output_string"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[175,6566+22]..src/utils.ml[175,6566+24])
                                                          Texp_ident "oc/4644"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[175,6566+25]..src/utils.ml[175,6566+71])
                                                          Texp_ident "Input_version/4648.Ast.Config.ast_intf_magic_number"
                                                    ]
                                                  expression (src/utils.ml[176,6639+8]..src/utils.ml[177,6675+26])
                                                    Texp_sequence
                                                    expression (src/utils.ml[176,6639+8]..src/utils.ml[176,6639+34])
                                                      Texp_apply
                                                      expression (src/utils.ml[176,6639+8]..src/utils.ml[176,6639+20])
                                                        Texp_ident "Stdlib!.output_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[176,6639+21]..src/utils.ml[176,6639+23])
                                                            Texp_ident "oc/4644"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[176,6639+24]..src/utils.ml[176,6639+34])
                                                            Texp_ident "input_name/4645"
                                                      ]
                                                    expression (src/utils.ml[177,6675+8]..src/utils.ml[177,6675+26])
                                                      Texp_apply
                                                      expression (src/utils.ml[177,6675+8]..src/utils.ml[177,6675+20])
                                                        Texp_ident "Stdlib!.output_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[177,6675+21]..src/utils.ml[177,6675+23])
                                                            Texp_ident "oc/4644"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[177,6675+24]..src/utils.ml[177,6675+26])
                                                            Texp_ident "sg/4732"
                                                      ]
                                            <case>
                                              pattern (src/utils.ml[178,6702+6]..src/utils.ml[178,6702+13])
                                                Tpat_value
                                                pattern (src/utils.ml[178,6702+6]..src/utils.ml[178,6702+13])
                                                  Tpat_construct "Impl"
                                                  [
                                                    pattern (src/utils.ml[178,6702+11]..src/utils.ml[178,6702+13])
                                                      Tpat_var "st/4731"
                                                  ]
                                              expression (src/utils.ml[179,6719+8]..src/utils.ml[188,7115+26])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/utils.ml[179,6719+12]..src/utils.ml[179,6719+14])
                                                      Tpat_var "st/4946"
                                                    expression (src/utils.ml[180,6736+10]..src/utils.ml[184,6946+48])
                                                      Texp_ifthenelse
                                                      expression (src/utils.ml[180,6736+13]..src/utils.ml[180,6736+28])
                                                        Texp_ident "add_ppx_context/4649"
                                                      expression (src/utils.ml[181,6770+12]..src/utils.ml[183,6901+44])
                                                        Texp_apply
                                                        expression (src/utils.ml[183,6901+12]..src/utils.ml[183,6901+14])
                                                          Texp_ident "Stdlib!.|>"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/utils.ml[181,6770+12]..src/utils.ml[182,6822+78])
                                                              Texp_apply
                                                              expression (src/utils.ml[182,6822+12]..src/utils.ml[182,6822+14])
                                                                Texp_ident "Stdlib!.|>"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/utils.ml[181,6770+12]..src/utils.ml[181,6770+51])
                                                                    Texp_apply
                                                                    expression (src/utils.ml[181,6770+12]..src/utils.ml[181,6770+48])
                                                                      Texp_ident "Ppxlib__!.Import.Selected_ast.To_ocaml.copy_structure"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/utils.ml[181,6770+49]..src/utils.ml[181,6770+51])
                                                                          Texp_ident "st/4731"
                                                                    ]
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/utils.ml[182,6822+15]..src/utils.ml[182,6822+78])
                                                                    Texp_apply
                                                                    expression (src/utils.ml[182,6822+15]..src/utils.ml[182,6822+54])
                                                                      Texp_ident "Astlib!.Ast_metadata.add_ppx_context_str"
                                                                    [
                                                                      <arg>
                                                                        Labelled "tool_name"
                                                                        expression (src/utils.ml[182,6822+66]..src/utils.ml[182,6822+78])
                                                                          Texp_constant Const_string("ppx_driver",(src/utils.ml[182,6822+67]..src/utils.ml[182,6822+77]),None)
                                                                    ]
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/utils.ml[183,6901+15]..src/utils.ml[183,6901+44])
                                                              Texp_ident "Ocaml_to_input/4729.copy_structure"
                                                        ]
                                                      Some
                                                        expression (src/utils.ml[184,6946+15]..src/utils.ml[184,6946+48])
                                                          Texp_apply
                                                          expression (src/utils.ml[184,6946+15]..src/utils.ml[184,6946+45])
                                                            Texp_ident "Ppxlib_to_input/4689.copy_structure"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/utils.ml[184,6946+46]..src/utils.ml[184,6946+48])
                                                                Texp_ident "st/4731"
                                                          ]
                                                ]
                                                expression (src/utils.ml[186,7006+8]..src/utils.ml[188,7115+26])
                                                  Texp_sequence
                                                  expression (src/utils.ml[186,7006+8]..src/utils.ml[186,7006+71])
                                                    Texp_apply
                                                    expression (src/utils.ml[186,7006+8]..src/utils.ml[186,7006+21])
                                                      Texp_ident "Stdlib!.output_string"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[186,7006+22]..src/utils.ml[186,7006+24])
                                                          Texp_ident "oc/4644"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[186,7006+25]..src/utils.ml[186,7006+71])
                                                          Texp_ident "Input_version/4648.Ast.Config.ast_impl_magic_number"
                                                    ]
                                                  expression (src/utils.ml[187,7079+8]..src/utils.ml[188,7115+26])
                                                    Texp_sequence
                                                    expression (src/utils.ml[187,7079+8]..src/utils.ml[187,7079+34])
                                                      Texp_apply
                                                      expression (src/utils.ml[187,7079+8]..src/utils.ml[187,7079+20])
                                                        Texp_ident "Stdlib!.output_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[187,7079+21]..src/utils.ml[187,7079+23])
                                                            Texp_ident "oc/4644"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[187,7079+24]..src/utils.ml[187,7079+34])
                                                            Texp_ident "input_name/4645"
                                                      ]
                                                    expression (src/utils.ml[188,7115+8]..src/utils.ml[188,7115+26])
                                                      Texp_apply
                                                      expression (src/utils.ml[188,7115+8]..src/utils.ml[188,7115+20])
                                                        Texp_ident "Stdlib!.output_value"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[188,7115+21]..src/utils.ml[188,7115+23])
                                                            Texp_ident "oc/4644"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/utils.ml[188,7115+24]..src/utils.ml[188,7115+26])
                                                            Texp_ident "st/4946"
                                                      ]
                                          ]
                                          []
                                ]
                        ]
                  ]
            ]
          structure_item (src/utils.ml[190,7143+2]..src/utils.ml[209,7742+5])
            Tstr_module
            Read_bin/4969
              module_expr (src/utils.ml[190,7143+20]..src/utils.ml[209,7742+5])
                Tmod_structure
                [
                  structure_item (src/utils.ml[191,7170+4]..src/utils.ml[191,7170+52])
                    Tstr_type Rec
                    [
                      type_declaration ast/4948 (src/utils.ml[191,7170+4]..src/utils.ml[191,7170+52])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ttype_variant
                            [
                              (src/utils.ml[191,7170+15]..src/utils.ml[191,7170+32])
                                Intf/4949
                                [
                                  core_type (src/utils.ml[191,7170+23]..src/utils.ml[191,7170+32])
                                    Ttyp_constr "Ppxlib__!.Import.signature"
                                    []
                                ]
                                None
                              (src/utils.ml[191,7170+33]..src/utils.ml[191,7170+52])
                                Impl/4950
                                [
                                  core_type (src/utils.ml[191,7170+43]..src/utils.ml[191,7170+52])
                                    Ttyp_constr "Ppxlib__!.Import.structure"
                                    []
                                ]
                                None
                            ]
                        ptype_private = Public
                        ptype_manifest =
                          None
                    ]
                  structure_item (src/utils.ml[192,7223+4]..src/utils.ml[192,7223+47])
                    Tstr_type Rec
                    [
                      type_declaration t/4951 (src/utils.ml[192,7223+4]..src/utils.ml[192,7223+47])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ttype_record
                            [
                              (src/utils.ml[192,7223+15]..src/utils.ml[192,7223+25])
                                Immutable
                                ast/4952                                core_type (src/utils.ml[192,7223+21]..src/utils.ml[192,7223+24])
                                  Ttyp_poly
                                  core_type (src/utils.ml[192,7223+21]..src/utils.ml[192,7223+24])
                                    Ttyp_constr "ast/4948"
                                    []
                              (src/utils.ml[192,7223+26]..src/utils.ml[192,7223+45])
                                Immutable
                                input_name/4953                                core_type (src/utils.ml[192,7223+39]..src/utils.ml[192,7223+45])
                                  Ttyp_poly
                                  core_type (src/utils.ml[192,7223+39]..src/utils.ml[192,7223+45])
                                    Ttyp_constr "string/17!"
                                    []
                            ]
                        ptype_private = Public
                        ptype_manifest =
                          None
                    ]
                  structure_item (src/utils.ml[194,7272+4]..src/utils.ml[205,7625+49])
                    Tstr_value Nonrec
                    [
                      <def>
                        pattern (src/utils.ml[194,7272+8]..src/utils.ml[194,7272+19])
                          Tpat_var "read_binary/4954"
                        expression (src/utils.ml[194,7272+20]..src/utils.ml[205,7625+49]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/utils.ml[194,7272+20]..src/utils.ml[194,7272+22])
                                Tpat_var "fn/4956"
                              expression (src/utils.ml[195,7297+6]..src/utils.ml[205,7625+49])
                                Texp_match
                                expression (src/utils.ml[196,7309+8]..src/utils.ml[196,7309+80])
                                  Texp_apply
                                  expression (src/utils.ml[196,7309+8]..src/utils.ml[196,7309+28])
                                    Texp_ident "Ppxlib__!.Import.In_channel.with_file"
                                  [
                                    <arg>
                                      Optional "binary"
                                      expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                        Texp_construct "None"
                                        []
                                    <arg>
                                      Nolabel
                                      expression (src/utils.ml[196,7309+29]..src/utils.ml[196,7309+31])
                                        Texp_ident "fn/4956"
                                    <arg>
                                      Labelled "f"
                                      expression (src/utils.ml[196,7309+35]..src/utils.ml[196,7309+80])
                                        Texp_apply
                                        expression (src/utils.ml[196,7309+36]..src/utils.ml[196,7309+48])
                                          Texp_ident "from_channel/4333"
                                        [
                                          <arg>
                                            Nolabel
                                          <arg>
                                            Labelled "input_kind"
                                            expression (src/utils.ml[196,7309+61]..src/utils.ml[196,7309+79])
                                              Texp_construct "Necessarily_binary"
                                              []
                                        ]
                                  ]
                                [
                                  <case>
                                    pattern (src/utils.ml[198,7401+8]..src/utils.ml[198,7401+33])
                                      Tpat_value
                                      pattern (src/utils.ml[198,7401+8]..src/utils.ml[198,7401+33])
                                        Tpat_construct "Ok"
                                        [
                                          pattern (src/utils.ml[198,7401+11]..src/utils.ml[198,7401+33])
                                            Tpat_record
                                            [
                                              "input_name"
                                                pattern (src/utils.ml[198,7401+18]..src/utils.ml[198,7401+28])
                                                  Tpat_var "input_name/4957"
                                              "ast"
                                                pattern (src/utils.ml[198,7401+13]..src/utils.ml[198,7401+16])
                                                  Tpat_var "ast/4958"
                                            ]
                                        ]
                                    expression (src/utils.ml[199,7438+10]..src/utils.ml[204,7592+32])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/utils.ml[199,7438+14]..src/utils.ml[199,7438+17])
                                            Tpat_var "ast/4960"
                                          expression (src/utils.ml[200,7458+12]..src/utils.ml[202,7532+46])
                                            Texp_match
                                            expression (src/utils.ml[200,7458+18]..src/utils.ml[200,7458+21])
                                              Texp_ident "ast/4958"
                                            [
                                              <case>
                                                pattern (src/utils.ml[201,7485+14]..src/utils.ml[201,7485+28])
                                                  Tpat_value
                                                  pattern (src/utils.ml[201,7485+14]..src/utils.ml[201,7485+28])
                                                    Tpat_construct "Impl"
                                                    [
                                                      pattern (src/utils.ml[201,7485+19]..src/utils.ml[201,7485+28])
                                                        Tpat_var "structure/4961"
                                                    ]
                                                expression (src/utils.ml[201,7485+32]..src/utils.ml[201,7485+46])
                                                  Texp_construct "Impl"
                                                  [
                                                    expression (src/utils.ml[201,7485+37]..src/utils.ml[201,7485+46])
                                                      Texp_ident "structure/4961"
                                                  ]
                                              <case>
                                                pattern (src/utils.ml[202,7532+14]..src/utils.ml[202,7532+28])
                                                  Tpat_value
                                                  pattern (src/utils.ml[202,7532+14]..src/utils.ml[202,7532+28])
                                                    Tpat_construct "Intf"
                                                    [
                                                      pattern (src/utils.ml[202,7532+19]..src/utils.ml[202,7532+28])
                                                        Tpat_var "signature/4962"
                                                    ]
                                                expression (src/utils.ml[202,7532+32]..src/utils.ml[202,7532+46])
                                                  Texp_construct "Intf"
                                                  [
                                                    expression (src/utils.ml[202,7532+37]..src/utils.ml[202,7532+46])
                                                      Texp_ident "signature/4962"
                                                  ]
                                            ]
                                            []
                                      ]
                                      expression (src/utils.ml[204,7592+10]..src/utils.ml[204,7592+32])
                                        Texp_construct "Ok"
                                        [
                                          expression (src/utils.ml[204,7592+13]..src/utils.ml[204,7592+32])
                                            Texp_record
                                              fields =
                                                [
                                                  "ast"
                                                    expression (src/utils.ml[204,7592+15]..src/utils.ml[204,7592+18]) ghost
                                                      Texp_ident "ast/4960"
                                                  "input_name"
                                                    expression (src/utils.ml[204,7592+20]..src/utils.ml[204,7592+30]) ghost
                                                      Texp_ident "input_name/4957"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                                        ]
                                  <case>
                                    pattern (src/utils.ml[205,7625+8]..src/utils.ml[205,7625+15])
                                      Tpat_value
                                      pattern (src/utils.ml[205,7625+8]..src/utils.ml[205,7625+15])
                                        Tpat_construct "Error"
                                        [
                                          pattern (src/utils.ml[205,7625+14]..src/utils.ml[205,7625+15])
                                            Tpat_var "e/4959"
                                        ]
                                    expression (src/utils.ml[205,7625+19]..src/utils.ml[205,7625+49])
                                      Texp_construct "Error"
                                      [
                                        expression (src/utils.ml[205,7625+25]..src/utils.ml[205,7625+49])
                                          Texp_apply
                                          expression (src/utils.ml[205,7625+26]..src/utils.ml[205,7625+46])
                                            Texp_ident "read_error_to_string/3641"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/utils.ml[205,7625+47]..src/utils.ml[205,7625+48])
                                                Texp_ident "e/4959"
                                          ]
                                      ]
                                ]
                                []
                          ]
                    ]
                  structure_item (src/utils.ml[207,7676+4]..src/utils.ml[207,7676+25])
                    Tstr_value Nonrec
                    [
                      <def>
                        pattern (src/utils.ml[207,7676+8]..src/utils.ml[207,7676+15])
                          Tpat_var "get_ast/4963"
                        expression (src/utils.ml[207,7676+16]..src/utils.ml[207,7676+25]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/utils.ml[207,7676+16]..src/utils.ml[207,7676+17])
                                Tpat_var "t/4965"
                              expression (src/utils.ml[207,7676+20]..src/utils.ml[207,7676+25])
                                Texp_field
                                expression (src/utils.ml[207,7676+20]..src/utils.ml[207,7676+21])
                                  Texp_ident "t/4965"
                                "ast"
                          ]
                    ]
                  structure_item (src/utils.ml[208,7702+4]..src/utils.ml[208,7702+39])
                    Tstr_value Nonrec
                    [
                      <def>
                        pattern (src/utils.ml[208,7702+8]..src/utils.ml[208,7702+22])
                          Tpat_var "get_input_name/4966"
                        expression (src/utils.ml[208,7702+23]..src/utils.ml[208,7702+39]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/utils.ml[208,7702+23]..src/utils.ml[208,7702+24])
                                Tpat_var "t/4968"
                              expression (src/utils.ml[208,7702+27]..src/utils.ml[208,7702+39])
                                Texp_field
                                expression (src/utils.ml[208,7702+27]..src/utils.ml[208,7702+28])
                                  Texp_ident "t/4968"
                                "input_name"
                          ]
                    ]
                ]
        ]
  structure_item (src/utils.ml[212,7753+0]..src/utils.ml[221,8104+3])
    Tstr_module
    System/5092
      module_expr (src/utils.ml[212,7753+16]..src/utils.ml[221,8104+3])
        Tmod_structure
        [
          structure_item (src/utils.ml[213,7776+2]..src/utils.ml[220,8047+56])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/utils.ml[213,7776+6]..src/utils.ml[213,7776+22])
                  Tpat_var "run_preprocessor/4971"
                expression (src/utils.ml[213,7776+23]..src/utils.ml[220,8047+56]) ghost
                  Texp_function
                  Labelled "pp"
                  [
                    <case>
                      pattern (src/utils.ml[213,7776+24]..src/utils.ml[213,7776+26])
                        Tpat_var "pp/4973"
                      expression (src/utils.ml[213,7776+27]..src/utils.ml[220,8047+56]) ghost
                        Texp_function
                        Labelled "input"
                        [
                          <case>
                            pattern (src/utils.ml[213,7776+28]..src/utils.ml[213,7776+33])
                              Tpat_var "input/4974"
                            expression (src/utils.ml[213,7776+34]..src/utils.ml[220,8047+56]) ghost
                              Texp_function
                              Labelled "output"
                              [
                                <case>
                                  pattern (src/utils.ml[213,7776+35]..src/utils.ml[213,7776+41])
                                    Tpat_var "output/4975"
                                  expression (src/utils.ml[214,7820+4]..src/utils.ml[220,8047+56])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/utils.ml[214,7820+8]..src/utils.ml[214,7820+15])
                                          Tpat_var "command/4976"
                                        expression (src/utils.ml[215,7838+6]..src/utils.ml[217,7952+38])
                                          Texp_apply
                                          expression (src/utils.ml[215,7838+6]..src/utils.ml[215,7838+20])
                                            Texp_ident "Stdlib!.Printf.sprintf"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33])
                                                Texp_construct "CamlinternalFormatBasics.Format"
                                                [
                                                  expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                    [
                                                      expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                        [
                                                          expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                            Texp_constant Const_char 20
                                                          expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                            [
                                                              expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                []
                                                              expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                                    Texp_constant Const_string(" > ",(src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost,None)
                                                                  expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                    [
                                                                      expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                        []
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                  expression (src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost
                                                    Texp_constant Const_string("%s %s > %s",(src/utils.ml[215,7838+21]..src/utils.ml[215,7838+33]) ghost,None)
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/utils.ml[215,7838+34]..src/utils.ml[215,7838+36])
                                                Texp_ident "pp/4973"
                                            <arg>
                                              Nolabel
                                              expression (src/utils.ml[216,7875+8]..src/utils.ml[216,7875+76])
                                                Texp_ifthenelse
                                                expression (src/utils.ml[216,7875+12]..src/utils.ml[216,7875+34])
                                                  Texp_apply
                                                  expression (src/utils.ml[216,7875+12]..src/utils.ml[216,7875+24])
                                                    Texp_ident "Ppxlib__!.Import.String.equal"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/utils.ml[216,7875+25]..src/utils.ml[216,7875+30])
                                                        Texp_ident "input/4974"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/utils.ml[216,7875+31]..src/utils.ml[216,7875+34])
                                                        Texp_constant Const_string("-",(src/utils.ml[216,7875+32]..src/utils.ml[216,7875+33]),None)
                                                  ]
                                                expression (src/utils.ml[216,7875+40]..src/utils.ml[216,7875+42])
                                                  Texp_constant Const_string("",(src/utils.ml[216,7875+41]..src/utils.ml[216,7875+41]),None)
                                                Some
                                                  expression (src/utils.ml[216,7875+48]..src/utils.ml[216,7875+75])
                                                    Texp_apply
                                                    expression (src/utils.ml[216,7875+48]..src/utils.ml[216,7875+69])
                                                      Texp_ident "Stdlib!.Filename.quote"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/utils.ml[216,7875+70]..src/utils.ml[216,7875+75])
                                                          Texp_ident "input/4974"
                                                    ]
                                            <arg>
                                              Nolabel
                                              expression (src/utils.ml[217,7952+8]..src/utils.ml[217,7952+38])
                                                Texp_apply
                                                expression (src/utils.ml[217,7952+9]..src/utils.ml[217,7952+30])
                                                  Texp_ident "Stdlib!.Filename.quote"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/utils.ml[217,7952+31]..src/utils.ml[217,7952+37])
                                                      Texp_ident "output/4975"
                                                ]
                                          ]
                                    ]
                                    expression (src/utils.ml[219,7998+4]..src/utils.ml[220,8047+56])
                                      Texp_ifthenelse
                                      expression (src/utils.ml[219,7998+7]..src/utils.ml[219,7998+37])
                                        Texp_apply
                                        expression (src/utils.ml[219,7998+34]..src/utils.ml[219,7998+35])
                                          Texp_ident "Ppxlib__!.Import.="
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/utils.ml[219,7998+7]..src/utils.ml[219,7998+33])
                                              Texp_apply
                                              expression (src/utils.ml[219,7998+7]..src/utils.ml[219,7998+25])
                                                Texp_ident "Stdlib!.Sys.command"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/utils.ml[219,7998+26]..src/utils.ml[219,7998+33])
                                                    Texp_ident "command/4976"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/utils.ml[219,7998+36]..src/utils.ml[219,7998+37])
                                              Texp_constant Const_int 0
                                        ]
                                      expression (src/utils.ml[219,7998+43]..src/utils.ml[219,7998+48])
                                        Texp_construct "Ok"
                                        [
                                          expression (src/utils.ml[219,7998+46]..src/utils.ml[219,7998+48])
                                            Texp_construct "()"
                                            []
                                        ]
                                      Some
                                        expression (src/utils.ml[220,8047+9]..src/utils.ml[220,8047+56])
                                          Texp_construct "Error"
                                          [
                                            expression (src/utils.ml[220,8047+15]..src/utils.ml[220,8047+56])
                                              Texp_tuple
                                              [
                                                expression (src/utils.ml[220,8047+16]..src/utils.ml[220,8047+23])
                                                  Texp_ident "command/4976"
                                                expression (src/utils.ml[220,8047+25]..src/utils.ml[220,8047+55])
                                                  Texp_ident "Ast_io/4970.fall_back_input_version"
                                              ]
                                          ]
                              ]
                        ]
                  ]
            ]
        ]
]

(setglobal Ppxlib__Utils!
  (let
    (with_output/550 =
       (function fn/552 binary/553 f/554
         (funct-body Ppxlib__Utils.with_output src/utils.ml(3)<ghost>:29-143
           (before Ppxlib__Utils.with_output src/utils.ml(4):47-143
             (catch
               (if fn/552
                 (let (fn/555 =a (field_imm 0 fn/552))
                   (catch
                     (stringswitch fn/555
                      case "-": (exit 1)
                      default: (exit 2))
                    with (2)
                     (before Ppxlib__Utils.with_output src/utils.ml(6):108-143
                       (after Ppxlib__Utils.with_output src/utils.ml(6):108-143
                         (apply
                           (field_imm 1
                             (field_imm 95 (global Ppxlib__Import!)))
                           (makeblock 0 binary/553) 0 0 0 fn/555 f/554)))))
                 (exit 1))
              with (1)
               (before Ppxlib__Utils.with_output src/utils.ml(5):84-92
                 (after Ppxlib__Utils.with_output src/utils.ml(5):84-92
                   (apply f/554 (field_imm 41 (global Stdlib!)))))))))
     Kind/647 =
       (module-defn(Kind/647) Ppxlib__Utils src/utils.ml(8):145-483
         (let
           (of_filename/608 =
              (function fn/610
                (funct-body Ppxlib__Utils.Kind.of_filename src/utils.ml(11)<ghost>:208-363
                  (before Ppxlib__Utils.Kind.of_filename src/utils.ml(12):228-363
                    (if
                      (after Ppxlib__Utils.Kind.of_filename src/utils.ml(12):231-268
                        (apply (field_imm 6 (global Stdlib__filename!))
                          fn/610 ".ml"))
                      (before Ppxlib__Utils.Kind.of_filename src/utils.ml(12):274-283
                        [0: 1])
                      (before Ppxlib__Utils.Kind.of_filename src/utils.ml(13):293-363
                        (if
                          (after Ppxlib__Utils.Kind.of_filename src/utils.ml(13):296-334
                            (apply (field_imm 6 (global Stdlib__filename!))
                              fn/610 ".mli"))
                          (before Ppxlib__Utils.Kind.of_filename src/utils.ml(13):340-349
                            [0: 0])
                          (before Ppxlib__Utils.Kind.of_filename src/utils.ml(14):359-363
                            0)))))))
            describe/633 =
              (function param/635
                (funct-body Ppxlib__Utils.Kind.describe src/utils.ml(16):382-437
                  (if param/635
                    (before Ppxlib__Utils.Kind.describe src/utils.ml(16):399-415
                      "implementation")
                    (before Ppxlib__Utils.Kind.describe src/utils.ml(16):426-437
                      "interface"))))
            equal/636 = (field_imm 1 (field_imm 70 (global Ppxlib__Import!))))
           (pseudo Ppxlib__Utils.Kind src/utils.ml(8):159-483
             (makeblock 0 of_filename/608 describe/633 equal/636))))
     Intf_or_impl/1687 =
       (module-defn(Intf_or_impl/1687) Ppxlib__Utils src/utils.ml(20):485-945
         (let
           (map/651 =
              (function t/653 map/743
                (funct-body Ppxlib__Utils.Intf_or_impl.map src/utils.ml(23)<ghost>:574-697
                  (before Ppxlib__Utils.Intf_or_impl.map src/utils.ml(24):607-697
                    (switch* t/653
                     case tag 0:
                      (let (x/745 =a (field_imm 0 t/653))
                        (before Ppxlib__Utils.Intf_or_impl.map src/utils.ml(26):675-697
                          (makeblock 0
                            (after Ppxlib__Utils.Intf_or_impl.map src/utils.ml(26):680-697
                              (send map/743 359375608 x/745)))))
                     case tag 1:
                      (let (x/744 =a (field_imm 0 t/653))
                        (before Ppxlib__Utils.Intf_or_impl.map src/utils.ml(25):636-658
                          (makeblock 1
                            (after Ppxlib__Utils.Intf_or_impl.map src/utils.ml(25):641-658
                              (send map/743 -951102413 x/744)))))))))
            map_with_context/1678 =
              (function t/1680 map/1681 ctx/1682
                (funct-body Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(28)<ghost>:722-872
                  (before Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(29):774-872
                    (switch* t/1680
                     case tag 0:
                      (let (x/1684 =a (field_imm 0 t/1680))
                        (before Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(31):846-872
                          (makeblock 0
                            (after Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(31):851-872
                              (send map/1681 359375608 ctx/1682 x/1684)))))
                     case tag 1:
                      (let (x/1683 =a (field_imm 0 t/1680))
                        (before Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(30):803-829
                          (makeblock 1
                            (after Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(30):808-829
                              (send map/1681 -951102413 ctx/1682 x/1683)))))))))
            kind/1685 =
              (function param/1686
                (funct-body Ppxlib__Utils.Intf_or_impl.kind src/utils.ml(33):901-941
                  (switch* param/1686
                   case tag 0:
                    (let (*match*/14324 =a (field_imm 0 param/1686))
                      (before Ppxlib__Utils.Intf_or_impl.kind src/utils.ml(33):920-924
                        0))
                   case tag 1:
                    (let (*match*/14325 =a (field_imm 0 param/1686))
                      (before Ppxlib__Utils.Intf_or_impl.kind src/utils.ml(33):937-941
                        1))))))
           (pseudo Ppxlib__Utils.Intf_or_impl src/utils.ml(20):507-945
             (makeblock 0 map/651 map_with_context/1678 kind/1685))))
     Ast_io/4970 =
       (module-defn(Ast_io/4970) Ppxlib__Utils src/utils.ml(36):947-7751
         (let
           (fall_back_input_version/1689 =
              (let
                (let/14326 = (field_imm 10 (global Ppxlib_ast__Versions!))
                 let/14327 =a (field_imm 10 (global Ppxlib_ast__Versions!)))
                (makeblock 0
                  (let (let/14328 =a (field_mut 0 let/14327))
                    (makeblock 0 (field_mut 1 let/14328)
                      (field_mut 2 let/14328)))
                  (field_mut 1 let/14327) (field_mut 2 let/14327)
                  (field_mut 3 let/14327) (field_mut 4 let/14327)))
            read_error_to_string/3641 =
              (function error/3643
                (funct-body Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(58)<ghost>:1674-2004
                  (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(59):1701-2004
                    (switch* error/3643
                     case int 0:
                      (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(60):1744-1769
                        "Error: Not a binary ast")
                     case tag 0:
                      (let
                        (*match*/14329 =a (field_imm 1 error/3643)
                         s/3644 =a (field_imm 0 error/3643))
                        (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(61):1802-1831
                          (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(61):1802-1831
                            (apply (field_imm 30 (global Stdlib!))
                              "Error: Unknown version " s/3644))))
                     case tag 1:
                      (let
                        (*match*/14330 =a (field_imm 1 error/3643)
                         loc/3645 =a (field_imm 0 error/3643))
                        (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(63):1877-1927
                          (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(63):1877-1927
                            (apply (field_imm 30 (global Stdlib!))
                              "Source parse error:"
                              (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(63):1901-1927
                                (apply
                                  (field_imm 2
                                    (field_imm 12 (global Ppxlib__Location!)))
                                  loc/3645))))))
                     case tag 2:
                      (let
                        (*match*/14331 =a (field_imm 1 error/3643)
                         loc/3646 =a (field_imm 0 error/3643))
                        (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(64):1959-2004
                          (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(64):1959-2004
                            (apply (field_imm 30 (global Stdlib!))
                              "System error: "
                              (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(64):1978-2004
                                (apply
                                  (field_imm 2
                                    (field_imm 12 (global Ppxlib__Location!)))
                                  loc/3646))))))))))
            parse_source_code/3648 =
              (function kind/3650 input_name/3651
                prefix_read_from_source/3652 ic/3653
                (funct-body Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(66)<ghost>:2030-3529
                  (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(70):2228-3529
                    (let
                      (input_version/3654 =
                         (let
                           (let/14335 =
                              (field_imm 10 (global Ppxlib_ast__Versions!))
                            let/14336 =a
                              (field_imm 10 (global Ppxlib_ast__Versions!)))
                           (makeblock 0
                             (let (let/14337 =a (field_mut 0 let/14336))
                               (makeblock 0 (field_mut 1 let/14337)
                                 (field_mut 2 let/14337)))
                             (field_mut 1 let/14336) (field_mut 2 let/14336)
                             (field_mut 3 let/14336) (field_mut 4 let/14336))))
                      (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(71):2297-3529
                        (try
                          (let
                            (lexbuf/3659 =
                               (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(81):2780-2802
                                 (apply
                                   (field_imm 1 (global Stdlib__lexing!)) 0
                                   ic/3653)))
                            (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(82):2812-3369
                              (let
                                (len/3690 =[int]
                                   (string.length
                                     prefix_read_from_source/3652))
                                (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(83):2869-3369
                                  (seq
                                    (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(83):2869-2973
                                      (apply
                                        (field_imm 73
                                          (field_imm 82
                                            (global Ppxlib__Import!)))
                                        prefix_read_from_source/3652 0
                                        (field_mut 1 lexbuf/3659) 0 len/3690))
                                    (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(85):2981-3369
                                      (seq
                                        (setfield_imm 2 lexbuf/3659 len/3690)
                                        (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(86):3017-3369
                                          (seq
                                            (setfield_ptr 11 lexbuf/3659
                                              (makeblock 0 (*,int,int,int)
                                                input_name/3651 1 0 0))
                                            (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(88):3121-3369
                                              (seq
                                                (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(88):3121-3157
                                                  (apply
                                                    (field_imm 0
                                                      (global Ppxlib__Skip_hash_bang!))
                                                    lexbuf/3659))
                                                (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(89):3165-3369
                                                  (let
                                                    (ast/3933 =
                                                       (if kind/3650
                                                         (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(92):3282-3316
                                                           (makeblock 1
                                                             (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(92):3287-3316
                                                               (apply
                                                                 (field_imm 1
                                                                   (field_imm 2
                                                                    (global Ppxlib_ast__Import!)))
                                                                 lexbuf/3659))))
                                                         (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(91):3234-3263
                                                           (makeblock 0
                                                             (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(91):3239-3263
                                                               (apply
                                                                 (field_imm 2
                                                                   (field_imm 2
                                                                    (global Ppxlib_ast__Import!)))
                                                                 lexbuf/3659))))))
                                                    (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(94):3332-3369
                                                      (makeblock 0
                                                        (makeblock 0
                                                          input_name/3651
                                                          input_version/3654
                                                          ast/3933))))))))))))))))
                         with exn/4219
                          (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(95):3386-3529
                            (let
                              (*match*/14332 =
                                 (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(96):3400-3425
                                   (apply
                                     (field_imm 5
                                       (field_imm 12
                                         (global Ppxlib__Location!)))
                                     exn/4219)))
                              (if *match*/14332
                                (let
                                  (error/4220 =a (field_imm 0 *match*/14332))
                                  (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(98):3479-3528
                                    (makeblock 1
                                      (makeblock 1 error/4220
                                        input_version/3654))))
                                (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(97):3447-3456
                                  (reraise
                                    (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(97):3447-3456
                                      exn/4219))))))))))))
            magic_length/4223 =[int]
              (string.length (field_imm 1 (global Astlib__Config!)))
            read_magic/4327 =
              (function ic/4329
                (funct-body Ppxlib__Utils.Ast_io.read_magic src/utils.ml(102)<ghost>:3620-3809
                  (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(103):3629-3809
                    (let
                      (buf/4330 =
                         (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(103):3639-3664
                           (caml_create_bytes magic_length/4223)))
                      (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(104):3672-3809
                        (let
                          (len/4331 =[int]
                             (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(104):3682-3709
                               (apply (field_imm 86 (global Stdlib!)) ic/4329
                                 buf/4330 0 magic_length/4223)))
                          (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(105):3717-3809
                            (let
                              (s/4332 =
                                 (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(105):3725-3757
                                   (apply
                                     (field_imm 72
                                       (field_imm 82
                                         (global Ppxlib__Import!)))
                                     buf/4330 0 len/4331)))
                              (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3765-3809
                                (if
                                  (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3768-3786
                                    (apply
                                      (field_imm 73 (global Ppxlib__Import!))
                                      len/4331 magic_length/4223))
                                  (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3792-3796
                                    (makeblock 0 s/4332))
                                  (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3802-3809
                                    (makeblock 1 s/4332))))))))))))
            from_channel/4333 =
              (function ch/4335 input_kind/4336
                (funct-body Ppxlib__Utils.Ast_io.from_channel src/utils.ml(108)<ghost>:3830-5636
                  (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(109):3851-5636
                    (let
                      (handle_non_binary/4337 =
                         (function prefix_read_from_source/4339
                           (funct-body Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(109)<ghost>:3873-4099
                             (before Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(110):3905-4099
                               (if input_kind/4336
                                 (let
                                   (input_name/4341 =a
                                      (field_imm 1 input_kind/4336)
                                    kind/4340 =a
                                      (field_imm 0 input_kind/4336))
                                   (before Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(112):3983-4046
                                     (after Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(112):3983-4046
                                       (apply parse_source_code/3648
                                         kind/4340 input_name/4341
                                         prefix_read_from_source/4339
                                         ch/4335))))
                                 (before Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(113):4077-4099
                                   [1: 0]))))))
                      (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(115):4111-5636
                        (let
                          (*match*/14961 =
                             (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(115):4117-4130
                               (apply read_magic/4327 ch/4335)))
                          (switch* *match*/14961
                           case tag 0:
                            (let (s/4343 =a (field_imm 0 *match*/14961))
                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(117):4187-5636
                                (let
                                  (*match*/14960 =
                                     (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(118):4203-4228
                                       (apply
                                         (field_imm 0
                                           (field_imm 17
                                             (global Ppxlib_ast__Versions!)))
                                         s/4343)))
                                  (switch* *match*/14960
                                   case int 0:
                                    (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(142):5215-5635
                                      (if
                                        (||
                                          (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(143):5232-5368
                                            (apply
                                              (field_imm 47
                                                (field_imm 96
                                                  (global Ppxlib__Import!)))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(144):5261-5289
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  s/4343 0 9))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(145):5306-5368
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  (field_imm 1
                                                    (global Astlib__Config!))
                                                  0 9))))
                                          (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(146):5386-5528
                                            (apply
                                              (field_imm 47
                                                (field_imm 96
                                                  (global Ppxlib__Import!)))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(147):5418-5446
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  s/4343 0 9))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(148):5466-5528
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  (field_imm 0
                                                    (global Astlib__Config!))
                                                  0 9)))))
                                        (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(149):5546-5598
                                          (makeblock 1
                                            (makeblock 0 s/4343
                                              fall_back_input_version/1689)))
                                        (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(150):5616-5635
                                          (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(150):5616-5635
                                            (apply handle_non_binary/4337
                                              s/4343)))))
                                   case tag 0:
                                    (let
                                      (Input_version/4387 =a
                                         (field_imm 0 *match*/14960))
                                      (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(131)<ghost>:4777-5181
                                        (let
                                          (Input_version/4558 =
                                             (module-defn(Input_version/4558) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(130):4731-4744
                                               Input_version/4387)
                                           input_name/4559 =
                                             (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(131):4803-4817
                                               (apply
                                                 (field_imm 91
                                                   (global Stdlib!))
                                                 ch/4335)))
                                          (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(132):4833-5181
                                            (let
                                              (ast/4560 =
                                                 (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(132):4843-4857
                                                   (apply
                                                     (field_imm 91
                                                       (global Stdlib!))
                                                     ch/4335)))
                                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(133):4873-5181
                                                (let
                                                  (Input_to_ppxlib/4600 =
                                                     (module-defn(Input_to_ppxlib/4600) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(133):4884-4899
                                                       (apply
                                                         (apply
                                                           (let
                                                             (let/14958 =
                                                                (field_imm 16
                                                                  (global Ppxlib_ast__Versions!)))
                                                             (field_imm 16
                                                               (global Ppxlib_ast__Versions!)))
                                                           Input_version/4558)
                                                         (let
                                                           (let/14955 =
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!))
                                                            let/14956 =a
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!)))
                                                           (makeblock 0
                                                             (let
                                                               (let/14957 =a
                                                                  (field_mut 0
                                                                    let/14956))
                                                               (makeblock 0
                                                                 (field_mut 1
                                                                   let/14957)
                                                                 (field_mut 2
                                                                   let/14957)))
                                                             (field_mut 1
                                                               let/14956)
                                                             (field_mut 2
                                                               let/14956)
                                                             (field_mut 3
                                                               let/14956)
                                                             (field_mut 4
                                                               let/14956)))))
                                                   ast/4601 =
                                                     (makeblock 1
                                                       (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(134):4974-5010
                                                         (apply
                                                           (field_imm 0
                                                             Input_to_ppxlib/4600)
                                                           ast/4560))))
                                                  (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(135):5026-5181
                                                    (makeblock 0
                                                      (makeblock 0
                                                        input_name/4559
                                                        Input_version/4558
                                                        ast/4601))))))))))
                                   case tag 1:
                                    (let
                                      (Input_version/4384 =a
                                         (field_imm 0 *match*/14960))
                                      (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(120)<ghost>:4303-4707
                                        (let
                                          (Input_version/4388 =
                                             (module-defn(Input_version/4388) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(119):4257-4270
                                               Input_version/4384)
                                           input_name/4389 =
                                             (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(120):4329-4343
                                               (apply
                                                 (field_imm 91
                                                   (global Stdlib!))
                                                 ch/4335)))
                                          (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(121):4359-4707
                                            (let
                                              (ast/4390 =
                                                 (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(121):4369-4383
                                                   (apply
                                                     (field_imm 91
                                                       (global Stdlib!))
                                                     ch/4335)))
                                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(122):4399-4707
                                                (let
                                                  (Input_to_ppxlib/4453 =
                                                     (module-defn(Input_to_ppxlib/4453) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(122):4410-4425
                                                       (apply
                                                         (apply
                                                           (let
                                                             (let/14953 =
                                                                (field_imm 16
                                                                  (global Ppxlib_ast__Versions!)))
                                                             (field_imm 16
                                                               (global Ppxlib_ast__Versions!)))
                                                           Input_version/4388)
                                                         (let
                                                           (let/14950 =
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!))
                                                            let/14951 =a
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!)))
                                                           (makeblock 0
                                                             (let
                                                               (let/14952 =a
                                                                  (field_mut 0
                                                                    let/14951))
                                                               (makeblock 0
                                                                 (field_mut 1
                                                                   let/14952)
                                                                 (field_mut 2
                                                                   let/14952)))
                                                             (field_mut 1
                                                               let/14951)
                                                             (field_mut 2
                                                               let/14951)
                                                             (field_mut 3
                                                               let/14951)
                                                             (field_mut 4
                                                               let/14951)))))
                                                   ast/4454 =
                                                     (makeblock 0
                                                       (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(123):4500-4536
                                                         (apply
                                                           (field_imm 1
                                                             Input_to_ppxlib/4453)
                                                           ast/4390))))
                                                  (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(124):4552-4707
                                                    (makeblock 0
                                                      (makeblock 0
                                                        input_name/4389
                                                        Input_version/4388
                                                        ast/4454))))))))))))))
                           case tag 1:
                            (let (s/4342 =a (field_imm 0 *match*/14961))
                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(116):4153-4172
                                (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(116):4153-4172
                                  (apply handle_non_binary/4337 s/4342)))))))))))
            read/4629 =
              (function input_source/4631 input_kind/4632
                (funct-body Ppxlib__Utils.Ast_io.read src/utils.ml(152)<ghost>:5649-5998
                  (before Ppxlib__Utils.Ast_io.read src/utils.ml(153):5680-5998
                    (try
                      (if input_source/4631
                        (let (fn/4633 =a (field_imm 0 input_source/4631))
                          (before Ppxlib__Utils.Ast_io.read src/utils.ml(156):5781-5834
                            (after Ppxlib__Utils.Ast_io.read src/utils.ml(156):5781-5834
                              (apply
                                (field_imm 1
                                  (field_imm 88 (global Ppxlib__Import!)))
                                0 fn/4633
                                (after Ppxlib__Utils.Ast_io.read src/utils.ml(156):5808-5834
                                  (function param/14963 stub
                                    (apply from_channel/4333 param/14963
                                      input_kind/4632)))))))
                        (before Ppxlib__Utils.Ast_io.read src/utils.ml(155):5731-5761
                          (after Ppxlib__Utils.Ast_io.read src/utils.ml(155):5731-5761
                            (apply from_channel/4333
                              (field_imm 40 (global Stdlib!))
                              input_kind/4632))))
                     with exn/4638
                      (before Ppxlib__Utils.Ast_io.read src/utils.ml(157):5851-5998
                        (let
                          (*match*/14962 =
                             (after Ppxlib__Utils.Ast_io.read src/utils.ml(158):5865-5890
                               (apply
                                 (field_imm 5
                                   (field_imm 12 (global Ppxlib__Location!)))
                                 exn/4638)))
                          (if *match*/14962
                            (let (error/4639 =a (field_imm 0 *match*/14962))
                              (before Ppxlib__Utils.Ast_io.read src/utils.ml(160):5944-5997
                                (makeblock 1
                                  (makeblock 2 error/4639
                                    fall_back_input_version/1689))))
                            (before Ppxlib__Utils.Ast_io.read src/utils.ml(159):5912-5921
                              (reraise
                                (after Ppxlib__Utils.Ast_io.read src/utils.ml(159):5912-5921
                                  exn/4638))))))))))
            write/4642 =
              (function oc/4644 param/4947 add_ppx_context/4649
                (funct-body Ppxlib__Utils.Ast_io.write src/utils.ml(162)<ghost>:6012-7141
                  (let
                    (ast/4647 =a (field_imm 2 param/4947)
                     Input_version/4646 =a (field_imm 1 param/4947)
                     input_name/4645 =a (field_imm 0 param/4947))
                    (before Ppxlib__Utils.Ast_io.write src/utils.ml(164):6104-7141
                      (let
                        (Input_version/4648 =
                           (module-defn(Input_version/4648) Ppxlib__Utils.Ast_io.write src/utils.ml(162):6053-6066
                             Input_version/4646)
                         Ppxlib_to_input/4689 =
                           (module-defn(Ppxlib_to_input/4689) Ppxlib__Utils.Ast_io.write src/utils.ml(164):6115-6130
                             (apply
                               (apply
                                 (let
                                   (let/14967 =
                                      (field_imm 16
                                        (global Ppxlib_ast__Versions!)))
                                   (field_imm 16
                                     (global Ppxlib_ast__Versions!)))
                                 (let
                                   (let/14964 =
                                      (field_imm 13
                                        (global Ppxlib_ast__Versions!))
                                    let/14965 =a
                                      (field_imm 13
                                        (global Ppxlib_ast__Versions!)))
                                   (makeblock 0
                                     (let
                                       (let/14966 =a (field_mut 0 let/14965))
                                       (makeblock 0 (field_mut 1 let/14966)
                                         (field_mut 2 let/14966)))
                                     (field_mut 1 let/14965)
                                     (field_mut 2 let/14965)
                                     (field_mut 3 let/14965)
                                     (field_mut 4 let/14965))))
                               Input_version/4648))
                         Ocaml_to_input/4729 =
                           (module-defn(Ocaml_to_input/4729) Ppxlib__Utils.Ast_io.write src/utils.ml(165):6180-6194
                             (apply
                               (apply
                                 (let
                                   (let/14971 =
                                      (field_imm 16
                                        (global Ppxlib_ast__Versions!)))
                                   (field_imm 16
                                     (global Ppxlib_ast__Versions!)))
                                 (let
                                   (let/14968 =
                                      (field_imm 10
                                        (global Ppxlib_ast__Versions!))
                                    let/14969 =a
                                      (field_imm 10
                                        (global Ppxlib_ast__Versions!)))
                                   (makeblock 0
                                     (let
                                       (let/14970 =a (field_mut 0 let/14969))
                                       (makeblock 0 (field_mut 1 let/14970)
                                         (field_mut 2 let/14970)))
                                     (field_mut 1 let/14969)
                                     (field_mut 2 let/14969)
                                     (field_mut 3 let/14969)
                                     (field_mut 4 let/14969))))
                               Input_version/4648)))
                        (switch* ast/4647
                         case tag 0:
                          (let (sg/4730 =a (field_imm 0 ast/4647))
                            (before Ppxlib__Utils.Ast_io.write src/utils.ml(168):6287-6701
                              (let
                                (sg/4732 =
                                   (if add_ppx_context/4649
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6505
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6505
                                         (revapply
                                           (after Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6460
                                             (revapply
                                               (after Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6381
                                                 (apply
                                                   (field_imm 1
                                                     (field_imm 7
                                                       (field_imm 1
                                                         (global Ppxlib_ast__Import!))))
                                                   sg/4730))
                                               (after Ppxlib__Utils.Ast_io.write src/utils.ml(171):6397-6460
                                                 (apply
                                                   (field_imm 2
                                                     (global Astlib__Ast_metadata!))
                                                   "ppx_driver"))))
                                           (field_imm 1 Ocaml_to_input/4729))))
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(173):6521-6554
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(173):6521-6554
                                         (apply
                                           (field_imm 1 Ppxlib_to_input/4689)
                                           sg/4730)))))
                                (before Ppxlib__Utils.Ast_io.write src/utils.ml(175):6574-6701
                                  (seq
                                    (after Ppxlib__Utils.Ast_io.write src/utils.ml(175):6574-6637
                                      (apply (field_imm 68 (global Stdlib!))
                                        oc/4644
                                        (field_imm 1
                                          (field_imm 1
                                            (field_imm 0 Input_version/4648)))))
                                    (before Ppxlib__Utils.Ast_io.write src/utils.ml(176):6647-6701
                                      (seq
                                        (after Ppxlib__Utils.Ast_io.write src/utils.ml(176):6647-6673
                                          (apply
                                            (field_imm 74 (global Stdlib!))
                                            oc/4644 input_name/4645))
                                        (before Ppxlib__Utils.Ast_io.write src/utils.ml(177):6683-6701
                                          (after Ppxlib__Utils.Ast_io.write src/utils.ml(177):6683-6701
                                            (apply
                                              (field_imm 74 (global Stdlib!))
                                              oc/4644 sg/4732))))))))))
                         case tag 1:
                          (let (st/4731 =a (field_imm 0 ast/4647))
                            (before Ppxlib__Utils.Ast_io.write src/utils.ml(179):6727-7141
                              (let
                                (st/4946 =
                                   (if add_ppx_context/4649
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6945
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6945
                                         (revapply
                                           (after Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6900
                                             (revapply
                                               (after Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6821
                                                 (apply
                                                   (field_imm 0
                                                     (field_imm 7
                                                       (field_imm 1
                                                         (global Ppxlib_ast__Import!))))
                                                   st/4731))
                                               (after Ppxlib__Utils.Ast_io.write src/utils.ml(182):6837-6900
                                                 (apply
                                                   (field_imm 0
                                                     (global Astlib__Ast_metadata!))
                                                   "ppx_driver"))))
                                           (field_imm 0 Ocaml_to_input/4729))))
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(184):6961-6994
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(184):6961-6994
                                         (apply
                                           (field_imm 0 Ppxlib_to_input/4689)
                                           st/4731)))))
                                (before Ppxlib__Utils.Ast_io.write src/utils.ml(186):7014-7141
                                  (seq
                                    (after Ppxlib__Utils.Ast_io.write src/utils.ml(186):7014-7077
                                      (apply (field_imm 68 (global Stdlib!))
                                        oc/4644
                                        (field_imm 0
                                          (field_imm 1
                                            (field_imm 0 Input_version/4648)))))
                                    (before Ppxlib__Utils.Ast_io.write src/utils.ml(187):7087-7141
                                      (seq
                                        (after Ppxlib__Utils.Ast_io.write src/utils.ml(187):7087-7113
                                          (apply
                                            (field_imm 74 (global Stdlib!))
                                            oc/4644 input_name/4645))
                                        (before Ppxlib__Utils.Ast_io.write src/utils.ml(188):7123-7141
                                          (after Ppxlib__Utils.Ast_io.write src/utils.ml(188):7123-7141
                                            (apply
                                              (field_imm 74 (global Stdlib!))
                                              oc/4644 st/4946))))))))))))))))
            Read_bin/4969 =
              (module-defn(Read_bin/4969) Ppxlib__Utils.Ast_io src/utils.ml(190):7145-7747
                (let
                  (read_binary/4954 =
                     (function fn/4956
                       (funct-body Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(194)<ghost>:7292-7674
                         (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(195):7303-7674
                           (let
                             (*match*/14974 =
                                (after Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(196):7317-7389
                                  (apply
                                    (field_imm 1
                                      (field_imm 88 (global Ppxlib__Import!)))
                                    0 fn/4956
                                    (after Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(196):7344-7389
                                      (function param/14973 stub
                                        (apply from_channel/4333 param/14973
                                          0))))))
                             (switch* *match*/14974
                              case tag 0:
                               (let
                                 (*match*/14975 =a
                                    (field_imm 0 *match*/14974)
                                  ast/4958 =a (field_imm 2 *match*/14975)
                                  *match*/14976 =a
                                    (field_imm 1 *match*/14975)
                                  input_name/4957 =a
                                    (field_imm 0 *match*/14975))
                                 (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(199):7448-7624
                                   (let
                                     (ast/4960 =
                                        (switch* ast/4958
                                         case tag 0:
                                          (let
                                            (signature/4962 =a
                                               (field_imm 0 ast/4958))
                                            (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(202):7564-7578
                                              (makeblock 0 signature/4962)))
                                         case tag 1:
                                          (let
                                            (structure/4961 =a
                                               (field_imm 0 ast/4958))
                                            (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(201):7517-7531
                                              (makeblock 1 structure/4961)))))
                                     (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(204):7602-7624
                                       (makeblock 0
                                         (makeblock 0 ast/4960
                                           input_name/4957))))))
                              case tag 1:
                               (let (e/4959 =a (field_imm 0 *match*/14974))
                                 (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(205):7644-7674
                                   (makeblock 1
                                     (after Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(205):7650-7674
                                       (apply read_error_to_string/3641
                                         e/4959))))))))))
                   get_ast/4963 =
                     (function t/4965
                       (funct-body Ppxlib__Utils.Ast_io.Read_bin.get_ast src/utils.ml(207)<ghost>:7692-7701
                         (before Ppxlib__Utils.Ast_io.Read_bin.get_ast src/utils.ml(207):7696-7701
                           (field_imm 0 t/4965))))
                   get_input_name/4966 =
                     (function t/4968
                       (funct-body Ppxlib__Utils.Ast_io.Read_bin.get_input_name src/utils.ml(208)<ghost>:7725-7741
                         (before Ppxlib__Utils.Ast_io.Read_bin.get_input_name src/utils.ml(208):7729-7741
                           (field_imm 1 t/4968)))))
                  (pseudo Ppxlib__Utils.Ast_io.Read_bin src/utils.ml(190):7163-7747
                    (makeblock 0 read_binary/4954 get_ast/4963
                      get_input_name/4966)))))
           (pseudo Ppxlib__Utils.Ast_io src/utils.ml(36):963-7751
             (makeblock 0 fall_back_input_version/1689
               read_error_to_string/3641 parse_source_code/3648
               magic_length/4223 read_magic/4327 from_channel/4333 read/4629
               write/4642 Read_bin/4969))))
     System/5092 =
       (module-defn(System/5092) Ppxlib__Utils src/utils.ml(212):7753-8107
         (let
           (run_preprocessor/4971 =
              (function pp/4973 input/4974 output/4975
                (funct-body Ppxlib__Utils.System.run_preprocessor src/utils.ml(213)<ghost>:7799-8103
                  (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(214):7824-8103
                    (let
                      (command/4976 =
                         (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(215):7844-7990
                           (apply (field_imm 3 (global Stdlib__printf!))
                             [0:
                              [2: 0 [12: ' ' [2: 0 [11: " > " [2: 0 0]]]]]
                              "%s %s > %s"]
                             pp/4973
                             (if
                               (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7887-7909
                                 (apply
                                   (field_imm 47
                                     (field_imm 96 (global Ppxlib__Import!)))
                                   input/4974 "-"))
                               (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7915-7917
                                 "")
                               (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7923-7950
                                 (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7923-7950
                                   (apply
                                     (field_imm 20
                                       (global Stdlib__filename!))
                                     input/4974))))
                             (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(217):7960-7990
                               (apply
                                 (field_imm 20 (global Stdlib__filename!))
                                 output/4975)))))
                      (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8002-8103
                        (if
                          (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8005-8035
                            (apply (field_imm 73 (global Ppxlib__Import!))
                              (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8005-8031
                                (caml_sys_system_command command/4976))
                              0))
                          (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8041-8046
                            [0: 0])
                          (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(220):8056-8103
                            (makeblock 1
                              (makeblock 0 command/4976
                                (field_imm 0 Ast_io/4970)))))))))))
           (pseudo Ppxlib__Utils.System src/utils.ml(212):7769-8107
             (makeblock 0 run_preprocessor/4971)))))
    (pseudo <unknown location>
      (makeblock 0 with_output/550 Kind/647 Intf_or_impl/1687
        (makeblock 0 (field_mut 6 Ast_io/4970) (field_mut 7 Ast_io/4970)
          (field_mut 8 Ast_io/4970))
        System/5092))))
(setglobal Ppxlib__Utils!
  (let
    (with_output/550 =
       (function fn/552 binary/553 f/554
         (funct-body Ppxlib__Utils.with_output src/utils.ml(3)<ghost>:29-143
           (before Ppxlib__Utils.with_output src/utils.ml(4):47-143
             (catch
               (if fn/552
                 (let (fn/555 =a (field_imm 0 fn/552))
                   (stringswitch fn/555
                    case "-": (exit 1)
                    default:
                     (before Ppxlib__Utils.with_output src/utils.ml(6):108-143
                       (after Ppxlib__Utils.with_output src/utils.ml(6):108-143
                         (apply
                           (field_imm 1
                             (field_imm 95 (global Ppxlib__Import!)))
                           (makeblock 0 binary/553) 0 0 0 fn/555 f/554)))))
                 (exit 1))
              with (1)
               (before Ppxlib__Utils.with_output src/utils.ml(5):84-92
                 (after Ppxlib__Utils.with_output src/utils.ml(5):84-92
                   (apply f/554 (field_imm 41 (global Stdlib!)))))))))
     Kind/647 =
       (module-defn(Kind/647) Ppxlib__Utils src/utils.ml(8):145-483
         (let
           (of_filename/608 =
              (function fn/610
                (funct-body Ppxlib__Utils.Kind.of_filename src/utils.ml(11)<ghost>:208-363
                  (before Ppxlib__Utils.Kind.of_filename src/utils.ml(12):228-363
                    (if
                      (after Ppxlib__Utils.Kind.of_filename src/utils.ml(12):231-268
                        (apply (field_imm 6 (global Stdlib__filename!))
                          fn/610 ".ml"))
                      (before Ppxlib__Utils.Kind.of_filename src/utils.ml(12):274-283
                        [0: 1])
                      (before Ppxlib__Utils.Kind.of_filename src/utils.ml(13):293-363
                        (if
                          (after Ppxlib__Utils.Kind.of_filename src/utils.ml(13):296-334
                            (apply (field_imm 6 (global Stdlib__filename!))
                              fn/610 ".mli"))
                          (before Ppxlib__Utils.Kind.of_filename src/utils.ml(13):340-349
                            [0: 0])
                          (before Ppxlib__Utils.Kind.of_filename src/utils.ml(14):359-363
                            0)))))))
            describe/633 =
              (function param/635
                (funct-body Ppxlib__Utils.Kind.describe src/utils.ml(16):382-437
                  (if param/635
                    (before Ppxlib__Utils.Kind.describe src/utils.ml(16):399-415
                      "implementation")
                    (before Ppxlib__Utils.Kind.describe src/utils.ml(16):426-437
                      "interface"))))
            equal/636 = (field_imm 1 (field_imm 70 (global Ppxlib__Import!))))
           (pseudo Ppxlib__Utils.Kind src/utils.ml(8):159-483
             (makeblock 0 of_filename/608 describe/633 equal/636))))
     Intf_or_impl/1687 =
       (module-defn(Intf_or_impl/1687) Ppxlib__Utils src/utils.ml(20):485-945
         (let
           (map/651 =
              (function t/653 map/743
                (funct-body Ppxlib__Utils.Intf_or_impl.map src/utils.ml(23)<ghost>:574-697
                  (before Ppxlib__Utils.Intf_or_impl.map src/utils.ml(24):607-697
                    (switch* t/653
                     case tag 0:
                      (let (x/745 =a (field_imm 0 t/653))
                        (before Ppxlib__Utils.Intf_or_impl.map src/utils.ml(26):675-697
                          (makeblock 0
                            (after Ppxlib__Utils.Intf_or_impl.map src/utils.ml(26):680-697
                              (send map/743 359375608 x/745)))))
                     case tag 1:
                      (let (x/744 =a (field_imm 0 t/653))
                        (before Ppxlib__Utils.Intf_or_impl.map src/utils.ml(25):636-658
                          (makeblock 1
                            (after Ppxlib__Utils.Intf_or_impl.map src/utils.ml(25):641-658
                              (send map/743 -951102413 x/744)))))))))
            map_with_context/1678 =
              (function t/1680 map/1681 ctx/1682
                (funct-body Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(28)<ghost>:722-872
                  (before Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(29):774-872
                    (switch* t/1680
                     case tag 0:
                      (let (x/1684 =a (field_imm 0 t/1680))
                        (before Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(31):846-872
                          (makeblock 0
                            (after Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(31):851-872
                              (send map/1681 359375608 ctx/1682 x/1684)))))
                     case tag 1:
                      (let (x/1683 =a (field_imm 0 t/1680))
                        (before Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(30):803-829
                          (makeblock 1
                            (after Ppxlib__Utils.Intf_or_impl.map_with_context src/utils.ml(30):808-829
                              (send map/1681 -951102413 ctx/1682 x/1683)))))))))
            kind/1685 =
              (function param/1686
                (funct-body Ppxlib__Utils.Intf_or_impl.kind src/utils.ml(33):901-941
                  (switch* param/1686
                   case tag 0:
                    (before Ppxlib__Utils.Intf_or_impl.kind src/utils.ml(33):920-924
                      0)
                   case tag 1:
                    (before Ppxlib__Utils.Intf_or_impl.kind src/utils.ml(33):937-941
                      1)))))
           (pseudo Ppxlib__Utils.Intf_or_impl src/utils.ml(20):507-945
             (makeblock 0 map/651 map_with_context/1678 kind/1685))))
     Ast_io/4970 =
       (module-defn(Ast_io/4970) Ppxlib__Utils src/utils.ml(36):947-7751
         (let
           (fall_back_input_version/1689 =
              (let
                (let/14326 = (field_imm 10 (global Ppxlib_ast__Versions!))
                 let/14327 =a (field_imm 10 (global Ppxlib_ast__Versions!)))
                (makeblock 0
                  (let (let/14328 =a (field_mut 0 let/14327))
                    (makeblock 0 (field_mut 1 let/14328)
                      (field_mut 2 let/14328)))
                  (field_mut 1 let/14327) (field_mut 2 let/14327)
                  (field_mut 3 let/14327) (field_mut 4 let/14327)))
            read_error_to_string/3641 =
              (function error/3643
                (funct-body Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(58)<ghost>:1674-2004
                  (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(59):1701-2004
                    (switch* error/3643
                     case int 0:
                      (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(60):1744-1769
                        "Error: Not a binary ast")
                     case tag 0:
                      (let (s/3644 =a (field_imm 0 error/3643))
                        (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(61):1802-1831
                          (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(61):1802-1831
                            (apply (field_imm 30 (global Stdlib!))
                              "Error: Unknown version " s/3644))))
                     case tag 1:
                      (let (loc/3645 =a (field_imm 0 error/3643))
                        (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(63):1877-1927
                          (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(63):1877-1927
                            (apply (field_imm 30 (global Stdlib!))
                              "Source parse error:"
                              (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(63):1901-1927
                                (apply
                                  (field_imm 2
                                    (field_imm 12 (global Ppxlib__Location!)))
                                  loc/3645))))))
                     case tag 2:
                      (let (loc/3646 =a (field_imm 0 error/3643))
                        (before Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(64):1959-2004
                          (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(64):1959-2004
                            (apply (field_imm 30 (global Stdlib!))
                              "System error: "
                              (after Ppxlib__Utils.Ast_io.read_error_to_string src/utils.ml(64):1978-2004
                                (apply
                                  (field_imm 2
                                    (field_imm 12 (global Ppxlib__Location!)))
                                  loc/3646))))))))))
            parse_source_code/3648 =
              (function kind/3650 input_name/3651
                prefix_read_from_source/3652 ic/3653
                (funct-body Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(66)<ghost>:2030-3529
                  (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(70):2228-3529
                    (let
                      (input_version/3654 =
                         (let
                           (let/14335 =
                              (field_imm 10 (global Ppxlib_ast__Versions!))
                            let/14336 =a
                              (field_imm 10 (global Ppxlib_ast__Versions!)))
                           (makeblock 0
                             (let (let/14337 =a (field_mut 0 let/14336))
                               (makeblock 0 (field_mut 1 let/14337)
                                 (field_mut 2 let/14337)))
                             (field_mut 1 let/14336) (field_mut 2 let/14336)
                             (field_mut 3 let/14336) (field_mut 4 let/14336))))
                      (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(71):2297-3529
                        (try
                          (let
                            (lexbuf/3659 =
                               (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(81):2780-2802
                                 (apply
                                   (field_imm 1 (global Stdlib__lexing!)) 0
                                   ic/3653)))
                            (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(82):2812-3369
                              (let
                                (len/3690 =[int]
                                   (string.length
                                     prefix_read_from_source/3652))
                                (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(83):2869-3369
                                  (seq
                                    (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(83):2869-2973
                                      (apply
                                        (field_imm 73
                                          (field_imm 82
                                            (global Ppxlib__Import!)))
                                        prefix_read_from_source/3652 0
                                        (field_mut 1 lexbuf/3659) 0 len/3690))
                                    (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(85):2981-3369
                                      (seq
                                        (setfield_imm 2 lexbuf/3659 len/3690)
                                        (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(86):3017-3369
                                          (seq
                                            (setfield_ptr 11 lexbuf/3659
                                              (makeblock 0 (*,int,int,int)
                                                input_name/3651 1 0 0))
                                            (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(88):3121-3369
                                              (seq
                                                (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(88):3121-3157
                                                  (apply
                                                    (field_imm 0
                                                      (global Ppxlib__Skip_hash_bang!))
                                                    lexbuf/3659))
                                                (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(89):3165-3369
                                                  (let
                                                    (ast/3933 =
                                                       (if kind/3650
                                                         (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(92):3282-3316
                                                           (makeblock 1
                                                             (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(92):3287-3316
                                                               (apply
                                                                 (field_imm 1
                                                                   (field_imm 2
                                                                    (global Ppxlib_ast__Import!)))
                                                                 lexbuf/3659))))
                                                         (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(91):3234-3263
                                                           (makeblock 0
                                                             (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(91):3239-3263
                                                               (apply
                                                                 (field_imm 2
                                                                   (field_imm 2
                                                                    (global Ppxlib_ast__Import!)))
                                                                 lexbuf/3659))))))
                                                    (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(94):3332-3369
                                                      (makeblock 0
                                                        (makeblock 0
                                                          input_name/3651
                                                          input_version/3654
                                                          ast/3933))))))))))))))))
                         with exn/4219
                          (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(95):3386-3529
                            (let
                              (*match*/14332 =
                                 (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(96):3400-3425
                                   (apply
                                     (field_imm 5
                                       (field_imm 12
                                         (global Ppxlib__Location!)))
                                     exn/4219)))
                              (if *match*/14332
                                (let
                                  (error/4220 =a (field_imm 0 *match*/14332))
                                  (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(98):3479-3528
                                    (makeblock 1
                                      (makeblock 1 error/4220
                                        input_version/3654))))
                                (before Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(97):3447-3456
                                  (reraise
                                    (after Ppxlib__Utils.Ast_io.parse_source_code src/utils.ml(97):3447-3456
                                      exn/4219))))))))))))
            magic_length/4223 =[int]
              (string.length (field_imm 1 (global Astlib__Config!)))
            read_magic/4327 =
              (function ic/4329
                (funct-body Ppxlib__Utils.Ast_io.read_magic src/utils.ml(102)<ghost>:3620-3809
                  (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(103):3629-3809
                    (let
                      (buf/4330 =
                         (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(103):3639-3664
                           (caml_create_bytes magic_length/4223)))
                      (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(104):3672-3809
                        (let
                          (len/4331 =[int]
                             (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(104):3682-3709
                               (apply (field_imm 86 (global Stdlib!)) ic/4329
                                 buf/4330 0 magic_length/4223)))
                          (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(105):3717-3809
                            (let
                              (s/4332 =
                                 (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(105):3725-3757
                                   (apply
                                     (field_imm 72
                                       (field_imm 82
                                         (global Ppxlib__Import!)))
                                     buf/4330 0 len/4331)))
                              (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3765-3809
                                (if
                                  (after Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3768-3786
                                    (apply
                                      (field_imm 73 (global Ppxlib__Import!))
                                      len/4331 magic_length/4223))
                                  (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3792-3796
                                    (makeblock 0 s/4332))
                                  (before Ppxlib__Utils.Ast_io.read_magic src/utils.ml(106):3802-3809
                                    (makeblock 1 s/4332))))))))))))
            from_channel/4333 =
              (function ch/4335 input_kind/4336
                (funct-body Ppxlib__Utils.Ast_io.from_channel src/utils.ml(108)<ghost>:3830-5636
                  (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(109):3851-5636
                    (let
                      (handle_non_binary/4337 =
                         (function prefix_read_from_source/4339
                           (funct-body Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(109)<ghost>:3873-4099
                             (before Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(110):3905-4099
                               (if input_kind/4336
                                 (let
                                   (input_name/4341 =a
                                      (field_imm 1 input_kind/4336)
                                    kind/4340 =a
                                      (field_imm 0 input_kind/4336))
                                   (before Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(112):3983-4046
                                     (after Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(112):3983-4046
                                       (apply parse_source_code/3648
                                         kind/4340 input_name/4341
                                         prefix_read_from_source/4339
                                         ch/4335))))
                                 (before Ppxlib__Utils.Ast_io.from_channel.handle_non_binary src/utils.ml(113):4077-4099
                                   [1: 0]))))))
                      (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(115):4111-5636
                        (let
                          (*match*/14961 =
                             (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(115):4117-4130
                               (apply read_magic/4327 ch/4335)))
                          (switch* *match*/14961
                           case tag 0:
                            (let (s/4343 =a (field_imm 0 *match*/14961))
                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(117):4187-5636
                                (let
                                  (*match*/14960 =
                                     (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(118):4203-4228
                                       (apply
                                         (field_imm 0
                                           (field_imm 17
                                             (global Ppxlib_ast__Versions!)))
                                         s/4343)))
                                  (switch* *match*/14960
                                   case int 0:
                                    (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(142):5215-5635
                                      (if
                                        (||
                                          (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(143):5232-5368
                                            (apply
                                              (field_imm 47
                                                (field_imm 96
                                                  (global Ppxlib__Import!)))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(144):5261-5289
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  s/4343 0 9))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(145):5306-5368
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  (field_imm 1
                                                    (global Astlib__Config!))
                                                  0 9))))
                                          (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(146):5386-5528
                                            (apply
                                              (field_imm 47
                                                (field_imm 96
                                                  (global Ppxlib__Import!)))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(147):5418-5446
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  s/4343 0 9))
                                              (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(148):5466-5528
                                                (apply
                                                  (field_imm 6
                                                    (field_imm 96
                                                      (global Ppxlib__Import!)))
                                                  (field_imm 0
                                                    (global Astlib__Config!))
                                                  0 9)))))
                                        (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(149):5546-5598
                                          (makeblock 1
                                            (makeblock 0 s/4343
                                              fall_back_input_version/1689)))
                                        (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(150):5616-5635
                                          (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(150):5616-5635
                                            (apply handle_non_binary/4337
                                              s/4343)))))
                                   case tag 0:
                                    (let
                                      (Input_version/4387 =a
                                         (field_imm 0 *match*/14960))
                                      (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(131)<ghost>:4777-5181
                                        (let
                                          (Input_version/4558 =
                                             (module-defn(Input_version/4558) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(130):4731-4744
                                               Input_version/4387)
                                           input_name/4559 =
                                             (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(131):4803-4817
                                               (apply
                                                 (field_imm 91
                                                   (global Stdlib!))
                                                 ch/4335)))
                                          (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(132):4833-5181
                                            (let
                                              (ast/4560 =
                                                 (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(132):4843-4857
                                                   (apply
                                                     (field_imm 91
                                                       (global Stdlib!))
                                                     ch/4335)))
                                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(133):4873-5181
                                                (let
                                                  (Input_to_ppxlib/4600 =
                                                     (module-defn(Input_to_ppxlib/4600) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(133):4884-4899
                                                       (apply
                                                         (apply
                                                           (let
                                                             (let/14958 =
                                                                (field_imm 16
                                                                  (global Ppxlib_ast__Versions!)))
                                                             (field_imm 16
                                                               (global Ppxlib_ast__Versions!)))
                                                           Input_version/4558)
                                                         (let
                                                           (let/14955 =
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!))
                                                            let/14956 =a
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!)))
                                                           (makeblock 0
                                                             (let
                                                               (let/14957 =a
                                                                  (field_mut 0
                                                                    let/14956))
                                                               (makeblock 0
                                                                 (field_mut 1
                                                                   let/14957)
                                                                 (field_mut 2
                                                                   let/14957)))
                                                             (field_mut 1
                                                               let/14956)
                                                             (field_mut 2
                                                               let/14956)
                                                             (field_mut 3
                                                               let/14956)
                                                             (field_mut 4
                                                               let/14956)))))
                                                   ast/4601 =
                                                     (makeblock 1
                                                       (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(134):4974-5010
                                                         (apply
                                                           (field_imm 0
                                                             Input_to_ppxlib/4600)
                                                           ast/4560))))
                                                  (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(135):5026-5181
                                                    (makeblock 0
                                                      (makeblock 0
                                                        input_name/4559
                                                        Input_version/4558
                                                        ast/4601))))))))))
                                   case tag 1:
                                    (let
                                      (Input_version/4384 =a
                                         (field_imm 0 *match*/14960))
                                      (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(120)<ghost>:4303-4707
                                        (let
                                          (Input_version/4388 =
                                             (module-defn(Input_version/4388) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(119):4257-4270
                                               Input_version/4384)
                                           input_name/4389 =
                                             (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(120):4329-4343
                                               (apply
                                                 (field_imm 91
                                                   (global Stdlib!))
                                                 ch/4335)))
                                          (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(121):4359-4707
                                            (let
                                              (ast/4390 =
                                                 (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(121):4369-4383
                                                   (apply
                                                     (field_imm 91
                                                       (global Stdlib!))
                                                     ch/4335)))
                                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(122):4399-4707
                                                (let
                                                  (Input_to_ppxlib/4453 =
                                                     (module-defn(Input_to_ppxlib/4453) Ppxlib__Utils.Ast_io.from_channel src/utils.ml(122):4410-4425
                                                       (apply
                                                         (apply
                                                           (let
                                                             (let/14953 =
                                                                (field_imm 16
                                                                  (global Ppxlib_ast__Versions!)))
                                                             (field_imm 16
                                                               (global Ppxlib_ast__Versions!)))
                                                           Input_version/4388)
                                                         (let
                                                           (let/14950 =
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!))
                                                            let/14951 =a
                                                              (field_imm 13
                                                                (global Ppxlib_ast__Versions!)))
                                                           (makeblock 0
                                                             (let
                                                               (let/14952 =a
                                                                  (field_mut 0
                                                                    let/14951))
                                                               (makeblock 0
                                                                 (field_mut 1
                                                                   let/14952)
                                                                 (field_mut 2
                                                                   let/14952)))
                                                             (field_mut 1
                                                               let/14951)
                                                             (field_mut 2
                                                               let/14951)
                                                             (field_mut 3
                                                               let/14951)
                                                             (field_mut 4
                                                               let/14951)))))
                                                   ast/4454 =
                                                     (makeblock 0
                                                       (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(123):4500-4536
                                                         (apply
                                                           (field_imm 1
                                                             Input_to_ppxlib/4453)
                                                           ast/4390))))
                                                  (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(124):4552-4707
                                                    (makeblock 0
                                                      (makeblock 0
                                                        input_name/4389
                                                        Input_version/4388
                                                        ast/4454))))))))))))))
                           case tag 1:
                            (let (s/4342 =a (field_imm 0 *match*/14961))
                              (before Ppxlib__Utils.Ast_io.from_channel src/utils.ml(116):4153-4172
                                (after Ppxlib__Utils.Ast_io.from_channel src/utils.ml(116):4153-4172
                                  (apply handle_non_binary/4337 s/4342)))))))))))
            read/4629 =
              (function input_source/4631 input_kind/4632
                (funct-body Ppxlib__Utils.Ast_io.read src/utils.ml(152)<ghost>:5649-5998
                  (before Ppxlib__Utils.Ast_io.read src/utils.ml(153):5680-5998
                    (try
                      (if input_source/4631
                        (let (fn/4633 =a (field_imm 0 input_source/4631))
                          (before Ppxlib__Utils.Ast_io.read src/utils.ml(156):5781-5834
                            (after Ppxlib__Utils.Ast_io.read src/utils.ml(156):5781-5834
                              (apply
                                (field_imm 1
                                  (field_imm 88 (global Ppxlib__Import!)))
                                0 fn/4633
                                (after Ppxlib__Utils.Ast_io.read src/utils.ml(156):5808-5834
                                  (function param/14963 stub
                                    (apply from_channel/4333 param/14963
                                      input_kind/4632)))))))
                        (before Ppxlib__Utils.Ast_io.read src/utils.ml(155):5731-5761
                          (after Ppxlib__Utils.Ast_io.read src/utils.ml(155):5731-5761
                            (apply from_channel/4333
                              (field_imm 40 (global Stdlib!))
                              input_kind/4632))))
                     with exn/4638
                      (before Ppxlib__Utils.Ast_io.read src/utils.ml(157):5851-5998
                        (let
                          (*match*/14962 =
                             (after Ppxlib__Utils.Ast_io.read src/utils.ml(158):5865-5890
                               (apply
                                 (field_imm 5
                                   (field_imm 12 (global Ppxlib__Location!)))
                                 exn/4638)))
                          (if *match*/14962
                            (let (error/4639 =a (field_imm 0 *match*/14962))
                              (before Ppxlib__Utils.Ast_io.read src/utils.ml(160):5944-5997
                                (makeblock 1
                                  (makeblock 2 error/4639
                                    fall_back_input_version/1689))))
                            (before Ppxlib__Utils.Ast_io.read src/utils.ml(159):5912-5921
                              (reraise
                                (after Ppxlib__Utils.Ast_io.read src/utils.ml(159):5912-5921
                                  exn/4638))))))))))
            write/4642 =
              (function oc/4644 param/4947 add_ppx_context/4649
                (funct-body Ppxlib__Utils.Ast_io.write src/utils.ml(162)<ghost>:6012-7141
                  (let
                    (ast/4647 =a (field_imm 2 param/4947)
                     Input_version/4646 =a (field_imm 1 param/4947)
                     input_name/4645 =a (field_imm 0 param/4947))
                    (before Ppxlib__Utils.Ast_io.write src/utils.ml(164):6104-7141
                      (let
                        (Input_version/4648 =
                           (module-defn(Input_version/4648) Ppxlib__Utils.Ast_io.write src/utils.ml(162):6053-6066
                             Input_version/4646)
                         Ppxlib_to_input/4689 =
                           (module-defn(Ppxlib_to_input/4689) Ppxlib__Utils.Ast_io.write src/utils.ml(164):6115-6130
                             (apply
                               (apply
                                 (let
                                   (let/14967 =
                                      (field_imm 16
                                        (global Ppxlib_ast__Versions!)))
                                   (field_imm 16
                                     (global Ppxlib_ast__Versions!)))
                                 (let
                                   (let/14964 =
                                      (field_imm 13
                                        (global Ppxlib_ast__Versions!))
                                    let/14965 =a
                                      (field_imm 13
                                        (global Ppxlib_ast__Versions!)))
                                   (makeblock 0
                                     (let
                                       (let/14966 =a (field_mut 0 let/14965))
                                       (makeblock 0 (field_mut 1 let/14966)
                                         (field_mut 2 let/14966)))
                                     (field_mut 1 let/14965)
                                     (field_mut 2 let/14965)
                                     (field_mut 3 let/14965)
                                     (field_mut 4 let/14965))))
                               Input_version/4648))
                         Ocaml_to_input/4729 =
                           (module-defn(Ocaml_to_input/4729) Ppxlib__Utils.Ast_io.write src/utils.ml(165):6180-6194
                             (apply
                               (apply
                                 (let
                                   (let/14971 =
                                      (field_imm 16
                                        (global Ppxlib_ast__Versions!)))
                                   (field_imm 16
                                     (global Ppxlib_ast__Versions!)))
                                 (let
                                   (let/14968 =
                                      (field_imm 10
                                        (global Ppxlib_ast__Versions!))
                                    let/14969 =a
                                      (field_imm 10
                                        (global Ppxlib_ast__Versions!)))
                                   (makeblock 0
                                     (let
                                       (let/14970 =a (field_mut 0 let/14969))
                                       (makeblock 0 (field_mut 1 let/14970)
                                         (field_mut 2 let/14970)))
                                     (field_mut 1 let/14969)
                                     (field_mut 2 let/14969)
                                     (field_mut 3 let/14969)
                                     (field_mut 4 let/14969))))
                               Input_version/4648)))
                        (switch* ast/4647
                         case tag 0:
                          (let (sg/4730 =a (field_imm 0 ast/4647))
                            (before Ppxlib__Utils.Ast_io.write src/utils.ml(168):6287-6701
                              (let
                                (sg/4732 =
                                   (if add_ppx_context/4649
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6505
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6505
                                         (apply
                                           (field_imm 1 Ocaml_to_input/4729)
                                           (after Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6460
                                             (apply
                                               (field_imm 2
                                                 (global Astlib__Ast_metadata!))
                                               "ppx_driver"
                                               (after Ppxlib__Utils.Ast_io.write src/utils.ml(170):6342-6381
                                                 (apply
                                                   (field_imm 1
                                                     (field_imm 7
                                                       (field_imm 1
                                                         (global Ppxlib_ast__Import!))))
                                                   sg/4730)))))))
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(173):6521-6554
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(173):6521-6554
                                         (apply
                                           (field_imm 1 Ppxlib_to_input/4689)
                                           sg/4730)))))
                                (before Ppxlib__Utils.Ast_io.write src/utils.ml(175):6574-6701
                                  (seq
                                    (after Ppxlib__Utils.Ast_io.write src/utils.ml(175):6574-6637
                                      (apply (field_imm 68 (global Stdlib!))
                                        oc/4644
                                        (field_imm 1
                                          (field_imm 1
                                            (field_imm 0 Input_version/4648)))))
                                    (before Ppxlib__Utils.Ast_io.write src/utils.ml(176):6647-6701
                                      (seq
                                        (after Ppxlib__Utils.Ast_io.write src/utils.ml(176):6647-6673
                                          (apply
                                            (field_imm 74 (global Stdlib!))
                                            oc/4644 input_name/4645))
                                        (before Ppxlib__Utils.Ast_io.write src/utils.ml(177):6683-6701
                                          (after Ppxlib__Utils.Ast_io.write src/utils.ml(177):6683-6701
                                            (apply
                                              (field_imm 74 (global Stdlib!))
                                              oc/4644 sg/4732))))))))))
                         case tag 1:
                          (let (st/4731 =a (field_imm 0 ast/4647))
                            (before Ppxlib__Utils.Ast_io.write src/utils.ml(179):6727-7141
                              (let
                                (st/4946 =
                                   (if add_ppx_context/4649
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6945
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6945
                                         (apply
                                           (field_imm 0 Ocaml_to_input/4729)
                                           (after Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6900
                                             (apply
                                               (field_imm 0
                                                 (global Astlib__Ast_metadata!))
                                               "ppx_driver"
                                               (after Ppxlib__Utils.Ast_io.write src/utils.ml(181):6782-6821
                                                 (apply
                                                   (field_imm 0
                                                     (field_imm 7
                                                       (field_imm 1
                                                         (global Ppxlib_ast__Import!))))
                                                   st/4731)))))))
                                     (before Ppxlib__Utils.Ast_io.write src/utils.ml(184):6961-6994
                                       (after Ppxlib__Utils.Ast_io.write src/utils.ml(184):6961-6994
                                         (apply
                                           (field_imm 0 Ppxlib_to_input/4689)
                                           st/4731)))))
                                (before Ppxlib__Utils.Ast_io.write src/utils.ml(186):7014-7141
                                  (seq
                                    (after Ppxlib__Utils.Ast_io.write src/utils.ml(186):7014-7077
                                      (apply (field_imm 68 (global Stdlib!))
                                        oc/4644
                                        (field_imm 0
                                          (field_imm 1
                                            (field_imm 0 Input_version/4648)))))
                                    (before Ppxlib__Utils.Ast_io.write src/utils.ml(187):7087-7141
                                      (seq
                                        (after Ppxlib__Utils.Ast_io.write src/utils.ml(187):7087-7113
                                          (apply
                                            (field_imm 74 (global Stdlib!))
                                            oc/4644 input_name/4645))
                                        (before Ppxlib__Utils.Ast_io.write src/utils.ml(188):7123-7141
                                          (after Ppxlib__Utils.Ast_io.write src/utils.ml(188):7123-7141
                                            (apply
                                              (field_imm 74 (global Stdlib!))
                                              oc/4644 st/4946))))))))))))))))
            Read_bin/4969 =
              (module-defn(Read_bin/4969) Ppxlib__Utils.Ast_io src/utils.ml(190):7145-7747
                (let
                  (read_binary/4954 =
                     (function fn/4956
                       (funct-body Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(194)<ghost>:7292-7674
                         (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(195):7303-7674
                           (let
                             (*match*/14974 =
                                (after Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(196):7317-7389
                                  (apply
                                    (field_imm 1
                                      (field_imm 88 (global Ppxlib__Import!)))
                                    0 fn/4956
                                    (after Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(196):7344-7389
                                      (function param/14973 stub
                                        (apply from_channel/4333 param/14973
                                          0))))))
                             (switch* *match*/14974
                              case tag 0:
                               (let
                                 (*match*/14975 =a
                                    (field_imm 0 *match*/14974)
                                  ast/4958 =a (field_imm 2 *match*/14975)
                                  input_name/4957 =a
                                    (field_imm 0 *match*/14975))
                                 (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(199):7448-7624
                                   (let
                                     (ast/4960 =
                                        (switch* ast/4958
                                         case tag 0:
                                          (let
                                            (signature/4962 =a
                                               (field_imm 0 ast/4958))
                                            (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(202):7564-7578
                                              (makeblock 0 signature/4962)))
                                         case tag 1:
                                          (let
                                            (structure/4961 =a
                                               (field_imm 0 ast/4958))
                                            (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(201):7517-7531
                                              (makeblock 1 structure/4961)))))
                                     (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(204):7602-7624
                                       (makeblock 0
                                         (makeblock 0 ast/4960
                                           input_name/4957))))))
                              case tag 1:
                               (let (e/4959 =a (field_imm 0 *match*/14974))
                                 (before Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(205):7644-7674
                                   (makeblock 1
                                     (after Ppxlib__Utils.Ast_io.Read_bin.read_binary src/utils.ml(205):7650-7674
                                       (apply read_error_to_string/3641
                                         e/4959))))))))))
                   get_ast/4963 =
                     (function t/4965
                       (funct-body Ppxlib__Utils.Ast_io.Read_bin.get_ast src/utils.ml(207)<ghost>:7692-7701
                         (before Ppxlib__Utils.Ast_io.Read_bin.get_ast src/utils.ml(207):7696-7701
                           (field_imm 0 t/4965))))
                   get_input_name/4966 =
                     (function t/4968
                       (funct-body Ppxlib__Utils.Ast_io.Read_bin.get_input_name src/utils.ml(208)<ghost>:7725-7741
                         (before Ppxlib__Utils.Ast_io.Read_bin.get_input_name src/utils.ml(208):7729-7741
                           (field_imm 1 t/4968)))))
                  (pseudo Ppxlib__Utils.Ast_io.Read_bin src/utils.ml(190):7163-7747
                    (makeblock 0 read_binary/4954 get_ast/4963
                      get_input_name/4966)))))
           (pseudo Ppxlib__Utils.Ast_io src/utils.ml(36):963-7751
             (makeblock 0 fall_back_input_version/1689
               read_error_to_string/3641 parse_source_code/3648
               magic_length/4223 read_magic/4327 from_channel/4333 read/4629
               write/4642 Read_bin/4969))))
     System/5092 =
       (module-defn(System/5092) Ppxlib__Utils src/utils.ml(212):7753-8107
         (let
           (run_preprocessor/4971 =
              (function pp/4973 input/4974 output/4975
                (funct-body Ppxlib__Utils.System.run_preprocessor src/utils.ml(213)<ghost>:7799-8103
                  (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(214):7824-8103
                    (let
                      (command/4976 =
                         (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(215):7844-7990
                           (apply (field_imm 3 (global Stdlib__printf!))
                             [0:
                              [2: 0 [12: ' ' [2: 0 [11: " > " [2: 0 0]]]]]
                              "%s %s > %s"]
                             pp/4973
                             (if
                               (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7887-7909
                                 (apply
                                   (field_imm 47
                                     (field_imm 96 (global Ppxlib__Import!)))
                                   input/4974 "-"))
                               (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7915-7917
                                 "")
                               (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7923-7950
                                 (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(216):7923-7950
                                   (apply
                                     (field_imm 20
                                       (global Stdlib__filename!))
                                     input/4974))))
                             (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(217):7960-7990
                               (apply
                                 (field_imm 20 (global Stdlib__filename!))
                                 output/4975)))))
                      (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8002-8103
                        (if
                          (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8005-8035
                            (apply (field_imm 73 (global Ppxlib__Import!))
                              (after Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8005-8031
                                (caml_sys_system_command command/4976))
                              0))
                          (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(219):8041-8046
                            [0: 0])
                          (before Ppxlib__Utils.System.run_preprocessor src/utils.ml(220):8056-8103
                            (makeblock 1
                              (makeblock 0 command/4976
                                (field_imm 0 Ast_io/4970)))))))))))
           (pseudo Ppxlib__Utils.System src/utils.ml(212):7769-8107
             (makeblock 0 run_preprocessor/4971)))))
    (pseudo <unknown location>
      (makeblock 0 with_output/550 Kind/647 Intf_or_impl/1687
        (makeblock 0 (field_mut 6 Ast_io/4970) (field_mut 7 Ast_io/4970)
          (field_mut 8 Ast_io/4970))
        System/5092))))
