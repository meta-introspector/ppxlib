[
  structure_item (src/caller_id.ml[1,0+0]..[1,0+63])
    Pstr_attribute "ocaml.text"
    [
      structure_item (src/caller_id.ml[1,0+0]..[1,0+63])
        Pstr_eval
        expression (src/caller_id.ml[1,0+0]..[1,0+63])
          Pexp_constant PConst_string(" Small helper to find out who is the caller of a function ",(src/caller_id.ml[1,0+0]..[1,0+63]),None)
    ]
  structure_item (src/caller_id.ml[3,65+0]..[3,65+12])
    Pstr_open Override
    module_expr (src/caller_id.ml[3,65+6]..[3,65+12])
      Pmod_ident "Import" (src/caller_id.ml[3,65+6]..[3,65+12])
  structure_item (src/caller_id.ml[4,78+0]..[4,78+33])
    Pstr_module
    "Printexc" (src/caller_id.ml[4,78+7]..[4,78+15])
      module_expr (src/caller_id.ml[4,78+18]..[4,78+33])
        Pmod_ident "Stdlib.Printexc" (src/caller_id.ml[4,78+18]..[4,78+33])
  structure_item (src/caller_id.ml[6,113+0]..[6,113+33])
    Pstr_type Rec
    [
      type_declaration "t" (src/caller_id.ml[6,113+5]..[6,113+6]) (src/caller_id.ml[6,113+0]..[6,113+33])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/caller_id.ml[6,113+9]..[6,113+33])
              Ptyp_constr "option" (src/caller_id.ml[6,113+27]..[6,113+33])
              [
                core_type (src/caller_id.ml[6,113+9]..[6,113+26])
                  Ptyp_constr "Printexc.location" (src/caller_id.ml[6,113+9]..[6,113+26])
                  []
              ]
    ]
  structure_item (src/caller_id.ml[8,148+0]..[23,619+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/caller_id.ml[8,148+4]..[8,148+7])
          Ppat_var "get" (src/caller_id.ml[8,148+4]..[8,148+7])
        expression (src/caller_id.ml[8,148+8]..[23,619+8]) ghost
          Pexp_fun
          Labelled "skip"
          None
          pattern (src/caller_id.ml[8,148+9]..[8,148+13])
            Ppat_var "skip" (src/caller_id.ml[8,148+9]..[8,148+13])
          expression (src/caller_id.ml[9,164+2]..[23,619+8])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/caller_id.ml[9,164+6]..[9,164+10])
                  Ppat_var "skip" (src/caller_id.ml[9,164+6]..[9,164+10])
                expression (src/caller_id.ml[9,164+13]..[9,164+29])
                  Pexp_construct "::" (src/caller_id.ml[9,164+22]..[9,164+24])
                  Some
                    expression (src/caller_id.ml[9,164+13]..[9,164+29]) ghost
                      Pexp_tuple
                      [
                        expression (src/caller_id.ml[9,164+13]..[9,164+21])
                          Pexp_ident "__FILE__" (src/caller_id.ml[9,164+13]..[9,164+21])
                        expression (src/caller_id.ml[9,164+25]..[9,164+29])
                          Pexp_ident "skip" (src/caller_id.ml[9,164+25]..[9,164+29])
                      ]
            ]
            expression (src/caller_id.ml[10,197+2]..[23,619+8])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/caller_id.ml[10,197+6]..[10,197+11])
                    Ppat_var "stack" (src/caller_id.ml[10,197+6]..[10,197+11])
                  expression (src/caller_id.ml[10,197+14]..[10,197+39])
                    Pexp_apply
                    expression (src/caller_id.ml[10,197+14]..[10,197+36])
                      Pexp_ident "Printexc.get_callstack" (src/caller_id.ml[10,197+14]..[10,197+36])
                    [
                      <arg>
                      Nolabel
                        expression (src/caller_id.ml[10,197+37]..[10,197+39])
                          Pexp_constant PConst_int (16,None)
                    ]
              ]
              expression (src/caller_id.ml[11,240+2]..[23,619+8])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/caller_id.ml[11,240+6]..[11,240+9])
                      Ppat_var "len" (src/caller_id.ml[11,240+6]..[11,240+9])
                    expression (src/caller_id.ml[11,240+12]..[11,240+47])
                      Pexp_apply
                      expression (src/caller_id.ml[11,240+12]..[11,240+41])
                        Pexp_ident "Printexc.raw_backtrace_length" (src/caller_id.ml[11,240+12]..[11,240+41])
                      [
                        <arg>
                        Nolabel
                          expression (src/caller_id.ml[11,240+42]..[11,240+47])
                            Pexp_ident "stack" (src/caller_id.ml[11,240+42]..[11,240+47])
                      ]
                ]
                expression (src/caller_id.ml[12,291+2]..[23,619+8])
                  Pexp_let Rec
                  [
                    <def>
                      pattern (src/caller_id.ml[12,291+10]..[12,291+14])
                        Ppat_var "loop" (src/caller_id.ml[12,291+10]..[12,291+14])
                      expression (src/caller_id.ml[12,291+15]..[21,535+78]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/caller_id.ml[12,291+15]..[12,291+18])
                          Ppat_var "pos" (src/caller_id.ml[12,291+15]..[12,291+18])
                        expression (src/caller_id.ml[13,312+4]..[21,535+78])
                          Pexp_ifthenelse
                          expression (src/caller_id.ml[13,312+7]..[13,312+16])
                            Pexp_apply
                            expression (src/caller_id.ml[13,312+11]..[13,312+12])
                              Pexp_ident "=" (src/caller_id.ml[13,312+11]..[13,312+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/caller_id.ml[13,312+7]..[13,312+10])
                                  Pexp_ident "pos" (src/caller_id.ml[13,312+7]..[13,312+10])
                              <arg>
                              Nolabel
                                expression (src/caller_id.ml[13,312+13]..[13,312+16])
                                  Pexp_ident "len" (src/caller_id.ml[13,312+13]..[13,312+16])
                            ]
                          expression (src/caller_id.ml[13,312+22]..[13,312+26])
                            Pexp_construct "None" (src/caller_id.ml[13,312+22]..[13,312+26])
                            None
                          Some
                            expression (src/caller_id.ml[15,348+6]..[21,535+78])
                              Pexp_match
                              expression (src/caller_id.ml[16,360+8]..[17,410+72])
                                Pexp_apply
                                expression (src/caller_id.ml[17,410+47]..[17,410+49])
                                  Pexp_ident "|>" (src/caller_id.ml[17,410+47]..[17,410+49])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/caller_id.ml[16,360+8]..[17,410+46])
                                      Pexp_apply
                                      expression (src/caller_id.ml[17,410+8]..[17,410+10])
                                        Pexp_ident "|>" (src/caller_id.ml[17,410+8]..[17,410+10])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/caller_id.ml[16,360+8]..[16,360+49])
                                            Pexp_apply
                                            expression (src/caller_id.ml[16,360+8]..[16,360+39])
                                              Pexp_ident "Printexc.get_raw_backtrace_slot" (src/caller_id.ml[16,360+8]..[16,360+39])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/caller_id.ml[16,360+40]..[16,360+45])
                                                  Pexp_ident "stack" (src/caller_id.ml[16,360+40]..[16,360+45])
                                              <arg>
                                              Nolabel
                                                expression (src/caller_id.ml[16,360+46]..[16,360+49])
                                                  Pexp_ident "pos" (src/caller_id.ml[16,360+46]..[16,360+49])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/caller_id.ml[17,410+11]..[17,410+46])
                                            Pexp_ident "Printexc.convert_raw_backtrace_slot" (src/caller_id.ml[17,410+11]..[17,410+46])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/caller_id.ml[17,410+50]..[17,410+72])
                                      Pexp_ident "Printexc.Slot.location" (src/caller_id.ml[17,410+50]..[17,410+72])
                                ]
                              [
                                <case>
                                  pattern (src/caller_id.ml[19,494+8]..[19,494+12])
                                    Ppat_construct "None" (src/caller_id.ml[19,494+8]..[19,494+12])
                                    None
                                  expression (src/caller_id.ml[19,494+16]..[19,494+20])
                                    Pexp_construct "None" (src/caller_id.ml[19,494+16]..[19,494+20])
                                    None
                                <case>
                                  pattern (src/caller_id.ml[20,515+8]..[20,515+16])
                                    Ppat_construct "Some" (src/caller_id.ml[20,515+8]..[20,515+12])
                                    Some
                                      pattern (src/caller_id.ml[20,515+13]..[20,515+16])
                                        Ppat_var "loc" (src/caller_id.ml[20,515+13]..[20,515+16])
                                  expression (src/caller_id.ml[21,535+10]..[21,535+78])
                                    Pexp_ifthenelse
                                    expression (src/caller_id.ml[21,535+13]..[21,535+44])
                                      Pexp_apply
                                      expression (src/caller_id.ml[21,535+13]..[21,535+21])
                                        Pexp_ident "List.mem" (src/caller_id.ml[21,535+13]..[21,535+21])
                                      [
                                        <arg>
                                        Labelled "set"
                                          expression (src/caller_id.ml[21,535+27]..[21,535+31])
                                            Pexp_ident "skip" (src/caller_id.ml[21,535+27]..[21,535+31])
                                        <arg>
                                        Nolabel
                                          expression (src/caller_id.ml[21,535+32]..[21,535+44])
                                            Pexp_field
                                            expression (src/caller_id.ml[21,535+32]..[21,535+35])
                                              Pexp_ident "loc" (src/caller_id.ml[21,535+32]..[21,535+35])
                                            "filename" (src/caller_id.ml[21,535+36]..[21,535+44])
                                      ]
                                    expression (src/caller_id.ml[21,535+50]..[21,535+64])
                                      Pexp_apply
                                      expression (src/caller_id.ml[21,535+50]..[21,535+54])
                                        Pexp_ident "loop" (src/caller_id.ml[21,535+50]..[21,535+54])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/caller_id.ml[21,535+55]..[21,535+64])
                                            Pexp_apply
                                            expression (src/caller_id.ml[21,535+60]..[21,535+61])
                                              Pexp_ident "+" (src/caller_id.ml[21,535+60]..[21,535+61])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/caller_id.ml[21,535+56]..[21,535+59])
                                                  Pexp_ident "pos" (src/caller_id.ml[21,535+56]..[21,535+59])
                                              <arg>
                                              Nolabel
                                                expression (src/caller_id.ml[21,535+62]..[21,535+63])
                                                  Pexp_constant PConst_int (1,None)
                                            ]
                                      ]
                                    Some
                                      expression (src/caller_id.ml[21,535+70]..[21,535+78])
                                        Pexp_construct "Some" (src/caller_id.ml[21,535+70]..[21,535+74])
                                        Some
                                          expression (src/caller_id.ml[21,535+75]..[21,535+78])
                                            Pexp_ident "loc" (src/caller_id.ml[21,535+75]..[21,535+78])
                              ]
                  ]
                  expression (src/caller_id.ml[23,619+2]..[23,619+8])
                    Pexp_apply
                    expression (src/caller_id.ml[23,619+2]..[23,619+6])
                      Pexp_ident "loop" (src/caller_id.ml[23,619+2]..[23,619+6])
                    [
                      <arg>
                      Nolabel
                        expression (src/caller_id.ml[23,619+7]..[23,619+8])
                          Pexp_constant PConst_int (0,None)
                    ]
    ]
]

[@@@ocaml.text " Small helper to find out who is the caller of a function "]
open! Import
module Printexc = Stdlib.Printexc
type t = Printexc.location option
let get ~skip  =
  let skip = __FILE__ :: skip in
  let stack = Printexc.get_callstack 16 in
  let len = Printexc.raw_backtrace_length stack in
  let rec loop pos =
    if pos = len
    then None
    else
      (match ((Printexc.get_raw_backtrace_slot stack pos) |>
                Printexc.convert_raw_backtrace_slot)
               |> Printexc.Slot.location
       with
       | None -> None
       | Some loc ->
           if List.mem ~set:skip loc.filename
           then loop (pos + 1)
           else Some loc) in
  loop 0
[
  structure_item (src/caller_id.ml[1,0+0]..src/caller_id.ml[1,0+63])
    Tstr_attribute "ocaml.text"
    [
      structure_item (src/caller_id.ml[1,0+0]..[1,0+63])
        Pstr_eval
        expression (src/caller_id.ml[1,0+0]..[1,0+63])
          Pexp_constant PConst_string(" Small helper to find out who is the caller of a function ",(src/caller_id.ml[1,0+0]..[1,0+63]),None)
    ]
  structure_item (src/caller_id.ml[3,65+0]..src/caller_id.ml[3,65+12])
    Tstr_open Override
    module_expr (src/caller_id.ml[3,65+6]..src/caller_id.ml[3,65+12])
      Tmod_ident "Ppxlib__!.Import"
  structure_item (src/caller_id.ml[4,78+0]..src/caller_id.ml[4,78+33])
    Tstr_module
    Printexc/550
      module_expr (src/caller_id.ml[4,78+18]..src/caller_id.ml[4,78+33])
        Tmod_ident "Stdlib!.Printexc"
  structure_item (src/caller_id.ml[6,113+0]..src/caller_id.ml[6,113+33])
    Tstr_type Rec
    [
      type_declaration t/551 (src/caller_id.ml[6,113+0]..src/caller_id.ml[6,113+33])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/caller_id.ml[6,113+9]..src/caller_id.ml[6,113+33])
              Ttyp_constr "option/12!"
              [
                core_type (src/caller_id.ml[6,113+9]..src/caller_id.ml[6,113+26])
                  Ttyp_constr "Printexc/550.location"
                  []
              ]
    ]
  structure_item (src/caller_id.ml[8,148+0]..src/caller_id.ml[23,619+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/caller_id.ml[8,148+4]..src/caller_id.ml[8,148+7])
          Tpat_var "get/592"
        expression (src/caller_id.ml[8,148+8]..src/caller_id.ml[23,619+8]) ghost
          Texp_function
          Labelled "skip"
          [
            <case>
              pattern (src/caller_id.ml[8,148+9]..src/caller_id.ml[8,148+13])
                Tpat_var "skip/594"
              expression (src/caller_id.ml[9,164+2]..src/caller_id.ml[23,619+8])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/caller_id.ml[9,164+6]..src/caller_id.ml[9,164+10])
                      Tpat_var "skip/595"
                    expression (src/caller_id.ml[9,164+13]..src/caller_id.ml[9,164+29])
                      Texp_construct "::"
                      [
                        expression (src/caller_id.ml[9,164+13]..src/caller_id.ml[9,164+21])
                          Texp_ident "Ppxlib__!.Import.__FILE__"
                        expression (src/caller_id.ml[9,164+25]..src/caller_id.ml[9,164+29])
                          Texp_ident "skip/594"
                      ]
                ]
                expression (src/caller_id.ml[10,197+2]..src/caller_id.ml[23,619+8])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (src/caller_id.ml[10,197+6]..src/caller_id.ml[10,197+11])
                        Tpat_var "stack/596"
                      expression (src/caller_id.ml[10,197+14]..src/caller_id.ml[10,197+39])
                        Texp_apply
                        expression (src/caller_id.ml[10,197+14]..src/caller_id.ml[10,197+36])
                          Texp_ident "Printexc/550.get_callstack"
                        [
                          <arg>
                            Nolabel
                            expression (src/caller_id.ml[10,197+37]..src/caller_id.ml[10,197+39])
                              Texp_constant Const_int 16
                        ]
                  ]
                  expression (src/caller_id.ml[11,240+2]..src/caller_id.ml[23,619+8])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/caller_id.ml[11,240+6]..src/caller_id.ml[11,240+9])
                          Tpat_var "len/604"
                        expression (src/caller_id.ml[11,240+12]..src/caller_id.ml[11,240+47])
                          Texp_apply
                          expression (src/caller_id.ml[11,240+12]..src/caller_id.ml[11,240+41])
                            Texp_ident "Printexc/550.raw_backtrace_length"
                          [
                            <arg>
                              Nolabel
                              expression (src/caller_id.ml[11,240+42]..src/caller_id.ml[11,240+47])
                                Texp_ident "stack/596"
                          ]
                    ]
                    expression (src/caller_id.ml[12,291+2]..src/caller_id.ml[23,619+8])
                      Texp_let Rec
                      [
                        <def>
                          pattern (src/caller_id.ml[12,291+10]..src/caller_id.ml[12,291+14])
                            Tpat_var "loop/605"
                          expression (src/caller_id.ml[12,291+15]..src/caller_id.ml[21,535+78]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/caller_id.ml[12,291+15]..src/caller_id.ml[12,291+18])
                                  Tpat_var "pos/606"
                                expression (src/caller_id.ml[13,312+4]..src/caller_id.ml[21,535+78])
                                  Texp_ifthenelse
                                  expression (src/caller_id.ml[13,312+7]..src/caller_id.ml[13,312+16])
                                    Texp_apply
                                    expression (src/caller_id.ml[13,312+11]..src/caller_id.ml[13,312+12])
                                      Texp_ident "Ppxlib__!.Import.="
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/caller_id.ml[13,312+7]..src/caller_id.ml[13,312+10])
                                          Texp_ident "pos/606"
                                      <arg>
                                        Nolabel
                                        expression (src/caller_id.ml[13,312+13]..src/caller_id.ml[13,312+16])
                                          Texp_ident "len/604"
                                    ]
                                  expression (src/caller_id.ml[13,312+22]..src/caller_id.ml[13,312+26])
                                    Texp_construct "None"
                                    []
                                  Some
                                    expression (src/caller_id.ml[15,348+6]..src/caller_id.ml[21,535+78])
                                      Texp_match
                                      expression (src/caller_id.ml[16,360+8]..src/caller_id.ml[17,410+72])
                                        Texp_apply
                                        expression (src/caller_id.ml[17,410+47]..src/caller_id.ml[17,410+49])
                                          Texp_ident "Stdlib!.|>"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/caller_id.ml[16,360+8]..src/caller_id.ml[17,410+46])
                                              Texp_apply
                                              expression (src/caller_id.ml[17,410+8]..src/caller_id.ml[17,410+10])
                                                Texp_ident "Stdlib!.|>"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/caller_id.ml[16,360+8]..src/caller_id.ml[16,360+49])
                                                    Texp_apply
                                                    expression (src/caller_id.ml[16,360+8]..src/caller_id.ml[16,360+39])
                                                      Texp_ident "Printexc/550.get_raw_backtrace_slot"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/caller_id.ml[16,360+40]..src/caller_id.ml[16,360+45])
                                                          Texp_ident "stack/596"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/caller_id.ml[16,360+46]..src/caller_id.ml[16,360+49])
                                                          Texp_ident "pos/606"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/caller_id.ml[17,410+11]..src/caller_id.ml[17,410+46])
                                                    Texp_ident "Printexc/550.convert_raw_backtrace_slot"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/caller_id.ml[17,410+50]..src/caller_id.ml[17,410+72])
                                              Texp_ident "Printexc/550.Slot.location"
                                        ]
                                      [
                                        <case>
                                          pattern (src/caller_id.ml[19,494+8]..src/caller_id.ml[19,494+12])
                                            Tpat_value
                                            pattern (src/caller_id.ml[19,494+8]..src/caller_id.ml[19,494+12])
                                              Tpat_construct "None"
                                              []
                                          expression (src/caller_id.ml[19,494+16]..src/caller_id.ml[19,494+20])
                                            Texp_construct "None"
                                            []
                                        <case>
                                          pattern (src/caller_id.ml[20,515+8]..src/caller_id.ml[20,515+16])
                                            Tpat_value
                                            pattern (src/caller_id.ml[20,515+8]..src/caller_id.ml[20,515+16])
                                              Tpat_construct "Some"
                                              [
                                                pattern (src/caller_id.ml[20,515+13]..src/caller_id.ml[20,515+16])
                                                  Tpat_var "loc/613"
                                              ]
                                          expression (src/caller_id.ml[21,535+10]..src/caller_id.ml[21,535+78])
                                            Texp_ifthenelse
                                            expression (src/caller_id.ml[21,535+13]..src/caller_id.ml[21,535+44])
                                              Texp_apply
                                              expression (src/caller_id.ml[21,535+13]..src/caller_id.ml[21,535+21])
                                                Texp_ident "Ppxlib__!.Import.List.mem"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/caller_id.ml[21,535+32]..src/caller_id.ml[21,535+44])
                                                    Texp_field
                                                    expression (src/caller_id.ml[21,535+32]..src/caller_id.ml[21,535+35])
                                                      Texp_ident "loc/613"
                                                    "filename"
                                                <arg>
                                                  Labelled "set"
                                                  expression (src/caller_id.ml[21,535+27]..src/caller_id.ml[21,535+31])
                                                    Texp_ident "skip/595"
                                              ]
                                            expression (src/caller_id.ml[21,535+50]..src/caller_id.ml[21,535+64])
                                              Texp_apply
                                              expression (src/caller_id.ml[21,535+50]..src/caller_id.ml[21,535+54])
                                                Texp_ident "loop/605"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/caller_id.ml[21,535+55]..src/caller_id.ml[21,535+64])
                                                    Texp_apply
                                                    expression (src/caller_id.ml[21,535+60]..src/caller_id.ml[21,535+61])
                                                      Texp_ident "Stdlib!.+"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/caller_id.ml[21,535+56]..src/caller_id.ml[21,535+59])
                                                          Texp_ident "pos/606"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/caller_id.ml[21,535+62]..src/caller_id.ml[21,535+63])
                                                          Texp_constant Const_int 1
                                                    ]
                                              ]
                                            Some
                                              expression (src/caller_id.ml[21,535+70]..src/caller_id.ml[21,535+78])
                                                Texp_construct "Some"
                                                [
                                                  expression (src/caller_id.ml[21,535+75]..src/caller_id.ml[21,535+78])
                                                    Texp_ident "loc/613"
                                                ]
                                      ]
                                      []
                            ]
                      ]
                      expression (src/caller_id.ml[23,619+2]..src/caller_id.ml[23,619+8])
                        Texp_apply
                        expression (src/caller_id.ml[23,619+2]..src/caller_id.ml[23,619+6])
                          Texp_ident "loop/605"
                        [
                          <arg>
                            Nolabel
                            expression (src/caller_id.ml[23,619+7]..src/caller_id.ml[23,619+8])
                              Texp_constant Const_int 0
                        ]
          ]
    ]
]

(setglobal Ppxlib__Caller_id!
  (let
    (get/592 =
       (function skip/594
         (funct-body Ppxlib__Caller_id.get src/caller_id.ml(8)<ghost>:156-627
           (before Ppxlib__Caller_id.get src/caller_id.ml(9):166-627
             (let (skip/595 = (makeblock 0 #"src/caller_id.ml" skip/594))
               (before Ppxlib__Caller_id.get src/caller_id.ml(10):199-627
                 (let
                   (stack/596 =
                      (after Ppxlib__Caller_id.get src/caller_id.ml(10):211-236
                        (caml_get_current_callstack 16)))
                   (before Ppxlib__Caller_id.get src/caller_id.ml(11):242-627
                     (let
                       (len/604 =[int]
                          (after Ppxlib__Caller_id.get src/caller_id.ml(11):252-287
                            (apply (field_imm 20 (global Stdlib__printexc!))
                              stack/596)))
                       (before Ppxlib__Caller_id.get src/caller_id.ml(12):293-627
                         (letrec
                           (loop/605
                              (function pos/606[int]
                                (funct-body Ppxlib__Caller_id.get.loop src/caller_id.ml(12)<ghost>:306-613
                                  (before Ppxlib__Caller_id.get.loop src/caller_id.ml(13):316-613
                                    (if
                                      (after Ppxlib__Caller_id.get.loop src/caller_id.ml(13):319-328
                                        (apply
                                          (field_imm 73
                                            (global Ppxlib__Import!))
                                          pos/606 len/604))
                                      (before Ppxlib__Caller_id.get.loop src/caller_id.ml(13):334-338
                                        0)
                                      (before Ppxlib__Caller_id.get.loop src/caller_id.ml(15):354-613
                                        (let
                                          (*match*/5947 =
                                             (after Ppxlib__Caller_id.get.loop src/caller_id.ml(16):368-482
                                               (revapply
                                                 (after Ppxlib__Caller_id.get.loop src/caller_id.ml(16):368-456
                                                   (revapply
                                                     (after Ppxlib__Caller_id.get.loop src/caller_id.ml(16):368-409
                                                       (apply
                                                         (field_imm 21
                                                           (global Stdlib__printexc!))
                                                         stack/596 pos/606))
                                                     (field_imm 22
                                                       (global Stdlib__printexc!))))
                                                 (field_imm 2
                                                   (field_imm 19
                                                     (global Stdlib__printexc!))))))
                                          (if *match*/5947
                                            (let
                                              (loc/613 =a
                                                 (field_imm 0 *match*/5947))
                                              (before Ppxlib__Caller_id.get.loop src/caller_id.ml(21):545-613
                                                (if
                                                  (after Ppxlib__Caller_id.get.loop src/caller_id.ml(21):548-579
                                                    (apply
                                                      (field_imm 24
                                                        (field_imm 91
                                                          (global Ppxlib__Import!)))
                                                      (field_imm 0 loc/613)
                                                      skip/595))
                                                  (before Ppxlib__Caller_id.get.loop src/caller_id.ml(21):585-599
                                                    (after Ppxlib__Caller_id.get.loop src/caller_id.ml(21):585-599
                                                      (apply loop/605
                                                        (+ pos/606 1))))
                                                  (before Ppxlib__Caller_id.get.loop src/caller_id.ml(21):605-613
                                                    (makeblock 0 loc/613)))))
                                            (before Ppxlib__Caller_id.get.loop src/caller_id.ml(19):510-514
                                              0)))))))))
                           (before Ppxlib__Caller_id.get src/caller_id.ml(23):621-627
                             (after Ppxlib__Caller_id.get src/caller_id.ml(23):621-627
                               (apply loop/605 0))))))))))))))
    (pseudo <unknown location> (makeblock 0 get/592))))
(setglobal Ppxlib__Caller_id!
  (let
    (get/592 =
       (function skip/594
         (funct-body Ppxlib__Caller_id.get src/caller_id.ml(8)<ghost>:156-627
           (before Ppxlib__Caller_id.get src/caller_id.ml(9):166-627
             (let (skip/595 = (makeblock 0 #"src/caller_id.ml" skip/594))
               (before Ppxlib__Caller_id.get src/caller_id.ml(10):199-627
                 (let
                   (stack/596 =
                      (after Ppxlib__Caller_id.get src/caller_id.ml(10):211-236
                        (caml_get_current_callstack 16)))
                   (before Ppxlib__Caller_id.get src/caller_id.ml(11):242-627
                     (let
                       (len/604 =[int]
                          (after Ppxlib__Caller_id.get src/caller_id.ml(11):252-287
                            (apply (field_imm 20 (global Stdlib__printexc!))
                              stack/596)))
                       (before Ppxlib__Caller_id.get src/caller_id.ml(12):293-627
                         (letrec
                           (loop/605
                              (function pos/606[int]
                                (funct-body Ppxlib__Caller_id.get.loop src/caller_id.ml(12)<ghost>:306-613
                                  (before Ppxlib__Caller_id.get.loop src/caller_id.ml(13):316-613
                                    (if
                                      (after Ppxlib__Caller_id.get.loop src/caller_id.ml(13):319-328
                                        (apply
                                          (field_imm 73
                                            (global Ppxlib__Import!))
                                          pos/606 len/604))
                                      (before Ppxlib__Caller_id.get.loop src/caller_id.ml(13):334-338
                                        0)
                                      (before Ppxlib__Caller_id.get.loop src/caller_id.ml(15):354-613
                                        (let
                                          (*match*/5947 =
                                             (after Ppxlib__Caller_id.get.loop src/caller_id.ml(16):368-482
                                               (apply
                                                 (field_imm 2
                                                   (field_imm 19
                                                     (global Stdlib__printexc!)))
                                                 (after Ppxlib__Caller_id.get.loop src/caller_id.ml(16):368-456
                                                   (apply
                                                     (field_imm 22
                                                       (global Stdlib__printexc!))
                                                     (after Ppxlib__Caller_id.get.loop src/caller_id.ml(16):368-409
                                                       (apply
                                                         (field_imm 21
                                                           (global Stdlib__printexc!))
                                                         stack/596 pos/606)))))))
                                          (if *match*/5947
                                            (let
                                              (loc/613 =a
                                                 (field_imm 0 *match*/5947))
                                              (before Ppxlib__Caller_id.get.loop src/caller_id.ml(21):545-613
                                                (if
                                                  (after Ppxlib__Caller_id.get.loop src/caller_id.ml(21):548-579
                                                    (apply
                                                      (field_imm 24
                                                        (field_imm 91
                                                          (global Ppxlib__Import!)))
                                                      (field_imm 0 loc/613)
                                                      skip/595))
                                                  (before Ppxlib__Caller_id.get.loop src/caller_id.ml(21):585-599
                                                    (after Ppxlib__Caller_id.get.loop src/caller_id.ml(21):585-599
                                                      (apply loop/605
                                                        (+ pos/606 1))))
                                                  (before Ppxlib__Caller_id.get.loop src/caller_id.ml(21):605-613
                                                    (makeblock 0 loc/613)))))
                                            (before Ppxlib__Caller_id.get.loop src/caller_id.ml(19):510-514
                                              0)))))))))
                           (before Ppxlib__Caller_id.get src/caller_id.ml(23):621-627
                             (after Ppxlib__Caller_id.get src/caller_id.ml(23):621-627
                               (apply loop/605 0))))))))))))))
    (pseudo <unknown location> (makeblock 0 get/592))))
